<html>                                                                  
<head>
	<meta charset="utf-8">
    <META HTTP-EQUIV="Pragma" CONTENT="no-cache">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0">		    
	<title>io reference</title>
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="index.css">
    <link rel="stylesheet" href="home_header.css">
    

	<script>
	var blackout = null;
	var blackoutPeriod = .2;
	
	function addBlackout() {
	    if (blackout) { 
	        return; 
	    }
	    
	    var div = document.createElement("div");
        div.className = "blackout"
        div.style.zIndex = "10";
        div.style.height = "100vh";
        div.style.width = "100%";
        div.style.background = "black";
        div.style.position = "fixed";
        div.style.top = 0;
        div.style.left = 0;
        div.style.opacity = 0;
        div.innerHTML = "test";
        div.style.animation = "fadein " + blackoutPeriod + "s";
        div.style.animationTimingFunction = "ease-in-out";
        document.body.appendChild(div);	
        blackout = div;    
	}
	
	function removeBlackout() {
	    var rate = 3
        blackout.style.animation = "fadeout " + blackoutPeriod*rate + "s";
            setTimeout(function () {
                document.body.removeChild(blackout);
                blackout = null	    
	        }, blackoutPeriod*1000*rate);
	}
	
	function jumpto(hash) {

            addBlackout()
            
            setTimeout(function () {
	            window.location = hash;
	            removeBlackout()
	        }, blackoutPeriod*1000);
	        
	    //console.log("jumpto: " + hash)
	}
	
	window.onload = function() {
        var anchors = document.getElementsByTagName('a');
        for(var i = 0; i < anchors.length; i++) {
            var anchor = anchors[i];
            var url = anchor.getAttribute('href', 2)
            if (url && url[0] == "#") {
                anchor.onclick = null;
                anchor.onclick = function() {
                    jumpto(this.getAttribute('href', 2));
                    return false
                }
            }
        }
    }
	
	</script>
	
	
</head>                                                                 
<body>
	<div class="pageHeader leftSpace">
    	<div class="topSpace"></div>
		<div class="pageTitle"><a href="../index.html">Io</a></div>
		<div class="pageSubtitle"> / reference</div>
	</div>
<div class='docs'>

<div class='index leftSpace'><div class='indexColumns'><div class='categoryIndex'>
<a name='Apple'></a>
<div class='categoryIndexName'>Apple</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>AppleExtras</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#AppleExtras.AppleSensors'><div class='classIndexName'>AppleSensors</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Audio'></a>
<div class='categoryIndexName'>Audio</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>LibSndFile</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#LibSndFile.LibSndFile'><div class='classIndexName'>LibSndFile</div>
</div>
</a>
<div class='classIndex'>
<a href='#LibSndFile.Sound'><div class='classIndexName'>Sound</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Ogg</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Ogg.OggPacket'><div class='classIndexName'>OggPacket</div>
</div>
</a>
<div class='classIndex'>
<a href='#Ogg.OggPage'><div class='classIndexName'>OggPage</div>
</div>
</a>
<div class='classIndex'>
<a href='#Ogg.OggStreamState'><div class='classIndexName'>OggStreamState</div>
</div>
</a>
<div class='classIndex'>
<a href='#Ogg.OggSyncState'><div class='classIndexName'>OggSyncState</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>PortAudio</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#PortAudio.AudioDevice'><div class='classIndexName'>AudioDevice</div>
</div>
</a>
<div class='classIndex'>
<a href='#PortAudio.AudioMixer'><div class='classIndexName'>AudioMixer</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>SampleRateConverter</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#SampleRateConverter.SampleRateConverter'><div class='classIndexName'>SampleRateConverter</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>SoundTouch</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#SoundTouch.SoundTouch'><div class='classIndexName'>SoundTouch</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>TagLib</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#TagLib.TagLib'><div class='classIndexName'>TagLib</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Bridges'></a>
<div class='categoryIndexName'>Bridges</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>ObjcBridge</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#ObjcBridge.ObjcBridge'><div class='classIndexName'>ObjcBridge</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Python</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Python.Python'><div class='classIndexName'>Python</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Compilers'></a>
<div class='categoryIndexName'>Compilers</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>Loki</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Loki.Linker'><div class='classIndexName'>Linker</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Compression'></a>
<div class='categoryIndexName'>Compression</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>LZO</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#LZO.LZO'><div class='classIndexName'>LZO</div>
</div>
</a>
<div class='classIndex'>
<a href='#LZO.LZODecoder'><div class='classIndexName'>LZODecoder</div>
</div>
</a>
<div class='classIndex'>
<a href='#LZO.LZOEncoder'><div class='classIndexName'>LZOEncoder</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Zlib</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Zlib.Zlib'><div class='classIndexName'>Zlib</div>
</div>
</a>
<div class='classIndex'>
<a href='#Zlib.ZlibDecoder'><div class='classIndexName'>ZlibDecoder</div>
</div>
</a>
<div class='classIndex'>
<a href='#Zlib.ZlibEncoder'><div class='classIndexName'>ZlibEncoder</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Concurrency'></a>
<div class='categoryIndexName'>Concurrency</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>Thread</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Thread.Thread'><div class='classIndexName'>Thread</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Core'></a>
<div class='categoryIndexName'>Core</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>Core</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Core.Block'><div class='classIndexName'>Block</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.CFunction'><div class='classIndexName'>CFunction</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Call'><div class='classIndexName'>Call</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Collector'><div class='classIndexName'>Collector</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Compiler'><div class='classIndexName'>Compiler</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Coroutine'><div class='classIndexName'>Coroutine</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Date'><div class='classIndexName'>Date</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Debugger'><div class='classIndexName'>Debugger</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Directory'><div class='classIndexName'>Directory</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.DynLib'><div class='classIndexName'>DynLib</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Error'><div class='classIndexName'>Error</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Exception'><div class='classIndexName'>Exception</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.File'><div class='classIndexName'>File</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.List'><div class='classIndexName'>List</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Map'><div class='classIndexName'>Map</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Message'><div class='classIndexName'>Message</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Number'><div class='classIndexName'>Number</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Object'><div class='classIndexName'>Object</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Profiler'><div class='classIndexName'>Profiler</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Sandbox'><div class='classIndexName'>Sandbox</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Scheduler'><div class='classIndexName'>Scheduler</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.Sequence'><div class='classIndexName'>Sequence</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.System'><div class='classIndexName'>System</div>
</div>
</a>
<div class='classIndex'>
<a href='#Core.WeakLink'><div class='classIndexName'>WeakLink</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Flux</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Flux.Message'><div class='classIndexName'>Message</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>NotificationCenter</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#NotificationCenter.Notification'><div class='classIndexName'>Notification</div>
</div>
</a>
<div class='classIndex'>
<a href='#NotificationCenter.NotificationCenter'><div class='classIndexName'>NotificationCenter</div>
</div>
</a>
<div class='classIndex'>
<a href='#NotificationCenter.NotificationListener'><div class='classIndexName'>NotificationListener</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Range</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Range.Range'><div class='classIndexName'>Range</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Databases'></a>
<div class='categoryIndexName'>Databases</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>DBI</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#DBI.DBI'><div class='classIndexName'>DBI</div>
</div>
</a>
<div class='classIndex'>
<a href='#DBI.DBIConn'><div class='classIndexName'>DBIConn</div>
</div>
</a>
<div class='classIndex'>
<a href='#DBI.DBIRecord'><div class='classIndexName'>DBIRecord</div>
</div>
</a>
<div class='classIndex'>
<a href='#DBI.DBIResult'><div class='classIndexName'>DBIResult</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Memcached</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Memcached.Memcached'><div class='classIndexName'>Memcached</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>MySQL</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#MySQL.MySQL'><div class='classIndexName'>MySQL</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Obsidian</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Obsidian.Obsidian'><div class='classIndexName'>Obsidian</div>
</div>
</a>
<div class='classIndex'>
<a href='#Obsidian.ObsidianClient'><div class='classIndexName'>ObsidianClient</div>
</div>
</a>
<div class='classIndex'>
<a href='#Obsidian.ObsidianServer'><div class='classIndexName'>ObsidianServer</div>
</div>
</a>
<div class='classIndex'>
<a href='#Obsidian.PDB'><div class='classIndexName'>PDB</div>
</div>
</a>
<div class='classIndex'>
<a href='#Obsidian.PMap'><div class='classIndexName'>PMap</div>
</div>
</a>
<div class='classIndex'>
<a href='#Obsidian.PObject'><div class='classIndexName'>PObject</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Postgres</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Postgres.Postgres'><div class='classIndexName'>Postgres</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>QDBM</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#QDBM.QDBM'><div class='classIndexName'>QDBM</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>SQLite</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#SQLite.SQLite'><div class='classIndexName'>SQLite</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>SQLite3</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#SQLite3.SQLite3'><div class='classIndexName'>SQLite3</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>SkipDB</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#SkipDB.SkipDB'><div class='classIndexName'>SkipDB</div>
</div>
</a>
<div class='classIndex'>
<a href='#SkipDB.SkipDBCursor'><div class='classIndexName'>SkipDBCursor</div>
</div>
</a>
<div class='classIndex'>
<a href='#SkipDB.SkipDBM'><div class='classIndexName'>SkipDBM</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>SqlDatabase</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#SqlDatabase.SqlDatabase'><div class='classIndexName'>SqlDatabase</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>TagDB</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#TagDB.TagDB'><div class='classIndexName'>TagDB</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>TokyoCabinet</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#TokyoCabinet.TokyoCabinet'><div class='classIndexName'>TokyoCabinet</div>
</div>
</a>
<div class='classIndex'>
<a href='#TokyoCabinet.TokyoCabinetCursor'><div class='classIndexName'>TokyoCabinetCursor</div>
</div>
</a>
<div class='classIndex'>
<a href='#TokyoCabinet.TokyoCabinetPrefixCursor'><div class='classIndexName'>TokyoCabinetPrefixCursor</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Digests'></a>
<div class='categoryIndexName'>Digests</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>MD5</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#MD5.MD5'><div class='classIndexName'>MD5</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>SHA1</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#SHA1.SHA1'><div class='classIndexName'>SHA1</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>UUID</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#UUID.UUID'><div class='classIndexName'>UUID</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Encryption'></a>
<div class='categoryIndexName'>Encryption</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>Blowfish</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Blowfish.Blowfish'><div class='classIndexName'>Blowfish</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Filesystem'></a>
<div class='categoryIndexName'>Filesystem</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>AsyncRequest</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#AsyncRequest.AsyncRequest'><div class='classIndexName'>AsyncRequest</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Graphics'></a>
<div class='categoryIndexName'>Graphics</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>Box</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Box.Box'><div class='classIndexName'>Box</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Cairo</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Cairo.Cairo'><div class='classIndexName'>Cairo</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoContext'><div class='classIndexName'>CairoContext</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoExtents'><div class='classIndexName'>CairoExtents</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoFontExtents'><div class='classIndexName'>CairoFontExtents</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoFontFace'><div class='classIndexName'>CairoFontFace</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoFontOptions'><div class='classIndexName'>CairoFontOptions</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoGlyph'><div class='classIndexName'>CairoGlyph</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoGradient'><div class='classIndexName'>CairoGradient</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoImageSurface'><div class='classIndexName'>CairoImageSurface</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoLinearGradient'><div class='classIndexName'>CairoLinearGradient</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoMatrix'><div class='classIndexName'>CairoMatrix</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoPath'><div class='classIndexName'>CairoPath</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoPathElement'><div class='classIndexName'>CairoPathElement</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoPattern'><div class='classIndexName'>CairoPattern</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoRadialGradient'><div class='classIndexName'>CairoRadialGradient</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoRectangle'><div class='classIndexName'>CairoRectangle</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoScaledFont'><div class='classIndexName'>CairoScaledFont</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoSolidPattern'><div class='classIndexName'>CairoSolidPattern</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoSurface'><div class='classIndexName'>CairoSurface</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoSurfacePattern'><div class='classIndexName'>CairoSurfacePattern</div>
</div>
</a>
<div class='classIndex'>
<a href='#Cairo.CairoTextExtents'><div class='classIndexName'>CairoTextExtents</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Font</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Font.Font'><div class='classIndexName'>Font</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>GLFW</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#GLFW.GLFW'><div class='classIndexName'>GLFW</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Image</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Image.Image'><div class='classIndexName'>Image</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>OpenGL</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#OpenGL.Box'><div class='classIndexName'>Box</div>
</div>
</a>
<div class='classIndex'>
<a href='#OpenGL.GLApp'><div class='classIndexName'>GLApp</div>
</div>
</a>
<div class='classIndex'>
<a href='#OpenGL.GLScissor'><div class='classIndexName'>GLScissor</div>
</div>
</a>
<div class='classIndex'>
<a href='#OpenGL.GLU'><div class='classIndexName'>GLU</div>
</div>
</a>
<div class='classIndex'>
<a href='#OpenGL.GLUQuadric'><div class='classIndexName'>GLUQuadric</div>
</div>
</a>
<div class='classIndex'>
<a href='#OpenGL.GLUT'><div class='classIndexName'>GLUT</div>
</div>
</a>
<div class='classIndex'>
<a href='#OpenGL.OpenGL'><div class='classIndexName'>OpenGL</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Math'></a>
<div class='categoryIndexName'>Math</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>BigNum</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#BigNum.BigNum'><div class='classIndexName'>BigNum</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>ContinuedFraction</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#ContinuedFraction.ContinuedFraction'><div class='classIndexName'>ContinuedFraction</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Random</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Random.Random'><div class='classIndexName'>Random</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Rational</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Rational.Rational'><div class='classIndexName'>Rational</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Networking'></a>
<div class='categoryIndexName'>Networking</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>Beanstalk</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Beanstalk.Beanstalk'><div class='classIndexName'>Beanstalk</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>CGI</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#CGI.CGI'><div class='classIndexName'>CGI</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>DistributedObjects</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#DistributedObjects.DOConnection'><div class='classIndexName'>DOConnection</div>
</div>
</a>
<div class='classIndex'>
<a href='#DistributedObjects.DOProxy'><div class='classIndexName'>DOProxy</div>
</div>
</a>
<div class='classIndex'>
<a href='#DistributedObjects.DOServer'><div class='classIndexName'>DOServer</div>
</div>
</a>
<div class='classIndex'>
<a href='#DistributedObjects.MDOConnection'><div class='classIndexName'>MDOConnection</div>
</div>
</a>
<div class='classIndex'>
<a href='#DistributedObjects.MDOServer'><div class='classIndexName'>MDOServer</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>GoogleSearch</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#GoogleSearch.GooglePage'><div class='classIndexName'>GooglePage</div>
</div>
</a>
<div class='classIndex'>
<a href='#GoogleSearch.GoogleSearch'><div class='classIndexName'>GoogleSearch</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>HttpClient</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#HttpClient.HCConnection'><div class='classIndexName'>HCConnection</div>
</div>
</a>
<div class='classIndex'>
<a href='#HttpClient.HCRequest'><div class='classIndexName'>HCRequest</div>
</div>
</a>
<div class='classIndex'>
<a href='#HttpClient.HCResponse'><div class='classIndexName'>HCResponse</div>
</div>
</a>
<div class='classIndex'>
<a href='#HttpClient.HCResponseParser'><div class='classIndexName'>HCResponseParser</div>
</div>
</a>
<div class='classIndex'>
<a href='#HttpClient.HCUrl'><div class='classIndexName'>HCUrl</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Loudmouth</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Loudmouth.JID'><div class='classIndexName'>JID</div>
</div>
</a>
<div class='classIndex'>
<a href='#Loudmouth.Loudmouth'><div class='classIndexName'>Loudmouth</div>
</div>
</a>
<div class='classIndex'>
<a href='#Loudmouth.LoudmouthMessage'><div class='classIndexName'>LoudmouthMessage</div>
</div>
</a>
<div class='classIndex'>
<a href='#Loudmouth.XmppChatMessage'><div class='classIndexName'>XmppChatMessage</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>NetworkAdapter</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#NetworkAdapter.NetworkAdapter'><div class='classIndexName'>NetworkAdapter</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>SecureSocket</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#SecureSocket.Certificate'><div class='classIndexName'>Certificate</div>
</div>
</a>
<div class='classIndex'>
<a href='#SecureSocket.SecureClient'><div class='classIndexName'>SecureClient</div>
</div>
</a>
<div class='classIndex'>
<a href='#SecureSocket.SecureServer'><div class='classIndexName'>SecureServer</div>
</div>
</a>
<div class='classIndex'>
<a href='#SecureSocket.SecureSocket'><div class='classIndexName'>SecureSocket</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Socket</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Socket.DNS'><div class='classIndexName'>DNS</div>
</div>
</a>
<div class='classIndex'>
<a href='#Socket.DNSQuery'><div class='classIndexName'>DNSQuery</div>
</div>
</a>
<div class='classIndex'>
<a href='#Socket.DNSServer'><div class='classIndexName'>DNSServer</div>
</div>
</a>
<div class='classIndex'>
<a href='#Socket.EvConnection'><div class='classIndexName'>EvConnection</div>
</div>
</a>
<div class='classIndex'>
<a href='#Socket.EvRequest'><div class='classIndexName'>EvRequest</div>
</div>
</a>
<div class='classIndex'>
<a href='#Socket.Event'><div class='classIndexName'>Event</div>
</div>
</a>
<div class='classIndex'>
<a href='#Socket.EventManager'><div class='classIndexName'>EventManager</div>
</div>
</a>
<div class='classIndex'>
<a href='#Socket.Host'><div class='classIndexName'>Host</div>
</div>
</a>
<div class='classIndex'>
<a href='#Socket.IPAddress'><div class='classIndexName'>IPAddress</div>
</div>
</a>
<div class='classIndex'>
<a href='#Socket.ReadEvent'><div class='classIndexName'>ReadEvent</div>
</div>
</a>
<div class='classIndex'>
<a href='#Socket.Server'><div class='classIndexName'>Server</div>
</div>
</a>
<div class='classIndex'>
<a href='#Socket.SignalEvent'><div class='classIndexName'>SignalEvent</div>
</div>
</a>
<div class='classIndex'>
<a href='#Socket.Socket'><div class='classIndexName'>Socket</div>
</div>
</a>
<div class='classIndex'>
<a href='#Socket.TimerEvent'><div class='classIndexName'>TimerEvent</div>
</div>
</a>
<div class='classIndex'>
<a href='#Socket.URL'><div class='classIndexName'>URL</div>
</div>
</a>
<div class='classIndex'>
<a href='#Socket.WriteEvent'><div class='classIndexName'>WriteEvent</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Twitter</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Twitter.TwitterAccount'><div class='classIndexName'>TwitterAccount</div>
</div>
</a>
<div class='classIndex'>
<a href='#Twitter.TwitterAccountProfile'><div class='classIndexName'>TwitterAccountProfile</div>
</div>
</a>
<div class='classIndex'>
<a href='#Twitter.TwitterException'><div class='classIndexName'>TwitterException</div>
</div>
</a>
<div class='classIndex'>
<a href='#Twitter.TwitterFollowersCursor'><div class='classIndexName'>TwitterFollowersCursor</div>
</div>
</a>
<div class='classIndex'>
<a href='#Twitter.TwitterFriendsCursor'><div class='classIndexName'>TwitterFriendsCursor</div>
</div>
</a>
<div class='classIndex'>
<a href='#Twitter.TwitterRequest'><div class='classIndexName'>TwitterRequest</div>
</div>
</a>
<div class='classIndex'>
<a href='#Twitter.TwitterResponse'><div class='classIndexName'>TwitterResponse</div>
</div>
</a>
<div class='classIndex'>
<a href='#Twitter.TwitterSearch'><div class='classIndexName'>TwitterSearch</div>
</div>
</a>
<div class='classIndex'>
<a href='#Twitter.TwitterSearchCursor'><div class='classIndexName'>TwitterSearchCursor</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Volcano</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Volcano.VolcanoServer'><div class='classIndexName'>VolcanoServer</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Parsers'></a>
<div class='categoryIndexName'>Parsers</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>Fnmatch</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Fnmatch.Fnmatch'><div class='classIndexName'>Fnmatch</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Libxml2</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Libxml2.XmlReader'><div class='classIndexName'>XmlReader</div>
</div>
</a>
<div class='classIndex'>
<a href='#Libxml2.XmlWriter'><div class='classIndexName'>XmlWriter</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Regex</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Regex.Regex'><div class='classIndexName'>Regex</div>
</div>
</a>
<div class='classIndex'>
<a href='#Regex.RegexMatch'><div class='classIndexName'>RegexMatch</div>
</div>
</a>
<div class='classIndex'>
<a href='#Regex.RegexMatche'><div class='classIndexName'>RegexMatche</div>
</div>
</a>
<div class='classIndex'>
<a href='#Regex.RegexMatches'><div class='classIndexName'>RegexMatches</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>SGML</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#SGML.SGMLElement'><div class='classIndexName'>SGMLElement</div>
</div>
</a>
<div class='classIndex'>
<a href='#SGML.SGMLParser'><div class='classIndexName'>SGMLParser</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Yajl</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Yajl.YajlGenParser'><div class='classIndexName'>YajlGenParser</div>
</div>
</a>
<div class='classIndex'>
<a href='#Yajl.YajlParser'><div class='classIndexName'>YajlParser</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Physics'></a>
<div class='categoryIndexName'>Physics</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>ODE</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#ODE.ODEBall'><div class='classIndexName'>ODEBall</div>
</div>
</a>
<div class='classIndex'>
<a href='#ODE.ODEBody'><div class='classIndexName'>ODEBody</div>
</div>
</a>
<div class='classIndex'>
<a href='#ODE.ODEBox'><div class='classIndexName'>ODEBox</div>
</div>
</a>
<div class='classIndex'>
<a href='#ODE.ODEContact'><div class='classIndexName'>ODEContact</div>
</div>
</a>
<div class='classIndex'>
<a href='#ODE.ODEContactJoint'><div class='classIndexName'>ODEContactJoint</div>
</div>
</a>
<div class='classIndex'>
<a href='#ODE.ODEFixed'><div class='classIndexName'>ODEFixed</div>
</div>
</a>
<div class='classIndex'>
<a href='#ODE.ODEHinge'><div class='classIndexName'>ODEHinge</div>
</div>
</a>
<div class='classIndex'>
<a href='#ODE.ODEHinge2'><div class='classIndexName'>ODEHinge2</div>
</div>
</a>
<div class='classIndex'>
<a href='#ODE.ODEJoint'><div class='classIndexName'>ODEJoint</div>
</div>
</a>
<div class='classIndex'>
<a href='#ODE.ODEJointGroup'><div class='classIndexName'>ODEJointGroup</div>
</div>
</a>
<div class='classIndex'>
<a href='#ODE.ODEMass'><div class='classIndexName'>ODEMass</div>
</div>
</a>
<div class='classIndex'>
<a href='#ODE.ODEPlane'><div class='classIndexName'>ODEPlane</div>
</div>
</a>
<div class='classIndex'>
<a href='#ODE.ODESimpleSpace'><div class='classIndexName'>ODESimpleSpace</div>
</div>
</a>
<div class='classIndex'>
<a href='#ODE.ODEWorld'><div class='classIndexName'>ODEWorld</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Server'></a>
<div class='categoryIndexName'>Server</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>Curses</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Curses.Curses'><div class='classIndexName'>Curses</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>EditLine</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#EditLine.EditLine'><div class='classIndexName'>EditLine</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>NullAddon</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#NullAddon.NullAddon'><div class='classIndexName'>NullAddon</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>ReadLine</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#ReadLine.ReadLine'><div class='classIndexName'>ReadLine</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Syslog</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Syslog.Syslog'><div class='classIndexName'>Syslog</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>SystemCall</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#SystemCall.SystemCall'><div class='classIndexName'>SystemCall</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>User</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#User.User'><div class='classIndexName'>User</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='UserInterface'></a>
<div class='categoryIndexName'>UserInterface</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>Clutter</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Clutter.Clutter'><div class='classIndexName'>Clutter</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='Video'></a>
<div class='categoryIndexName'>Video</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>AVCodec</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#AVCodec.AVCodec'><div class='classIndexName'>AVCodec</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Theora</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Theora.TheoraComment'><div class='classIndexName'>TheoraComment</div>
</div>
</a>
<div class='classIndex'>
<a href='#Theora.TheoraDecodeContext'><div class='classIndexName'>TheoraDecodeContext</div>
</div>
</a>
<div class='classIndex'>
<a href='#Theora.TheoraInfo'><div class='classIndexName'>TheoraInfo</div>
</div>
</a>
<div class='classIndex'>
<a href='#Theora.TheoraSetupInfo'><div class='classIndexName'>TheoraSetupInfo</div>
</div>
</a>
</div>
</div>
<div class='packageIndex'>
<div class='packageIndexName'>Vorbis</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#Vorbis.VorbisBlock'><div class='classIndexName'>VorbisBlock</div>
</div>
</a>
<div class='classIndex'>
<a href='#Vorbis.VorbisComment'><div class='classIndexName'>VorbisComment</div>
</div>
</a>
<div class='classIndex'>
<a href='#Vorbis.VorbisDspState'><div class='classIndexName'>VorbisDspState</div>
</div>
</a>
<div class='classIndex'>
<a href='#Vorbis.VorbisInfo'><div class='classIndexName'>VorbisInfo</div>
</div>
</a>
</div>
</div>
</div>
</div>
<div class='categoryIndex'>
<a name='binding'></a>
<div class='categoryIndexName'>binding</div>
<div class='categoryItems'><div class='packageIndex'>
<div class='packageIndexName'>CFFI</div>
<div class='packageItemsIndex'><div class='classIndex'>
<a href='#CFFI.CFFI'><div class='classIndexName'>CFFI</div>
</div>
</a>
</div>
</div>
</div>
</div>
</div></div><div class='categories'><div class='category'>
<div class='categoryName'>Apple</div>
<div class='package'>
<div class='packageName'>AppleExtras</div>
<a name='AppleExtras.AppleSensors'></a>
<div class='class'>
<div class='className'>AppleSensors</div>
<div class='classDescription'>A singleton which on Apple computers can:
<ul>
<li> get and set display and keyboard brightness
<li> read left and right ambient light sensors (laptops only)
<li> read accelerometer sensor (laptops only)
</ul>
Example use;
<pre>	
sensors = AppleSensors clone
value := sensors getRightLightSensor
</pre>
</div>
<div class='slot'>
<div class='slotName'>getDisplayBrightness</div>
<div class='slotValue'>		Returns a number for the display brightness.
</div>
</div>
<div class='slot'>
<div class='slotName'>getKeyboardBrightness</div>
<div class='slotValue'>		Returns a number for the keyboard brightness.
</div>
</div>
<div class='slot'>
<div class='slotName'>getLeftLightSensor</div>
<div class='slotValue'>		Returns a number for the left ambient light sensor.
</div>
</div>
<div class='slot'>
<div class='slotName'>getRightLightSensor</div>
<div class='slotValue'>		Returns a number for the right ambient light sensor.
</div>
</div>
<div class='slot'>
<div class='slotName'>setDisplayBrightness(aNumber)</div>
<div class='slotValue'>		Sets the display brightness. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setKeyboardBrightness(aNumber)</div>
<div class='slotValue'>		Sets the keyboard brightness. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>smsVector(aVector)</div>
<div class='slotValue'>		Sets aVector to the current x, y and z accelerometer values. 
		Returns true on success and false on failure.
</div>
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Audio</div>
<div class='package'>
<div class='packageName'>LibSndFile</div>
<a name='LibSndFile.LibSndFile'></a>
<div class='class'>
<div class='className'>LibSndFile</div>
<div class='classDescription'>An object for encoding and decoding audio files (principally WAV and AIFF) using the 
<a href=http://www.mega-nerd.com/libsndfile/>Libsndfile</a> library.
</div>
<div class='slot'>
<div class='slotName'>channels</div>
<div class='slotValue'>Returns channels read from the audio file.
</div>
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>	Closes the file if it is open. 
	Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>format</div>
<div class='slotValue'>Returns format read from the audio file.
</div>
</div>
<div class='slot'>
<div class='slotName'>formatNames</div>
<div class='slotValue'>	Returns a list of strings with the names of the supported codecs.
</div>
</div>
<div class='slot'>
<div class='slotName'>openForReading</div>
<div class='slotValue'>Opens the file at the path specified in the path slot and sets the following slots:
<pre>
frames
sampleRate
channels
format
seekable
</pre>
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>openForWriting</div>
<div class='slotValue'>Opens the file at the path specified in the path slot for writing. The following slots should be set first to specify the output format:
<pre>
sampleRate
channels
format
</pre>
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>outputBuffer</div>
<div class='slotValue'>	Returns the output buffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>path</div>
<div class='slotValue'>Returns path to audio file.
</div>
</div>
<div class='slot'>
<div class='slotName'>read(numberOfFrames)</div>
<div class='slotValue'>	Read a given number of frames (sample pairs).
	Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>sampleRate</div>
<div class='slotValue'>Returns sample rate read from the audio file.
</div>
</div>
<div class='slot'>
<div class='slotName'>setFormat(aSeq)</div>
<div class='slotValue'> Sets the format used for writing. Use the formatNames method to get a list of supported format names. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPath(aPath)</div>
<div class='slotValue'> Sets path to audio file.
</div>
</div>
<div class='slot'>
<div class='slotName'>write(aSeq)</div>
<div class='slotValue'>Writes aSeq using the format specified by the slots:
<pre>
sampleRate
channels
format
</pre>
Returns the number of frames written.
</div>
</div>
</div>
<a name='LibSndFile.Sound'></a>
<div class='class'>
<div class='className'>Sound</div>
<div class='classDescription'>Encapsulates a audio file. Usefull for reading an audio file using LibSndFile.
</div>
<div class='slot'>
<div class='slotName'>buffer</div>
<div class='slotValue'>Returns the buffer used to read the audio file.
</div>
</div>
<div class='slot'>
<div class='slotName'>format</div>
<div class='slotValue'>Returns format read from the audio file.
</div>
</div>
<div class='slot'>
<div class='slotName'>load</div>
<div class='slotValue'>Returns Loads the file data into the buffer in interleaved stereo 32bit float format and sets the sampleRate, channels and format slots. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>path</div>
<div class='slotValue'>Returns path to audio file.
</div>
</div>
<div class='slot'>
<div class='slotName'>sampleRate</div>
<div class='slotValue'>Returns number of channels read from the audio file.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPath(aPath)</div>
<div class='slotValue'> Sets path to audio file.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Ogg</div>
<a name='Ogg.OggPacket'></a>
<div class='class'>
<div class='className'>OggPacket</div>
<div class='classDescription'>A wrapper around the libogg ogg_packet object. No methods - used internally.
</div>
</div>
<a name='Ogg.OggPage'></a>
<div class='class'>
<div class='className'>OggPage</div>
<div class='classDescription'>A wrapper around the libogg ogg_page object.
</div>
<div class='slot'>
<div class='slotName'>bos</div>
<div class='slotValue'>	Indicates if the current page is the beginning of the stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>continued</div>
<div class='slotValue'>	Indicates if the current page contains a continued
        packet from the last page.
</div>
</div>
<div class='slot'>
<div class='slotName'>eos</div>
<div class='slotValue'>	Indicates if the current page is the end of the stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>granulepos</div>
<div class='slotValue'>	Returns the precise playback location of this page.
</div>
</div>
<div class='slot'>
<div class='slotName'>packets</div>
<div class='slotValue'>	Returns the number of packets in the page.
</div>
</div>
<div class='slot'>
<div class='slotName'>pageno</div>
<div class='slotValue'>	Returns the sequential page number for this page.
</div>
</div>
<div class='slot'>
<div class='slotName'>serialno</div>
<div class='slotValue'>	Returns the unique serial number of the logical bitstream
        associated with this page.
</div>
</div>
<div class='slot'>
<div class='slotName'>setChecksum</div>
<div class='slotValue'>	Computes and sets the checksum for this page.
</div>
</div>
<div class='slot'>
<div class='slotName'>version</div>
<div class='slotValue'>	Returns the ogg_page version that this page uses.
</div>
</div>
</div>
<a name='Ogg.OggStreamState'></a>
<div class='class'>
<div class='className'>OggStreamState</div>
<div class='classDescription'>A wrapper around the libogg ogg_stream_state object.
</div>
<div class='slot'>
<div class='slotName'>clear</div>
<div class='slotValue'>	Clears the storage within the Ogg stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>eos</div>
<div class='slotValue'>	  Indicates whether we are at the end of the stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>packetout(packet)</div>
<div class='slotValue'>	  Outputs a packet to the codec-specific decoding engine.
</div>
</div>
<div class='slot'>
<div class='slotName'>packetpeek(packet)</div>
<div class='slotValue'>	  Provides access to the next packet in the bitstream
	  without advancing decoding.
</div>
</div>
<div class='slot'>
<div class='slotName'>pagein(page)</div>
<div class='slotValue'>	  Submits a complete page to the stream layer.
</div>
</div>
<div class='slot'>
<div class='slotName'>reset</div>
<div class='slotValue'>	  Resets the stream status to its initial position.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSerialNumber</div>
<div class='slotValue'>	Sets the serial number for this stream.
</div>
</div>
</div>
<a name='Ogg.OggSyncState'></a>
<div class='class'>
<div class='className'>OggSyncState</div>
<div class='classDescription'>A wrapper around the libogg ogg_sync_state object.
</div>
<div class='slot'>
<div class='slotName'>clear</div>
<div class='slotValue'>	Free's any internal storage and resets to the initial state.
</div>
</div>
<div class='slot'>
<div class='slotName'>pageout(page)</div>
<div class='slotValue'>	Outputs a page from the synchronisation layer.
</div>
</div>
<div class='slot'>
<div class='slotName'>pageseek(page)</div>
<div class='slotValue'>	Finds the borders of pages and resynchronises the stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>reset</div>
<div class='slotValue'>	Resets the synchronization status to initial values.
</div>
</div>
<div class='slot'>
<div class='slotName'>write(seq)</div>
<div class='slotValue'>        Copies the data from the sequence into the synchronisation
	layer.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>PortAudio</div>
<a name='PortAudio.AudioDevice'></a>
<div class='class'>
<div class='className'>AudioDevice</div>
<div class='classDescription'>The AudioDevice object can used to write audio data as if directly to the audio buffer.
</div>
<div class='slot'>
<div class='slotName'>asyncRead</div>
<div class='slotValue'>	Returns the audio read buffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncWrite(aBuffer)</div>
<div class='slotValue'>	Writes aBuffer to the audio output buffer and returns immediately.
</div>
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>	Close the audio stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>error</div>
<div class='slotValue'>	Returns an error string if an error has occured, Nil otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isActive</div>
<div class='slotValue'>	Returns self if the receiver is active, Nil otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>needsData</div>
<div class='slotValue'>	Returns true if the receiver can read more data.
</div>
</div>
<div class='slot'>
<div class='slotName'>open</div>
<div class='slotValue'>	Open an audio output stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>openForReadingAndWriting</div>
<div class='slotValue'>	Open audio output and input streams.
</div>
</div>
<div class='slot'>
<div class='slotName'>streamTime</div>
<div class='slotValue'>	Returns the audio stream time as a number.
</div>
</div>
<div class='slot'>
<div class='slotName'>write(aSeq)</div>
<div class='slotValue'>	Writes aSeq to the inputBuffer and yields until the 
	receiver is ready for more input data. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>writeBufferIsEmpty</div>
<div class='slotValue'>	Returns the true if the audio buffer is empty, false otherwise.
</div>
</div>
</div>
<a name='PortAudio.AudioMixer'></a>
<div class='class'>
<div class='className'>AudioMixer</div>
<div class='classDescription'>A minimal audio mixer.
</div>
<div class='slot'>
<div class='slotName'>appendSource(aSource)</div>
<div class='slotValue'> Adds aSource to sources list. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>isRunning</div>
<div class='slotValue'>Returns true if the mixer is running, false otherwise..
</div>
</div>
<div class='slot'>
<div class='slotName'>process(sampleCount)</div>
<div class='slotValue'> Internal method used for processing a chunk of the input sources. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>processedSamples</div>
<div class='slotValue'>Returns the number of processed samples.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeSource(aSource)</div>
<div class='slotValue'> Removes aSource to sources list. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>start</div>
<div class='slotValue'>		Start the mixer loop processing 1/64th of a second chunks
		by calling process(22050) in a loop.
		Will not return until stop is called. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>stop</div>
<div class='slotValue'>Stops the mixer if it is running.
</div>
</div>
<div class='slot'>
<div class='slotName'>streamDestination</div>
<div class='slotValue'>The output stream object.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>SampleRateConverter</div>
<a name='SampleRateConverter.SampleRateConverter'></a>
<div class='class'>
<div class='className'>SampleRateConverter</div>
<div class='classDescription'>	A binding for <a href="http://www.mega-nerd.com/SRC/">libsamplerate</a> 
	useful for up or downconverting the sample rate of a raw audio stream.
	Streams are assumed to be in 32bit float interleaved stereo.
</div>
<div class='slot'>
<div class='slotName'>inputBuffer</div>
<div class='slotValue'>	Returns the input buffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>outputBuffer</div>
<div class='slotValue'>	Returns the output buffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>process</div>
<div class='slotValue'>	Process the input buffer to perform the conversion. 
	Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setEndOFInput(aBool)</div>
<div class='slotValue'>	Sets the end of input flag.
	Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setOutputToInputRatio(aNumber)</div>
<div class='slotValue'>	Returns the output to input ration for the conversion.
</div>
</div>
<div class='slot'>
<div class='slotName'>start</div>
<div class='slotValue'>	Stops processing.
	Returns self.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>SoundTouch</div>
<a name='SoundTouch.SoundTouch'></a>
<div class='class'>
<div class='className'>SoundTouch</div>
<div class='classDescription'>	Used to change the tempo and/or pitch of an audio stream. 
	Input and output are in 32 bit floats in 2 channels at a rate 
	of 44100 samples per second.
</div>
<div class='slot'>
<div class='slotName'>inputBuffer</div>
<div class='slotValue'>	Returns the input buffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>outputBuffer</div>
<div class='slotValue'>	Returns the output buffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>process</div>
<div class='slotValue'>	Processes a chunk of the inputBuffer and appends the results to the outputBuffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>setChannels(aNumber)</div>
<div class='slotValue'>	Sets the number of input channels.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPitchSemitones(aNumber)</div>
<div class='slotValue'>	Sets the output increase in pitch semitones.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSampleRate(aNumber)</div>
<div class='slotValue'>	Sets the input sample rate in Hz.
</div>
</div>
<div class='slot'>
<div class='slotName'>setTempo(aNumber)</div>
<div class='slotValue'>	Sets the tempo.
</div>
</div>
<div class='slot'>
<div class='slotName'>setTempoChange(aNumber)</div>
<div class='slotValue'>	Sets the tempo change amount.
</div>
</div>
<div class='slot'>
<div class='slotName'>start</div>
<div class='slotValue'>	Cleans up SoundTouch.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>TagLib</div>
<a name='TagLib.TagLib'></a>
<div class='class'>
<div class='className'>TagLib</div>
<div class='classDescription'>Used to set meta data tags on the following audio formats:
<pre>
ape
flac
mp3
mpc
mpeg
ogg
</pre>
Supports reading and writing the following attributes:
<pre>title
artist
album
year
track
genre 
</pre>
And reading the attributes:
<pre>
bitRate
sampleRate
channels
length
</pre>

Example use (load and modify a track genre):

<pre>
t := TagLib clone setPath("foo.mp3") load
writeln("genre = ", t genre)
t setGenre("ambient")
t save
</pre>
</div>
<div class='slot'>
<div class='slotName'>load</div>
<div class='slotValue'>	Loads tag data from the file specified in the path slot. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>path</div>
<div class='slotValue'>Returns the path to the file.
</div>
</div>
<div class='slot'>
<div class='slotName'>save</div>
<div class='slotValue'>	Saves the tag settings and returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPath(aSeq)</div>
<div class='slotValue'> Sets the path to the file.
</div>
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Bridges</div>
<div class='package'>
<div class='packageName'>ObjcBridge</div>
<a name='ObjcBridge.ObjcBridge'></a>
<div class='class'>
<div class='className'>ObjcBridge</div>
<div class='slot'>
<div class='slotName'>autoLookupClassNamesOn</div>
<div class='slotValue'>Removes the ObjC forward method from the Lobby. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>classNamed(aSeq)</div>
<div class='slotValue'> Returns a proxy to the ObjC class with the specified name or nil if no match is found.
</div>
</div>
<div class='slot'>
<div class='slotName'>debug</div>
<div class='slotValue'>On Turns debugging off. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>main</div>
<div class='slotValue'>Calls NSApplicationMain().
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Python</div>
<a name='Python.Python'></a>
<div class='class'>
<div class='className'>Python</div>
<div class='classDescription'>This object provides access the world of python.
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Compilers</div>
<div class='package'>
<div class='packageName'>Loki</div>
<a name='Loki.Linker'></a>
<div class='class'>
<div class='className'>Linker</div>
<div class='classDescription'>	An object that enables low level introspection into a running Io VM.
</div>
<div class='slot'>
<div class='slotName'>bytesToHexSeq(aSeq)</div>
<div class='slotValue'>Returns a Sequence containing a hex representation of aSeq.
</div>
</div>
<div class='slot'>
<div class='slotName'>hexSeqToBytes(aSeq)</div>
<div class='slotValue'>Returns a Sequence containing a binary representation of the hex data in aSeq.
</div>
</div>
<div class='slot'>
<div class='slotName'>makeCFunction(aSeq, slotName, object)</div>
<div class='slotValue'>Creates a CFunction which users the beginning address of the data in aSeq as its function pointer and 
adds the CFunction to the given object on slot slotName.
</div>
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Compression</div>
<div class='package'>
<div class='packageName'>LZO</div>
<a name='LZO.LZO'></a>
<div class='class'>
<div class='className'>LZO</div>
<div class='classDescription'>The LZO object can be used to compress and uncompress data using the 
<a href=http://en.wikipedia.org/wiki/Lempel-Ziv-Oberhumer> Lempel-Ziv-Oberhumer (LZO)</a> 
lossless data compression algorithm.
<p>
Example use;
<pre>
compressedData := LZO compress(uncompressedData)
uncompressedData := LZO uncompress(compressedData)
</pre>
</div>
<div class='slot'>
<div class='slotName'>compress(aSeq)</div>
<div class='slotValue'> Returns a compressed version of aSeq.
</div>
</div>
<div class='slot'>
<div class='slotName'>uncompress(aSeq)</div>
<div class='slotValue'> Returns a uncompressed version of aSeq.
</div>
</div>
</div>
<a name='LZO.LZODecoder'></a>
<div class='class'>
<div class='className'>LZODecoder</div>
<div class='classDescription'>The LZO object can be used to  uncompress data using the 
<a href=http://en.wikipedia.org/wiki/Lempel-Ziv-Oberhumer> Lempel-Ziv-Oberhumer (LZO)</a> 
lossless data compression algorithm.
<p>
Example use;
<pre>	
z = LZODecoder clone
z beginProcessing
z inputBuffer appendSeq("this is a message")
z process
z endProcess
result := z outputBuffer 
</pre>
</div>
<div class='slot'>
<div class='slotName'>beginProcessing</div>
<div class='slotValue'>	Initializes the algorithm.
</div>
</div>
<div class='slot'>
<div class='slotName'>endProcessing</div>
<div class='slotValue'>	Finish processing remaining bytes of inputBuffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>process</div>
<div class='slotValue'>	Process the inputBuffer and appends the result to the outputBuffer.
	The processed inputBuffer is emptied except for the spare bytes at 
	the end which don't fit into a cipher block.
</div>
</div>
</div>
<a name='LZO.LZOEncoder'></a>
<div class='class'>
<div class='className'>LZOEncoder</div>
<div class='classDescription'>The LZOEncoder object can be used to compress  data using the 
<a href=http://en.wikipedia.org/wiki/Lempel-Ziv-Oberhumer> Lempel-Ziv-Oberhumer (LZO)</a> 
lossless data compression algorithm.
<p>
Example use;
<pre>	
z = LZOEncoder clone
z beginProcessing
z inputBuffer appendSeq("this is a message")
z process
z endProcess
result := z outputBuffer 
</pre>
</div>
<div class='slot'>
<div class='slotName'>beginProcessing</div>
<div class='slotValue'>	Initializes the algorithm.
</div>
</div>
<div class='slot'>
<div class='slotName'>endProcessing</div>
<div class='slotValue'>	Finish processing remaining bytes of inputBuffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>process</div>
<div class='slotValue'>	Process the inputBuffer and appends the result to the outputBuffer.
	The processed inputBuffer is emptied except for the spare bytes at 
	the end which don't fit into a cipher block.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Zlib</div>
<a name='Zlib.Zlib'></a>
<div class='class'>
<div class='className'>Zlib</div>
<div class='classDescription'>The Zlib object can be used to compress and uncompress data using the 
<a href=http://en.wikipedia.org/wiki/Zlib>zlib</a> 
lossless data compression algorithm.
<p>
Example use;
<pre>
compressedData := Zlib compress(uncompressedData)
uncompressedData := Zlib uncompress(compressedData)
</pre>
</div>
<div class='slot'>
<div class='slotName'>compress(aSeq)</div>
<div class='slotValue'> Returns a compressed version of aSeq.
</div>
</div>
<div class='slot'>
<div class='slotName'>uncompress(aSeq)</div>
<div class='slotValue'> Returns a uncompressed version of aSeq.
</div>
</div>
</div>
<a name='Zlib.ZlibDecoder'></a>
<div class='class'>
<div class='className'>ZlibDecoder</div>
<div class='classDescription'>For <a href=http://en.wikipedia.org/wiki/Zlib>Zlib</a> uncompression.
Example use;
<pre>	
z = ZlibDecoder clone
z beginProcessing
z inputBuffer appendSeq(inputData)
z process
z endProcess
result := z outputBuffer 
</pre>
</div>
<div class='slot'>
<div class='slotName'>beginProcessing</div>
<div class='slotValue'>	Initializes the algorithm.
</div>
</div>
<div class='slot'>
<div class='slotName'>endProcessing</div>
<div class='slotValue'>	Finish processing remaining bytes of inputBuffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>inputBuffer</div>
<div class='slotValue'>The input buffer for decoding.
</div>
</div>
<div class='slot'>
<div class='slotName'>outputBuffer</div>
<div class='slotValue'>The output buffer for decoding.
</div>
</div>
<div class='slot'>
<div class='slotName'>process</div>
<div class='slotValue'>	Process the inputBuffer and appends the result to the outputBuffer.
	The processed inputBuffer is empties except for the spare bytes at the end which don't fit into a cipher block.
</div>
</div>
</div>
<a name='Zlib.ZlibEncoder'></a>
<div class='class'>
<div class='className'>ZlibEncoder</div>
<div class='classDescription'>For <a href=http://en.wikipedia.org/wiki/Zlib>Zlib</a> compression.
Example use:
<p>
<pre>	
z = ZlibEncoder clone
z beginProcessing
z inputBuffer appendSeq("this is a message")
z process
z endProcess
result := z outputBuffer
</pre>
</div>
<div class='slot'>
<div class='slotName'>beginProcessing</div>
<div class='slotValue'>	Initializes the algorithm.
</div>
</div>
<div class='slot'>
<div class='slotName'>endProcessing</div>
<div class='slotValue'>	Finish processing remaining bytes of inputBuffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>inputBuffer</div>
<div class='slotValue'>The input buffer for decoding.
</div>
</div>
<div class='slot'>
<div class='slotName'>outputBuffer</div>
<div class='slotValue'>The output buffer for decoding.
</div>
</div>
<div class='slot'>
<div class='slotName'>process</div>
<div class='slotValue'>	Process the inputBuffer and appends the result to the outputBuffer.
	The processed inputBuffer is empties except for the spare bytes at 
	the end which don't fit into a cipher block.
</div>
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Concurrency</div>
<div class='package'>
<div class='packageName'>Thread</div>
<a name='Thread.Thread'></a>
<div class='class'>
<div class='className'>Thread</div>
<div class='classDescription'>	For native threads.
Example use;
<pre>	
Thread createThread("1+1") // evals 1+1 in a new thread and an independent Io VM
</pre>
</div>
<div class='slot'>
<div class='slotName'>createThread(aSequence)</div>
<div class='slotValue'>	Creates a new IoState and evals aSequence in it using a new OS thread. Returns self immediately.
</div>
</div>
<div class='slot'>
<div class='slotName'>endCurrentThread</div>
<div class='slotValue'>	Ends the currently running OS thread.
</div>
</div>
<div class='slot'>
<div class='slotName'>threadCount</div>
<div class='slotValue'>	Returns the number of OS threads currently running in the process.
</div>
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Core</div>
<div class='package'>
<div class='packageName'>Core</div>
<a name='Core.Block'></a>
<div class='class'>
<div class='className'>Block</div>
<div class='classDescription'>Blocks are anonymous functions (messages with their own locals object). 
They are typically used to represent object methods.
</div>
<div class='slot'>
<div class='slotName'>Formatter</div>
<div class='slotValue'>Helper object for the <tt>asString</tt> method.
</div>
</div>
<div class='slot'>
<div class='slotName'>argumentNames</div>
<div class='slotValue'>	Returns a List of strings containing the argument names of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>asSimpleString</div>
<div class='slotValue'>Returns a short description of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>asString</div>
<div class='slotValue'>Returns a full description of the receiver with decompiled code.
</div>
</div>
<div class='slot'>
<div class='slotName'>call(arg0, arg1, ...)</div>
<div class='slotValue'>	Activates the receiver with the provided arguments.
</div>
</div>
<div class='slot'>
<div class='slotName'>code</div>
<div class='slotValue'>	Returns a string containing the decompiled code of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>justSerialized(stream)</div>
<div class='slotValue'> Writes the receiver's code into the stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>message</div>
<div class='slotValue'>	Returns the root message of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>passStops</div>
<div class='slotValue'>	Returns whether or not the receiver passes return/continue/break to caller.
</div>
</div>
<div class='slot'>
<div class='slotName'>performOn(anObject, optionalLocals, optionalMessage, optionalSlotContext)</div>
<div class='slotValue'>	Activates the receiver in the target context of anObject.
	Returns the result.
</div>
</div>
<div class='slot'>
<div class='slotName'>print</div>
<div class='slotValue'>	prints an Io source code representation of the block/method
</div>
</div>
<div class='slot'>
<div class='slotName'>println</div>
<div class='slotValue'>Same as <tt>print</tt>.
</div>
</div>
<div class='slot'>
<div class='slotName'>profilerTime</div>
<div class='slotValue'>	Returns clock() time spent in compiler in seconds.
</div>
</div>
<div class='slot'>
<div class='slotName'>scope</div>
<div class='slotValue'>	Returns the scope used when the block is activated or
	Nil if the target of the message is the scope.
</div>
</div>
<div class='slot'>
<div class='slotName'>setArgumentNames(aListOfStrings)</div>
<div class='slotValue'>	Sets the receiver's argument names to those specified in
	aListOfStrings. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setCode(aString)</div>
<div class='slotValue'>	Set's the receiver's message to a compiled version of aString. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>setMessage(aMessage)</div>
<div class='slotValue'>	Sets the root message of the receiver to aMessage.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPassStops(aBool)</div>
<div class='slotValue'>	Sets whether the receiver passes return/continue/break to caller.
</div>
</div>
<div class='slot'>
<div class='slotName'>setProfilerOn(aBool)</div>
<div class='slotValue'>	If aBool is true, the global block profiler is enabled, if false it is disabled. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setScope(anObjectOrNil)</div>
<div class='slotValue'>	If argument is an object, when the block is activated,
	it will set the proto and self slots of its locals to the specified
	object. If Nil, it will set them to the target of the message.
</div>
</div>
</div>
<a name='Core.CFunction'></a>
<div class='class'>
<div class='className'>CFunction</div>
<div class='classDescription'>A container for a pointer to a C function binding. 
CFunction's can only be defined from the C side and act 
like blocks in that when placed in a slot, are called when the 
slot is activated. The for, if, while and clone methods of the Lobby 
are examples of CFunctions. CFunctions are useful for implementing 
methods that require the speed of C or binding to a C library.
</div>
<div class='slot'>
<div class='slotName'>==(anObject)</div>
<div class='slotValue'>	Returns self if the argument is a CFunction with the same internal C function pointer.
</div>
</div>
<div class='slot'>
<div class='slotName'>asSimpleString</div>
<div class='slotValue'>Returns the CFunction name.
</div>
</div>
<div class='slot'>
<div class='slotName'>asString</div>
<div class='slotValue'>Same as asSimpleString.
</div>
</div>
<div class='slot'>
<div class='slotName'>id</div>
<div class='slotValue'>	Returns a number containing a unique id for the receiver's internal C function.
</div>
</div>
<div class='slot'>
<div class='slotName'>name</div>
<div class='slotValue'>Returns the CFunction name in the form CFunction_Pointer.")
</div>
</div>
<div class='slot'>
<div class='slotName'>performOn(target, blockLocals, optionalMessage, optionalContext)</div>
<div class='slotValue'>	Activates the CFunctions with the supplied settings.
</div>
</div>
<div class='slot'>
<div class='slotName'>typeName</div>
<div class='slotValue'>	Returns the owning type of the CFunction or nil if the CFunction can be called on any object.
</div>
</div>
<div class='slot'>
<div class='slotName'>uniqueName</div>
<div class='slotValue'>	Returns the name given to the CFunction.
</div>
</div>
</div>
<a name='Core.Call'></a>
<div class='class'>
<div class='className'>Call</div>
<div class='classDescription'>Call stores slots related to activation.
</div>
<div class='slot'>
<div class='slotName'>activated</div>
<div class='slotValue'>	Returns the activated value.
</div>
</div>
<div class='slot'>
<div class='slotName'>argAt(argNumber)</div>
<div class='slotValue'>	Returns the message's argNumber arg. Shorthand for same as call message argAt(argNumber).
</div>
</div>
<div class='slot'>
<div class='slotName'>argCount</div>
<div class='slotValue'>Returns the number of arguments for the call. Shortcut for "call message argCount".
</div>
</div>
<div class='slot'>
<div class='slotName'>coroutine</div>
<div class='slotValue'>	Returns the coroutine in which the message was sent.
</div>
</div>
<div class='slot'>
<div class='slotName'>delegateTo(target, altSender)</div>
<div class='slotValue'>		Sends the call's message to target (and relays its stop status). 
		The sender is set to altSender, if it is supplied.
		Returns the result of the message.
</div>
</div>
<div class='slot'>
<div class='slotName'>delegateToMethod(target, methodName)</div>
<div class='slotValue'>		Sends the call's message to target via the method specified by methodName. 
		Returns the result of the message.
</div>
</div>
<div class='slot'>
<div class='slotName'>description</div>
<div class='slotValue'>Returns a description of the receiver as a String.
</div>
</div>
<div class='slot'>
<div class='slotName'>evalArgAt(argNumber)</div>
<div class='slotValue'>	Evaluates the specified argument of the Call's message in the context of it's sender.
</div>
</div>
<div class='slot'>
<div class='slotName'>evalArgs</div>
<div class='slotValue'>	Returns a list containing the call message arguments evaluated in the context of the sender.
</div>
</div>
<div class='slot'>
<div class='slotName'>hasArgs</div>
<div class='slotValue'>Returns true if the call was passed arguments.
</div>
</div>
<div class='slot'>
<div class='slotName'>message</div>
<div class='slotValue'>	Returns the message value.
</div>
</div>
<div class='slot'>
<div class='slotName'>relayStopStatus(arg)</div>
<div class='slotValue'>  Sets sender's stop status (Normal, Return, 
  Break, Continue etc.) and returns evaluated argument.
</div>
</div>
<div class='slot'>
<div class='slotName'>resetStopStatus(arg)</div>
<div class='slotValue'>  Sets stop status to Normal.
  See also <tt>Call setStopStatus</tt>.
</div>
</div>
<div class='slot'>
<div class='slotName'>sender</div>
<div class='slotValue'>	Returns the sender value.
</div>
</div>
<div class='slot'>
<div class='slotName'>setStopStatus(aStatusObject)</div>
<div class='slotValue'>	Sets the stop status on the call.
</div>
</div>
<div class='slot'>
<div class='slotName'>slotContext</div>
<div class='slotValue'>	Returns the slotContext value.
</div>
</div>
<div class='slot'>
<div class='slotName'>stopStatus</div>
<div class='slotValue'>	Returns the stop status on the call. (description of stopStatus will 
	be added once we decide whether or not to keep it)
</div>
</div>
<div class='slot'>
<div class='slotName'>target</div>
<div class='slotValue'>	Returns the target value.
</div>
</div>
</div>
<a name='Core.Collector'></a>
<div class='class'>
<div class='className'>Collector</div>
<div class='classDescription'>A singleton containing methods related to Io's garbage collector. 
Io currently uses a incremental, non-moving, generational 
collector based on the tri-color (black/gray/white) 
algorithm with a write-barrier.
<p>
Every N number of object allocs, the collector will walk 
some of the objects marked as gray, marking their connected 
white objects as gray and turning themselves black. 
Every M allocs, it will pause for a sweep where it makes sure 
all grays are marked black and io_frees all whites.
<p>
If the sweepsPerGeneration is set to zero, it will immediately mark 
all blacks as white again and mark the root objects as gray. Otherwise, 
it will wait until the sweepsPerGeneration count is reached to do this. 
By adjusting the allocsPerSweep and sweepsPerGeneration appropriately, the 
collector can be tuned efficiently for various usage cases. 

Generally, the more objects in your heap, the larger you'll want this number.
</div>
<div class='slot'>
<div class='slotName'>allObjects</div>
<div class='slotValue'>	Returns a List containing all objects known to the collector.
</div>
</div>
<div class='slot'>
<div class='slotName'>allocatedStep</div>
<div class='slotValue'>	Return the allocation step value as a Number.
</div>
</div>
<div class='slot'>
<div class='slotName'>cleanAllObjects</div>
<div class='slotValue'>	Sets all objects as clean. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>collect</div>
<div class='slotValue'>	Runs garbage collector. Returns the number of items collected.
</div>
</div>
<div class='slot'>
<div class='slotName'>dirtyObjects</div>
<div class='slotValue'>	Returns a List containing all dirty objects known to the collector.
</div>
</div>
<div class='slot'>
<div class='slotName'>marksPerAlloc</div>
<div class='slotValue'>	Return the number of allocations per collector mark pass.
</div>
</div>
<div class='slot'>
<div class='slotName'>maxAllocatedBytes</div>
<div class='slotValue'>	Returns the maximum number of bytes allocated by the collector.
</div>
</div>
<div class='slot'>
<div class='slotName'>objectWithUniqueId(aNumber)</div>
<div class='slotValue'>	Returns an object whose uniqueId is aNumber or nil if no match is found. 
	Warning: This lookup currently scans all objects, so it is not efficient, 
	though it should handle thousands of lookups per second.
</div>
</div>
<div class='slot'>
<div class='slotName'>resetMaxAllocatedBytes</div>
<div class='slotValue'>	Resets maximum number of bytes allocated by the collector. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setAllocatedStep(aNumber)</div>
<div class='slotValue'>	Sets the allocatedStep (can have a fractional component, 
	but must be larger than 1). A collector sweep is forced when the 
	number of allocated objects exceeds the allocatedSweepLevel. 
	After a sweep, the allocatedSweepLevel is set to the allocated 
	object count times the allocatedStep. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setDebug(aBool)</div>
<div class='slotValue'>	Turns on/off printing of collector debugging messages. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setMarksPerAlloc(aNumber)</div>
<div class='slotValue'>	Sets the number of incremental collector marks per object 
	allocation (can be fractional). Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>showStats</div>
<div class='slotValue'>	Prints the collector's stats to standard output.
</div>
</div>
<div class='slot'>
<div class='slotName'>timeUsed</div>
<div class='slotValue'>	Return the time used so far by the collector in seconds.
</div>
</div>
</div>
<a name='Core.Compiler'></a>
<div class='class'>
<div class='className'>Compiler</div>
<div class='classDescription'>Contains methods related to the compiling code.
</div>
<div class='slot'>
<div class='slotName'>messageForString(aString, optionalLabelString)</div>
<div class='slotValue'>	Returns the compiled message object for aString.
</div>
</div>
<div class='slot'>
<div class='slotName'>messageForString2(aString)</div>
<div class='slotValue'>	Returns the compiled message object for aString. (Runs raw string against lexer directly.)
</div>
</div>
<div class='slot'>
<div class='slotName'>messageForTokens(aList)</div>
<div class='slotValue'>	Returns the compiled message object for the given token list.
</div>
</div>
<div class='slot'>
<div class='slotName'>tokensForString(aString)</div>
<div class='slotValue'>	Returns a list of token objects lexed from the input string.
</div>
</div>
</div>
<a name='Core.Coroutine'></a>
<div class='class'>
<div class='className'>Coroutine</div>
<div class='classDescription'>Coroutine is an primitive for Io's lightweight cooperative C-stack based threads.
</div>
<div class='slot'>
<div class='slotName'>backTraceString</div>
<div class='slotValue'>Returns a formatted callStack output along with exception info (if any). In case of CGI script, wraps output with &lt;code&gt; tag.
</div>
</div>
<div class='slot'>
<div class='slotName'>callStack</div>
<div class='slotValue'>Returns a list of Call objects.
</div>
</div>
<div class='slot'>
<div class='slotName'>currentCoroutine</div>
<div class='slotValue'>	Returns currently running coroutine in Io state.
</div>
</div>
<div class='slot'>
<div class='slotName'>debugWriteln</div>
<div class='slotValue'>See <tt>Object debugWriteln</tt>.
</div>
</div>
<div class='slot'>
<div class='slotName'>exception</div>
<div class='slotValue'>Returns the current exception or nil if there is none.
</div>
</div>
<div class='slot'>
<div class='slotName'>freeStack</div>
<div class='slotValue'>	Frees all the internal data from the receiver's stack. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>ignoredCoroutineMethodNames</div>
<div class='slotValue'>List of methods to ignore when building a <tt>callStack</tt>.
</div>
</div>
<div class='slot'>
<div class='slotName'>implementation</div>
<div class='slotValue'>	Returns coroutine implementation type: "fibers", "ucontext" or "setjmp"
</div>
</div>
<div class='slot'>
<div class='slotName'>inException</div>
<div class='slotValue'>Set to true when processing an exception in the coroutine.
</div>
</div>
<div class='slot'>
<div class='slotName'>ioStack</div>
<div class='slotValue'>	Returns List of values on this coroutine's stack.
</div>
</div>
<div class='slot'>
<div class='slotName'>isCurrent</div>
<div class='slotValue'>	Returns true if the receiver is currently running coroutine.
</div>
</div>
<div class='slot'>
<div class='slotName'>isYielding</div>
<div class='slotValue'>Returns true if the receiver is yielding (not paused or running).
</div>
</div>
<div class='slot'>
<div class='slotName'>label</div>
<div class='slotValue'>A label slot useful for debugging purposes.
</div>
</div>
<div class='slot'>
<div class='slotName'>main</div>
<div class='slotValue'>[Seems to be obsolete!] Executes runMessage, resumes parent coroutine.
</div>
</div>
<div class='slot'>
<div class='slotName'>parentCoroutine</div>
<div class='slotValue'>Returns the parent coroutine this one was chained from or nil if it wasn't chained. When a Coroutine ends, it will attempt to resume its parent.
</div>
</div>
<div class='slot'>
<div class='slotName'>pause</div>
<div class='slotValue'>		Removes current coroutine from the yieldingCoros queue and
		yields to another coro. <tt>System exit</tt> is executed if no coros left.
		<br/>
		You can resume a coroutine using either <tt>resume</tt> or <tt>resumeLater</tt> message.
</div>
</div>
<div class='slot'>
<div class='slotName'>pauseCurrentAndResumeSelf</div>
<div class='slotValue'>Pauses current coroutine and yields to a receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>raiseException</div>
<div class='slotValue'>Sets exception in the receiver and resumes parent coroutine.
</div>
</div>
<div class='slot'>
<div class='slotName'>result</div>
<div class='slotValue'>The result set when the coroutine ends.
</div>
</div>
<div class='slot'>
<div class='slotName'>resume</div>
<div class='slotValue'>	Yields to the receiver. Runs the receiver if it is not running yet. 
	Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>resumeLater</div>
<div class='slotValue'>		Promotes receiver to the top of the yieldingCoros queue, but not yielding to it.
		When current coroutine yields, receiver will resume.
</div>
</div>
<div class='slot'>
<div class='slotName'>resumeParentCoroutine</div>
<div class='slotValue'>Pauses current coroutine and resumes parent.
</div>
</div>
<div class='slot'>
<div class='slotName'>run</div>
<div class='slotValue'>	Runs receiver and returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>runLocals</div>
<div class='slotValue'>The locals object in whose context the coroutine will send its run message.
</div>
</div>
<div class='slot'>
<div class='slotName'>runMessage</div>
<div class='slotValue'>The message to send to the runTarget when the coroutine starts.
</div>
</div>
<div class='slot'>
<div class='slotName'>runTarget</div>
<div class='slotValue'>The object which the coroutine will send a message to when it starts.
</div>
</div>
<div class='slot'>
<div class='slotName'>setException</div>
<div class='slotValue'></div>
</div>
<div class='slot'>
<div class='slotName'>setInException(aBool)</div>
<div class='slotValue'> Set the inException status. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setLabel(aLabel)</div>
<div class='slotValue'> Sets the comment label for the Coro. Return self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setMessageDebugging(aBoolean)</div>
<div class='slotValue'>	Turns on message level debugging for this coro. When on, this
	coro will send a vmWillSendMessage message to the Debugger object before
	each message send and pause itself. See the Debugger object documentation
	for more information.
</div>
</div>
<div class='slot'>
<div class='slotName'>setParentCoroutine(aCoro)</div>
<div class='slotValue'> Sets the parent coroutine. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setResult</div>
<div class='slotValue'></div>
</div>
<div class='slot'>
<div class='slotName'>setRunLocals</div>
<div class='slotValue'></div>
</div>
<div class='slot'>
<div class='slotName'>setRunMessage</div>
<div class='slotValue'></div>
</div>
<div class='slot'>
<div class='slotName'>setRunTarget(anObject)</div>
<div class='slotValue'></div>
</div>
<div class='slot'>
<div class='slotName'>setStackSize(aNumber)</div>
<div class='slotValue'> Sets the stack size in bytes to allocate for new Coros. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>showStack</div>
<div class='slotValue'>Writes backTraceString to STDOUT.
</div>
</div>
<div class='slot'>
<div class='slotName'>showYielding</div>
<div class='slotValue'>Prints a list of yielding coroutines to STDOUT.
</div>
</div>
<div class='slot'>
<div class='slotName'>stackSize</div>
<div class='slotValue'>Stack size allocated for each new coroutine. Coroutines will automatically chain themselves as need if more stack space is required.
</div>
</div>
<div class='slot'>
<div class='slotName'>typeId</div>
<div class='slotValue'>Returns <type>_<uniqueHexId> string.
</div>
</div>
<div class='slot'>
<div class='slotName'>yield</div>
<div class='slotValue'>		Yields to another coroutine in the yieldingCoros queue.
		Does nothing if yieldingCoros is empty.
</div>
</div>
<div class='slot'>
<div class='slotName'>yieldCurrentAndResumeSelf</div>
<div class='slotValue'>Yields to a receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>yieldingCoros</div>
<div class='slotValue'>Reference to Scheduler yieldingCoros.
</div>
</div>
</div>
<a name='Core.Date'></a>
<div class='class'>
<div class='className'>Date</div>
<div class='slot'>
<div class='slotName'>+(aDuration)</div>
<div class='slotValue'>	Return a new Date with the receiver's value plus an amount 
	of time specified by aDuration object to the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>+=(aDuration)</div>
<div class='slotValue'>	Add aDuration to the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>-(aDurationOrDate)</div>
<div class='slotValue'>	Return a new Date with the receiver's value minus an amount of time specified by aDuration to the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>-=(aDuration)</div>
<div class='slotValue'>	Subtract aDuration from the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>asAtomDate</div>
<div class='slotValue'>Returns the date formatted as a valid atom date (rfc4287) in the system's timezone.
</div>
</div>
<div class='slot'>
<div class='slotName'>asNumber</div>
<div class='slotValue'>	Returns the date as seconds since 1970 UTC.
</div>
</div>
<div class='slot'>
<div class='slotName'>asSerialization</div>
<div class='slotValue'>	Returns a serialization (sequence) of the date that allows for perfect reconstruction of the timestamp.
</div>
</div>
<div class='slot'>
<div class='slotName'>asString(optionalFormatString)</div>
<div class='slotValue'>	Returns a string representation of the receiver using the
receivers format. If the optionalFormatString argument is present, the
receiver's format is set to it first. Formatting is according to ANSI C
date formatting rules.
<p>
<pre>	
%a abbreviated weekday name (Sun, Mon, etc.)
%A full weekday name (Sunday, Monday, etc.)
%b abbreviated month name (Jan, Feb, etc.)
%B full month name (January, February, etc.)
%c full date and time string
%d day of the month as two-digit decimal integer (01-31)
%H hour as two-digit 24-hour clock decimal integer (00-23)
%I hour as two-digit 12-hour clock decimal integer (01-12)
%m month as a two-digit decimal integer (01-12)
%M minute as a two-digit decimal integer (00-59)
%p either "AM" or "PM"
%S second as a two-digit decimal integer (00-59)
%U number of week in the year as two-digit decimal integer (00-52)
with Sunday considered as first day of the week
%w weekday as one-digit decimal integer (0-6) with Sunday as 0
%W number of week in the year as two-digit decimal integer (00-52)
with Monday considered as first day of the week
%x full date string (no time); in the C locale, this is equivalent
to "%m/%d/%y".
%y year without century as two-digit decimal number (00-99)
%Y year with century as four-digit decimal number
%Z time zone name (e.g. EST);
null string if no time zone can be obtained
%% stands for '%' character in output string.
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>asUTC</div>
<div class='slotValue'>	Changes the timezone of this date to utc
</div>
</div>
<div class='slot'>
<div class='slotName'>clock</div>
<div class='slotValue'>	Returns a number containing the number of seconds
	of processor time since the beginning of the program or -1 if unavailable.
</div>
</div>
<div class='slot'>
<div class='slotName'>convertToLocal</div>
<div class='slotValue'>	Converts self date from a UTC date to the equivalent local date
</div>
</div>
<div class='slot'>
<div class='slotName'>convertToUTC</div>
<div class='slotValue'>	Converts self from a local date to the equivalent UTC date
</div>
</div>
<div class='slot'>
<div class='slotName'>convertToZone(offset, isDST)</div>
<div class='slotValue'>	Converts self to an equivalent data in a zone with offset (minutes west) and DST (true, false).
</div>
</div>
<div class='slot'>
<div class='slotName'>copy(aDate)</div>
<div class='slotValue'>	Sets the receiver to be the same date as aDate. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>cpuSecondsToRun(expression)</div>
<div class='slotValue'>	Evaluates message and returns a Number whose value 
	is the cpu seconds taken to do the evaluation.
</div>
</div>
<div class='slot'>
<div class='slotName'>day</div>
<div class='slotValue'>	Returns a number containing the day of the month of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>format</div>
<div class='slotValue'>	Returns the format string for the receiver. The default is "%Y-%m-%d %H:%M:%S %Z".
</div>
</div>
<div class='slot'>
<div class='slotName'>fromNumber(aNumber)</div>
<div class='slotValue'>	Sets the receiver to be aNumber seconds since 1970.
</div>
</div>
<div class='slot'>
<div class='slotName'>fromSerialization</div>
<div class='slotValue'>	Sets the date based on the serialization sequence.  Return self.
</div>
</div>
<div class='slot'>
<div class='slotName'>fromString(aString, formatString)</div>
<div class='slotValue'>	Sets the receiver to the date specified by aString as parsed according to the given formatString. See the Date asString method for formatting rules. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>gmtOffset</div>
<div class='slotValue'>	Returns the system's timezone string. E.g., +1300 or -0500.
</div>
</div>
<div class='slot'>
<div class='slotName'>gmtOffsetSeconds</div>
<div class='slotValue'>	Returns the system's seconds east of UTC.
</div>
</div>
<div class='slot'>
<div class='slotName'>hour</div>
<div class='slotValue'>	Returns a number containing the hour of the day(0-23) of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>isDST</div>
<div class='slotValue'>	Returns true if the Date is set to use DST.  Posix only.
</div>
</div>
<div class='slot'>
<div class='slotName'>isDaylightSavingsTime</div>
<div class='slotValue'>	Returns self if Daylight Saving Time is in effect for the receiver, otherwise returns Nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>isPast</div>
<div class='slotValue'>	Returns true if the receiver is a date in the past.
</div>
</div>
<div class='slot'>
<div class='slotName'>isToday</div>
<div class='slotValue'>Returns true if the receiver's date is today's date.
</div>
</div>
<div class='slot'>
<div class='slotName'>isValidTime(hour, min, sec)</div>
<div class='slotValue'>	Returns self if the specified time is valid, otherwise returns Nil. 
	A negative value will count back; i.e., a value of -5 for the hour, 
	will count back 5 hours to return a value of 19. No adjustment is 
	done for values above 24.
</div>
</div>
<div class='slot'>
<div class='slotName'>minute</div>
<div class='slotValue'>	Returns a number containing the minute of the hour(0-59) of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>month</div>
<div class='slotValue'>	Returns a number containing the month(1-12) of the year of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>now</div>
<div class='slotValue'>	Sets the receiver to the current time. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>print</div>
<div class='slotValue'>	Prints the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>second</div>
<div class='slotValue'>	Returns a number containing the seconds of the minute(0-59) of the receiver. This number may contain fractions of seconds.
</div>
</div>
<div class='slot'>
<div class='slotName'>secondsSince(aDate)</div>
<div class='slotValue'>	Returns a number of seconds of between aDate and the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>secondsSinceNow(aDate)</div>
<div class='slotValue'>	Returns the number of seconds since aDate.
</div>
</div>
<div class='slot'>
<div class='slotName'>secondsToRun(expression)</div>
<div class='slotValue'> Evaluates message and returns a Number whose value is the number of seconds taken to do the evaluation
</div>
</div>
<div class='slot'>
<div class='slotName'>setDay(aNumber)</div>
<div class='slotValue'>	Sets the day of the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setGmtOffset</div>
<div class='slotValue'>	Set the number of minutes west of GMT for this Date's zone
</div>
</div>
<div class='slot'>
<div class='slotName'>setHour(aNumber)</div>
<div class='slotValue'>	Sets the hour of the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setMinute(aNumber)</div>
<div class='slotValue'>	Sets the minute of the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setMonth(aNumber)</div>
<div class='slotValue'>	Sets the month(1-12) of the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSecond(aNumber)</div>
<div class='slotValue'>	Sets the second of the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setYear(aNumber)</div>
<div class='slotValue'>	Sets the year of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>today</div>
<div class='slotValue'>	Set the receiver to the current date, no time information
	is included. See `now' for the current date and time.
</div>
</div>
<div class='slot'>
<div class='slotName'>year</div>
<div class='slotValue'>	Returns a number containing the year of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>zone</div>
<div class='slotValue'>	Returns a string containing the system's time zone code.
</div>
</div>
</div>
<a name='Core.Debugger'></a>
<div class='class'>
<div class='className'>Debugger</div>
<div class='classDescription'>Contains methods related to the IoVM debugger.
</div>
<div class='slot'>
<div class='slotName'>debuggerCoroutine</div>
<div class='slotValue'>Returns the coroutine used for the debugger.
</div>
</div>
<div class='slot'>
<div class='slotName'>description</div>
<div class='slotValue'>	To start debugging a coroutine, call
	<code>
	Coroutine currentCoroutine setMessageDebugging(true)
	</code>
	Then each message sent within that coroutine will cause the Debugger 
	vmWillSendMessage slot to be activated and the Debugger slots: 
	messageCoroutine, messageSelf, messageLocals, and message will be set with the 
	values related to the current message send. You can override vmWillSendMessage to 
	implement your own debugging mechanisms.
</div>
</div>
<div class='slot'>
<div class='slotName'>start</div>
<div class='slotValue'>Starts the debugger.
</div>
</div>
<div class='slot'>
<div class='slotName'>vmWillSendMessage</div>
<div class='slotValue'>Override this method to implement your own debugging mechanisms. Default behavior is to print every message sent.
</div>
</div>
</div>
<a name='Core.Directory'></a>
<div class='class'>
<div class='className'>Directory</div>
<div class='classDescription'>The Directory object supports accessing filesystem directories. A note on paths;
if a path begins with a "/" it's the root,
if it beings with a "./" it's the launch path,
if not specified, "./" is assumed.""")
</div>
<div class='slot'>
<div class='slotName'>accessibleAncestors</div>
<div class='slotValue'>Returns a list of accessizble ancestor directories.
</div>
</div>
<div class='slot'>
<div class='slotName'>accessibleParents</div>
<div class='slotValue'>Deprecated. Replaced by accessibleAncestors.
</div>
</div>
<div class='slot'>
<div class='slotName'>ancestorDirectories</div>
<div class='slotValue'>Returns a list of ancestor directories.
</div>
</div>
<div class='slot'>
<div class='slotName'>at(aString)</div>
<div class='slotValue'>	Returns a File or Directory object matching the name specified
	by aString or Nil if no such file or directory exists.
</div>
</div>
<div class='slot'>
<div class='slotName'>create</div>
<div class='slotValue'>	Create the directory if it doesn't exist. 
	Returns self on success (or if the directory already exists), nil on failure.
</div>
</div>
<div class='slot'>
<div class='slotName'>createFileNamed(name)</div>
<div class='slotValue'> Deprecated. Returns a new file object in the directory with the specified name.
</div>
</div>
<div class='slot'>
<div class='slotName'>createIfAbsent</div>
<div class='slotValue'>Creates the directory (and any missing ancestor directories) if they don't exist. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>createSubdirectory(name)</div>
<div class='slotValue'>	Create a subdirectory with the specified name.
</div>
</div>
<div class='slot'>
<div class='slotName'>currentWorkingDirectory</div>
<div class='slotValue'>	Returns the current working directory path.
</div>
</div>
<div class='slot'>
<div class='slotName'>directories</div>
<div class='slotValue'>Returns a list of subdirectories in the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>directoryNamed(aName)</div>
<div class='slotValue'> Returns a Directory object for the specified file name whether or not it exists.
</div>
</div>
<div class='slot'>
<div class='slotName'>exists(optionalPath)</div>
<div class='slotValue'>	Returns true if the Directory path exists, and false otherwise.
	If optionalPath string is provided, it tests the existence of that path instead.
</div>
</div>
<div class='slot'>
<div class='slotName'>fileNamed(aName)</div>
<div class='slotValue'> Returns a File object for the specified file name whether it exists or not.
</div>
</div>
<div class='slot'>
<div class='slotName'>fileNames</div>
<div class='slotValue'>Returns a list of strings for the names of the files (no subdirectories) in the directory.
</div>
</div>
<div class='slot'>
<div class='slotName'>files</div>
<div class='slotValue'>Returns a list of File objects for the files in the Directory (no directories).
</div>
</div>
<div class='slot'>
<div class='slotName'>filesWithExtension(aString)</div>
<div class='slotValue'> Returns a list of File objects for the files in the Directory (no directories) with the specified file extension.
</div>
</div>
<div class='slot'>
<div class='slotName'>folderNamed(aName)</div>
<div class='slotValue'> Deprecated. Replaced by directoryNamed().
</div>
</div>
<div class='slot'>
<div class='slotName'>folderNamedCreateIfAbsent(name)</div>
<div class='slotValue'> Deprecated. Returns a new Directory object in the directory with the specified name.
</div>
</div>
<div class='slot'>
<div class='slotName'>folders</div>
<div class='slotValue'>Deprecated. Replaced by directories().
</div>
</div>
<div class='slot'>
<div class='slotName'>isAccessible</div>
<div class='slotValue'>Returns true if the directory can be accessed, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>items</div>
<div class='slotValue'>	Returns a list object containing File and Directory objects
	for the files and directories of the receiver's path.
</div>
</div>
<div class='slot'>
<div class='slotName'>moveTo(aPath)</div>
<div class='slotValue'> Moves the directory to the specified path.
</div>
</div>
<div class='slot'>
<div class='slotName'>name</div>
<div class='slotValue'>	Returns the receiver's last path component.
</div>
</div>
<div class='slot'>
<div class='slotName'>parentDirectory</div>
<div class='slotValue'>Returns the parent directory object or nil if there is no parent directory.
</div>
</div>
<div class='slot'>
<div class='slotName'>parents</div>
<div class='slotValue'>Deprecated. Replaced by ancestorDirectories.
</div>
</div>
<div class='slot'>
<div class='slotName'>path</div>
<div class='slotValue'>	Returns the directory path. The default path is '.'.
</div>
</div>
<div class='slot'>
<div class='slotName'>recursiveFilesOfTypes(suffixes)</div>
<div class='slotValue'> Returns a list containing all files in the directory or any subdirectory that has any of the specified suffixes.
</div>
</div>
<div class='slot'>
<div class='slotName'>remove</div>
<div class='slotValue'>Removes the directory.
</div>
</div>
<div class='slot'>
<div class='slotName'>setCurrentWorkingDirectory(pathString)</div>
<div class='slotValue'>	Sets the current working directory path.
	Returns true on success or false on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPath(aString)</div>
<div class='slotValue'>	Sets the directory path. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>size</div>
<div class='slotValue'>	Returns a Number containing the number of file and directory
	objects at the receiver's path.
</div>
</div>
<div class='slot'>
<div class='slotName'>with(aPath)</div>
<div class='slotValue'> Returns a new instance with the provided path.
</div>
</div>
</div>
<a name='Core.DynLib'></a>
<div class='class'>
<div class='className'>DynLib</div>
<div class='classDescription'>A DLL Loader by Kentaro A. Kurahone.
</div>
<div class='slot'>
<div class='slotName'>call(functionName, <arg1>, <arg2>, ...)</div>
<div class='slotValue'>	Call's the dll function of the specified name with the arguments provided. 
	Returns the a Number with the result value.
</div>
</div>
<div class='slot'>
<div class='slotName'>callPluginInit(functionName)</div>
<div class='slotValue'>	Call's the dll function of the specified name. 
	Returns the result as a Number or raises an exception on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>	Closes the library. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>freeFuncName</div>
<div class='slotValue'>	Returns the io_free function name.
</div>
</div>
<div class='slot'>
<div class='slotName'>initFuncName</div>
<div class='slotValue'>	Returns the initialization function name.
</div>
</div>
<div class='slot'>
<div class='slotName'>isOpen</div>
<div class='slotValue'>	Returns true if the library is open, or false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>open</div>
<div class='slotValue'>	Opens the dynamic library and returns self or raises a DynLoad.open Error if there is an error.
</div>
</div>
<div class='slot'>
<div class='slotName'>path</div>
<div class='slotValue'>	Returns the path to the dynamic library.
</div>
</div>
<div class='slot'>
<div class='slotName'>setFreeFuncName(aString)</div>
<div class='slotValue'>	Sets the io_free function name. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setInitFuncName(aString)</div>
<div class='slotValue'>	Sets the initialization function name for the dynamic library. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPath(aString)</div>
<div class='slotValue'>	Sets the path to the dynamic library. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>voidCall(functionName, <arg1>, <arg2>, ...)</div>
<div class='slotValue'>	Same as call but for functions with no return value. Returns nil.
</div>
</div>
</div>
<a name='Core.Error'></a>
<div class='class'>
<div class='className'>Error</div>
<div class='classDescription'>An object that contains error information and flow control based on errors.
</div>
<div class='slot'>
<div class='slotName'>ifError(code)</div>
<div class='slotValue'>  Evaluates code in the context of sender. Returns self.
  <br/>
  Another form is <tt>Error ifError(error, code)</tt>. 
  Note: <tt>error</tt> slot is set in the context of sender, Locals object is not created!
</div>
</div>
<div class='slot'>
<div class='slotName'>isError</div>
<div class='slotValue'>Returns true.
</div>
</div>
<div class='slot'>
<div class='slotName'>raiseIfError</div>
<div class='slotValue'>Raises exception.
</div>
</div>
<div class='slot'>
<div class='slotName'>returnIfError</div>
<div class='slotValue'>Returns self from the context of sender.
</div>
</div>
<div class='slot'>
<div class='slotName'>with(message)</div>
<div class='slotValue'> Returns new error with message slot set.
</div>
</div>
</div>
<a name='Core.Exception'></a>
<div class='class'>
<div class='className'>Exception</div>
<div class='classDescription'>The Exception proto is used for raising exceptions and instances are used to hold rexception related info. 

<p><b>Raise</b><p>

An exception can be raised by calling raise() on an exception proto.
Exception raise("generic foo exception")

<p><b>Try and Catch</b><p>

To catch an exception, the try() method of the Object proto is used. try() will catch any exceptions that occur within it and return the caught exception or nil if no exception is caught.

<pre>
e := try(<doMessage>)
</pre>

To catch a particular exception, the Exception catch() method can be used. Example:

<pre>
e := try(
    // ...
) 

e catch(Exception,
    writeln(e coroutine backtraceString)
)
</pre>

The first argument to catch indicates which types of exceptions will be caught. catch() returns the exception if it doesn't match and nil if it does.

<p><b>Pass</b><p>

To re-raise an exception caught by try(), use the pass method. This is useful to pass the exception up to the next outer exception handler, usually after all catches failed to match the type of the current exception:
<pre>
e := try(
    // ...
) 

e catch(Error,
    // ...
) catch(Exception,
    // ...
) pass
</pre>

<p><b>Custom Exceptions</b><p>

Custom exception types can be implemented by simply cloning an existing Exception type:
<pre>
MyErrorType := Error clone
</pre>
</div>
<div class='slot'>
<div class='slotName'>catch(exceptionProto)</div>
<div class='slotValue'> Catch an exception with the specified exception prototype.
</div>
</div>
<div class='slot'>
<div class='slotName'>caughtMessage</div>
<div class='slotValue'>Returns the message object associated with the exception.
</div>
</div>
<div class='slot'>
<div class='slotName'>error</div>
<div class='slotValue'>Returns the coroutine that the exception occurred in.
</div>
</div>
<div class='slot'>
<div class='slotName'>nestedException</div>
<div class='slotValue'>Returns the nestedException if there is one.
</div>
</div>
<div class='slot'>
<div class='slotName'>originalCall</div>
<div class='slotValue'>Returns the call object associated with the exception.
</div>
</div>
<div class='slot'>
<div class='slotName'>pass</div>
<div class='slotValue'>Pass the exception up the stack.
</div>
</div>
<div class='slot'>
<div class='slotName'>raise(error, optionalNestedException)</div>
<div class='slotValue'> Raise an exception with the specified error message.
</div>
</div>
<div class='slot'>
<div class='slotName'>showStack</div>
<div class='slotValue'>Print the exception and related stack.
</div>
</div>
</div>
<a name='Core.File'></a>
<div class='class'>
<div class='className'>File</div>
<div class='classDescription'>Encapsulates file i/o. Here's an example of opening a file, 
and reversing its lines:
<pre>	
file = File clone openForUpdating("/tmp/test")
lines = file readLines reverse
file rewind
lines foreach(i, line, file write(line, "\n"))
file close
</pre>
</div>
<div class='slot'>
<div class='slotName'>appendToContents(aSeq)</div>
<div class='slotValue'> Appends to the contents of the file with aSeq. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>asBuffer</div>
<div class='slotValue'>	Opens the receiver in read only mode, reads the whole
	contents of the file into a buffer object, closes the file and returns the buffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>at(aNumber)</div>
<div class='slotValue'>	Returns a Number containing the byte at the specified
	byte index or Nil if the index is out of bounds.
</div>
</div>
<div class='slot'>
<div class='slotName'>atPut(positionNumber, byteNumber)</div>
<div class='slotValue'>	Writes the byte value of byteNumber to the file position
	positionNumber. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>baseName</div>
<div class='slotValue'>Returns File's name without an extension (returned Sequence consists of all characters up to final period ["."] character).
</div>
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>	Closes the receiver if open, otherwise does nothing. Returns self.

	When the file was opened via popen, sets either exitStatus or
	termSignal to the exit status on normal exit, or the signal causing
	abnormal termination.
</div>
</div>
<div class='slot'>
<div class='slotName'>containingDirectory</div>
<div class='slotValue'>Deprecated. See parentDirectory.
</div>
</div>
<div class='slot'>
<div class='slotName'>contents</div>
<div class='slotValue'>	Returns contents of the file as a mutable Sequence of bytes.
</div>
</div>
<div class='slot'>
<div class='slotName'>copyToPath(destinationPath)</div>
<div class='slotValue'> Copies the file to the specified path.
</div>
</div>
<div class='slot'>
<div class='slotName'>copyToPathWithoutYielding(destinationPath)</div>
<div class='slotValue'> Copies the file to the specified path without yielding.
</div>
</div>
<div class='slot'>
<div class='slotName'>create</div>
<div class='slotValue'>Creates an empty file at the file's path. Returns self on success, nil on failure.
</div>
</div>
<div class='slot'>
<div class='slotName'>descriptor</div>
<div class='slotValue'>	Returns the file's descriptor as a number.
</div>
</div>
<div class='slot'>
<div class='slotName'>exists(optionalPath)</div>
<div class='slotValue'>	Returns true if the file path exists, and false otherwise.
	If optionalPath string is provided, it tests the existance of that path instead.
</div>
</div>
<div class='slot'>
<div class='slotName'>exitStatus</div>
<div class='slotValue'>System's close status (after file close).
</div>
</div>
<div class='slot'>
<div class='slotName'>flush</div>
<div class='slotValue'>	Forces any buffered data to be written to disk. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>foreach(optionalIndex, value, message)</div>
<div class='slotValue'>	For each byte, set index to the index of the byte
and value to the number containing the byte value and execute aMessage.
Example usage:
<p>
<pre>	
aFile foreach(i, v, writeln("byte at ", i, " is ", v))
aFile foreach(v, writeln("byte ", v))
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>foreachLine(optionalLineNumber, line, message)</div>
<div class='slotValue'>	For each line, set index to the line number of the line
and line and execute aMessage.
Example usage:
<pre>	
aFile foreachLine(i, v, writeln("Line ", i, ": ", v))
aFile foreach(v, writeln("Line: ", v))
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>groupId</div>
<div class='slotValue'>	Returns a Number containing the group id associated with the file's path.
</div>
</div>
<div class='slot'>
<div class='slotName'>isAtEnd</div>
<div class='slotValue'>	Returns true if the file is at its end. Otherwise returns false.
</div>
</div>
<div class='slot'>
<div class='slotName'>isDirectory</div>
<div class='slotValue'>	Returns true if the receiver's path points to a directory, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isLink</div>
<div class='slotValue'>	Returns true if the receiver's path points to a link, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isOpen</div>
<div class='slotValue'>	Returns self if the file is open. Otherwise returns Nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>isPipe</div>
<div class='slotValue'>	Returns true if the receiver is a pipe, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isRegularFile</div>
<div class='slotValue'>	Returns true if the receiver's file descriptor is a regular file, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isSocket</div>
<div class='slotValue'>	Returns true if the receiver's file descriptor is a Socket, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isUserExecutable</div>
<div class='slotValue'>	Returns true if the receiver is user group executable, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>lastAccessDate</div>
<div class='slotValue'>	Returns a Date object containing the last date and
	time the file was accessed.
</div>
</div>
<div class='slot'>
<div class='slotName'>lastDataChangeDate</div>
<div class='slotValue'>	Returns a Date object containing the last date and
	time the file's contents were changed.
</div>
</div>
<div class='slot'>
<div class='slotName'>lastInfoChangeDate</div>
<div class='slotValue'>	Returns a Date object containing the last date and
	time the file's meta info was changed.
</div>
</div>
<div class='slot'>
<div class='slotName'>mode</div>
<div class='slotValue'>	Returns the open mode of the file(either read, update or append).
</div>
</div>
<div class='slot'>
<div class='slotName'>moveTo(pathString)</div>
<div class='slotValue'>	Moves the file specified by the receiver's path to the
	new path pathString. Raises an File doesNotExist exception if the
	file does not exist or a File nameConflict exception if the file
	nameString already exists.
</div>
</div>
<div class='slot'>
<div class='slotName'>name</div>
<div class='slotValue'>	Returns the last path component of the file path.
</div>
</div>
<div class='slot'>
<div class='slotName'>open(optionalPathString)</div>
<div class='slotValue'>	Opens the file. Creates one if it does not exist.
	If the optionalPathString argument is provided, the path is set to it before
	opening. Returns self or raises an File exception on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>openForAppending(optionalPathString)</div>
<div class='slotValue'>	Sets the file mode to append (writing to the end of the file)
	and calls open(optionalPathString).
</div>
</div>
<div class='slot'>
<div class='slotName'>openForReading(optionalPathString)</div>
<div class='slotValue'>	Sets the file mode to read (reading only) and calls open(optionalPathString).
</div>
</div>
<div class='slot'>
<div class='slotName'>openForUpdating(optionalPathString)</div>
<div class='slotValue'>	Sets the file mode to update (reading and writing) and calls
	open(optionalPathString). This will not delete the file if it already exists.
	Use the remove method first if you need to delete an existing file before opening a new one.
</div>
</div>
<div class='slot'>
<div class='slotName'>parentDirectory</div>
<div class='slotValue'>Returns a File for the directory that is the parent directory of this object's path.
</div>
</div>
<div class='slot'>
<div class='slotName'>path</div>
<div class='slotValue'>	Returns the file path of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>popen</div>
<div class='slotValue'>	Open the file as a pipe. Return self.

	Closing a popen'ed file sets exitStatus or termSignal
	to reflect the status or cause of the child processes' termination.
</div>
</div>
<div class='slot'>
<div class='slotName'>position</div>
<div class='slotValue'>	Returns the current file pointer byte position as a Number.
</div>
</div>
<div class='slot'>
<div class='slotName'>positionAtEnd</div>
<div class='slotValue'>	Sets the file position pointer to the end of the file.
</div>
</div>
<div class='slot'>
<div class='slotName'>protectionMode</div>
<div class='slotValue'>	Returns a Number containing the protection mode
	associated with the file's path.
</div>
</div>
<div class='slot'>
<div class='slotName'>readBufferOfLength(aNumber)</div>
<div class='slotValue'>	Reads a Buffer of the specified length and returns it.
	Returns Nil if the end of the file has been reached.
</div>
</div>
<div class='slot'>
<div class='slotName'>readLine</div>
<div class='slotValue'>	Reads the next line of the file and returns it as a
	string without the return character. Returns Nil if the 
	end of the file has been reached.
</div>
</div>
<div class='slot'>
<div class='slotName'>readLines</div>
<div class='slotValue'>	Returns list containing all lines in the file.
</div>
</div>
<div class='slot'>
<div class='slotName'>readStringOfLength(aNumber)</div>
<div class='slotValue'>	Reads a String of the specified length and returns it.
	Returns Nil if the end of the file has been reached.
</div>
</div>
<div class='slot'>
<div class='slotName'>readToBufferLength(aBuffer, aNumber)</div>
<div class='slotValue'>	Reads at most aNumber number of items and appends them to aBuffer.
	Returns number of items read.
</div>
</div>
<div class='slot'>
<div class='slotName'>readToEnd(chunkSize)</div>
<div class='slotValue'> Reads chunkSize bytes (4096 by default) at a time until end of file is reached.  Returns a sequence containing the bytes read from the file.
</div>
</div>
<div class='slot'>
<div class='slotName'>remove</div>
<div class='slotValue'>	Removes the file specified by the receiver's path.
	Raises an error if the file exists but is not removed. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>reopen(otherFile, mode)</div>
<div class='slotValue'>	Reopen's otherFile and redirects its stream to this file's path using mode.
	If mode is omitted, it is copied from otherFile.
	Returns self or raises a File exception on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>rewind</div>
<div class='slotValue'>	Sets the file position pointer to the beginning of the file.
</div>
</div>
<div class='slot'>
<div class='slotName'>setContents(aSeq)</div>
<div class='slotValue'> Replaces the contents for the file with aSeq. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPath(aString)</div>
<div class='slotValue'>	Sets the file path of the receiver to pathString.
	The default path is an empty string. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPosition(aNumber)</div>
<div class='slotValue'>	Sets the file position pointer to the byte specified by aNumber. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setStreamDestination(aBuffer)</div>
<div class='slotValue'> Set the buffer to be used for future stream operations.
</div>
</div>
<div class='slot'>
<div class='slotName'>size</div>
<div class='slotValue'>	Returns the file size in bytes.
</div>
</div>
<div class='slot'>
<div class='slotName'>standardError</div>
<div class='slotValue'>	Returns a new File whose stream is set to the standard error stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>standardInput</div>
<div class='slotValue'>	Returns a new File whose stream is set to the standard input stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>standardOutput</div>
<div class='slotValue'>	Returns a new File whose stream is set to the standard output stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>startStreaming</div>
<div class='slotValue'>Begin streamed read to stream destination set by setStreamDestination(aBuffer).
</div>
</div>
<div class='slot'>
<div class='slotName'>stat</div>
<div class='slotValue'>	Updates the receiver's meta info cache.
</div>
</div>
<div class='slot'>
<div class='slotName'>statSize</div>
<div class='slotValue'>	Returns the file's size in bytes as a Number.
</div>
</div>
<div class='slot'>
<div class='slotName'>streamDestination</div>
<div class='slotValue'>The buffer object to be used for future stream operations.
</div>
</div>
<div class='slot'>
<div class='slotName'>streamReadSize</div>
<div class='slotValue'>Size of stream buffer used for streaming operations
</div>
</div>
<div class='slot'>
<div class='slotName'>streamTo(aBuffer)</div>
<div class='slotValue'> Perform streamed reading to given buffer. The buffer will be appended with chunks of size streamReadSize until EOF. The final chunk may be less than streamReadSize.
</div>
</div>
<div class='slot'>
<div class='slotName'>streamToWithoutYielding(aBuffer)</div>
<div class='slotValue'> Perform streamed reading to given buffer without yielding between reads.
</div>
</div>
<div class='slot'>
<div class='slotName'>temporaryFile</div>
<div class='slotValue'>	Returns a new File object with an open temporary file. The file is
	automatically deleted when the returned File object is closed or garbage collected.
</div>
</div>
<div class='slot'>
<div class='slotName'>termSignal</div>
<div class='slotValue'>Pipe's terminating signal (after file close opened via popen).
</div>
</div>
<div class='slot'>
<div class='slotName'>thisSourceFile</div>
<div class='slotValue'>Returns a File representing the system file in which this Io code exists.
</div>
</div>
<div class='slot'>
<div class='slotName'>truncateToSize(numberOfBytes)</div>
<div class='slotValue'>	Trunctates the file's size to the numberOfBytes. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>userId</div>
<div class='slotValue'>	Returns a Number containing the user id associated with the file's path.
</div>
</div>
<div class='slot'>
<div class='slotName'>with(aPath)</div>
<div class='slotValue'> Returns a new instance with the provided path.
</div>
</div>
<div class='slot'>
<div class='slotName'>write(aSequence1, aSequence2, ...)</div>
<div class='slotValue'>	Writes the arguments to the receiver file. Returns self.
</div>
</div>
</div>
<a name='Core.List'></a>
<div class='class'>
<div class='className'>List</div>
<div class='classDescription'>A mutable array of values. The first index is 0.
</div>
<div class='slot'>
<div class='slotName'>anyOne</div>
<div class='slotValue'>Returns a random element of the receiver or nil if the receiver is empty.
</div>
</div>
<div class='slot'>
<div class='slotName'>append(anObject1, anObject2, ...)</div>
<div class='slotValue'>	Appends the arguments to the end of the list. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>appendIfAbsent(anObject)</div>
<div class='slotValue'>	Adds each value not already contained by the receiver, returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>appendSeq(aList1, aList2, ...)</div>
<div class='slotValue'>	Add the items in the lists to the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>asEncodedList</div>
<div class='slotValue'>	Returns a Sequence with an encoding of the list. 
	Nil, Number and Symbol objects are copied into the encoding, for other object
	types, referenceIdForObject(item) will be called to request a reference id for 
	the object.
	
	Also see: List fromEncodedList.
</div>
</div>
<div class='slot'>
<div class='slotName'>asJson</div>
<div class='slotValue'>Returns JSON encoded representation of a List.
</div>
</div>
<div class='slot'>
<div class='slotName'>asMap</div>
<div class='slotValue'>    The reverse of Map asList: converts a list of lists (key-value pairs) into
    a Map. The first item of each pair list must be a sequence. The second item
    is the value.
</div>
</div>
<div class='slot'>
<div class='slotName'>asMessage</div>
<div class='slotValue'>    Converts each element in the list to unnamed messages with their cached result
    set to the value of the element (without activating).Returns an unnamed message
    whose arguments map 1:1 with the elements (after being converted to messages themselves).
</div>
</div>
<div class='slot'>
<div class='slotName'>at(index)</div>
<div class='slotValue'>	Returns the value at index. Returns Nil if the index is out of bounds.
</div>
</div>
<div class='slot'>
<div class='slotName'>atInsert(index, anObject)</div>
<div class='slotValue'>	Inserts anObject at the index specified by index.
	Adds anObject if the index equals the current count of the receiver.
	Raises an exception if the index is out of bounds. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>atPut(index, anObject)</div>
<div class='slotValue'>	Replaces the existing value at index with anObject.
	Raises an exception if the index is out of bounds. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>average</div>
<div class='slotValue'>Returns the average of the items.
</div>
</div>
<div class='slot'>
<div class='slotName'>capacity</div>
<div class='slotValue'>	Returns the number of potential elements the receiver can hold before it needs to grow.
</div>
</div>
<div class='slot'>
<div class='slotName'>contains(anObject)</div>
<div class='slotValue'>	Returns true if the receiver contains anObject, otherwise returns false.
</div>
</div>
<div class='slot'>
<div class='slotName'>containsAll(list)</div>
<div class='slotValue'> Returns true the target contains all of the items in the argument list.
</div>
</div>
<div class='slot'>
<div class='slotName'>containsAny(list)</div>
<div class='slotValue'> Returns true the target contains any of the items in the argument list.
</div>
</div>
<div class='slot'>
<div class='slotName'>containsIdenticalTo(anObject)</div>
<div class='slotValue'>	Returns true if the receiver contains a value identical to anObject, otherwise returns false.
</div>
</div>
<div class='slot'>
<div class='slotName'>copy(v)</div>
<div class='slotValue'> Replaces self with <tt>v</tt> list items. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>cursor</div>
<div class='slotValue'>Returns a ListCursor for the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>detect(optionalIndex, value, message)</div>
<div class='slotValue'>	Returns the first value for which the message evaluates to a non-nil. Example:
<code>list(1, 2, 3, 4) detect(i, v, v > 2)
==> 3

list(1, 2, 3, 4) detect(v, v > 2)
==> 3</code>
</div>
</div>
<div class='slot'>
<div class='slotName'>difference(list)</div>
<div class='slotValue'> Returns a new list containing items from the target list which aren't in the argument list.
</div>
</div>
<div class='slot'>
<div class='slotName'>empty</div>
<div class='slotValue'>	Removes all items from the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>first(optionalSize)</div>
<div class='slotValue'>	Returns the first item or Nil if the list is empty.
	If optionalSize is provided, that number of the first items in the list are returned.
</div>
</div>
<div class='slot'>
<div class='slotName'>flatten</div>
<div class='slotValue'>	Creates a new list, with all contained lists flattened into the new list. For example:
<code>
list(1,2,list(3,4,list(5))) flatten
==> list(1, 2, 3, 4, 5)
</code>
</div>
</div>
<div class='slot'>
<div class='slotName'>foreach(optionalIndex, value, message)</div>
<div class='slotValue'>Loops over the list values setting the specified index and
value slots and executing the message. Returns the result of the last
execution of the message. Example:
<p>
<pre>
list(1, 2, 3) foreach(i, v, writeln(i, " = ", v))
list(1, 2, 3) foreach(v, writeln(v))</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>fromEncodedList(aSeq)</div>
<div class='slotValue'>	Returns a List with the decoded Nils, Symbols and Numbers from the input raw array. 
	For each object reference encounters, objectForReferenceId(id) will be called to 
	allow the reference to be resolved. 
	
	Also see: List asEncodedList.
</div>
</div>
<div class='slot'>
<div class='slotName'>indexOf(anObject)</div>
<div class='slotValue'>	Returns the index of the first occurrence of anObject
	in the receiver. Returns Nil if the receiver doesn't contain anObject.
</div>
</div>
<div class='slot'>
<div class='slotName'>insertAfter(item, afterItem)</div>
<div class='slotValue'>	Inserts item after first occurance of afterItem and returns self.
	If afterItem is not found, item is appended to the end of the list.
</div>
</div>
<div class='slot'>
<div class='slotName'>insertAt(item, index)</div>
<div class='slotValue'> Inserts item at the specified index. Raises an exception if the index is out of bounds. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>insertBefore(item, beforeItem)</div>
<div class='slotValue'> Inserts item before first occurance of beforeItem or to the end of the list if beforeItem is not found. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>intersect(list)</div>
<div class='slotValue'> Returns a new list containing the common values from the target and argument lists.
</div>
</div>
<div class='slot'>
<div class='slotName'>itemCopy</div>
<div class='slotValue'>Returns a new list containing the items from the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>join(optionalSeparator)</div>
<div class='slotValue'>		Returns a Sequence of the concatenated items with
		optionalSeparator between each item or simply the concatenation of the items if no optionalSeparator is supplied.
</div>
</div>
<div class='slot'>
<div class='slotName'>join(optionalSeperator)</div>
<div class='slotValue'>	Returns a String with the elements of the receiver concatenated into one String. 
	If optionalSeperator is provided, it is used to separate the concatenated strings.
	This operation does not respect string encodings.
</div>
</div>
<div class='slot'>
<div class='slotName'>justSerialized(stream)</div>
<div class='slotValue'> Writes the receiver's code into the stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>last(optionalSize)</div>
<div class='slotValue'>	Returns the last item or Nil if the list is empty.
	If optionalSize is provided, that number of the last items in the list are returned.
</div>
</div>
<div class='slot'>
<div class='slotName'>map(optionalIndex, value, message)</div>
<div class='slotValue'> Same as calling mapInPlace() on a clone of the receiver, but more efficient.
</div>
</div>
<div class='slot'>
<div class='slotName'>mapInPlace</div>
<div class='slotValue'>Same as <tt>map</tt>, but result replaces self.
</div>
</div>
<div class='slot'>
<div class='slotName'>pop</div>
<div class='slotValue'>	Returns the last item in the list and removes it
	from the receiver. Returns nil if the receiver is empty.
</div>
</div>
<div class='slot'>
<div class='slotName'>preallocateToSize(aNumber)</div>
<div class='slotValue'>	Preallocates array memory to hold aNumber number of items.
</div>
</div>
<div class='slot'>
<div class='slotName'>prepend(anObject1, anObject2, ...)</div>
<div class='slotValue'>	Inserts the values at the beginning of the list. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>push(anObject1, anObject2, ...)</div>
<div class='slotValue'>	Same as add(anObject1, anObject2, ...).
</div>
</div>
<div class='slot'>
<div class='slotName'>reduce</div>
<div class='slotValue'>    Also known as foldl or inject. Combines values in target starting on the left.
    If no initial value is paseed the head of the list is used. <br />
<code>
Io> list(1, 2, 3) reduce(+)
==> 6
Io> list(1, 2, 3) reduce(xs, x, xs + x)
==> 6
Io> list(1, 2, 3) reduce(+, -6) // Passing the initial value.
==> 0
Io> list(1, 2, 3) reduce(xs, x, xs + x, -6)
==> 0
</code>
</div>
</div>
<div class='slot'>
<div class='slotName'>remove(anObject, ...)</div>
<div class='slotValue'>	Removes all occurrences of the arguments from the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeAt(index)</div>
<div class='slotValue'>	Removes the item at the specified index and returns the value removed.
	Raises an exception if the index is out of bounds.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeFirst</div>
<div class='slotValue'>Returns the first item and removes it from the list. nil is returned if the list is empty.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeLast</div>
<div class='slotValue'>Returns the last item and removes it from the list. nil is returned if the list is empty.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeSeq</div>
<div class='slotValue'>Removes each of the items from the current list which are contained in the sequence passed in.
</div>
</div>
<div class='slot'>
<div class='slotName'>rest</div>
<div class='slotValue'>Returns a copy of the list but with the first element removed.
</div>
</div>
<div class='slot'>
<div class='slotName'>reverse</div>
<div class='slotValue'>Reverses the ordering of all the items of the receiver. Returns copy of receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>reverseForeach(index, value, message)</div>
<div class='slotValue'>	Same as foreach, but in reverse order.
</div>
</div>
<div class='slot'>
<div class='slotName'>reverseInPlace</div>
<div class='slotValue'>	Reverses the ordering of all the items in the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>reverseReduce</div>
<div class='slotValue'>    Also known as foldr or inject. Combines values in target starting on the right.
    If no initial value is paseed the head of the list is used. See List reverse for examples.
</div>
</div>
<div class='slot'>
<div class='slotName'>second</div>
<div class='slotValue'>Returns third element (same as <tt>at(2)</tt>)
</div>
</div>
<div class='slot'>
<div class='slotName'>select(optionalIndex, value, message)</div>
<div class='slotValue'>    Like foreach, but the values for which the result of message are non-nil are returned
    in a new List. Example:
<code>list(1, 5, 7, 2) select(i, v, v > 3) print
==> 5, 7
list(1, 5, 7, 2) select(v, v > 3) print
 ==> 5, 7</code>
</div>
</div>
<div class='slot'>
<div class='slotName'>select(optionalIndex, value, message)",</div>
<div class='slotValue'>		"Like foreach, but the values for which the result of
message are non-nil are returned in a new List. Example:
<code>list(1, 5, 7, 2) select(i, v, v > 3) print
==> 5, 7

list(1, 5, 7, 2) select(v, v > 3) print
==> 5, 7</code>
</div>
</div>
<div class='slot'>
<div class='slotName'>selectInPlace</div>
<div class='slotValue'>Same as <tt>select</tt>, but result replaces self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSize</div>
<div class='slotValue'>	Sets the size of the receiver by either removing excess items or adding nils as needed.
</div>
</div>
<div class='slot'>
<div class='slotName'>shuffle</div>
<div class='slotValue'>Randomizes the ordering of all the items of the receiver. Returns copy of receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>shuffleInPlace</div>
<div class='slotValue'>Randomizes the order of the elements in the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>size</div>
<div class='slotValue'>	Returns the number of items in the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>slice(startIndex, endIndex, step)</div>
<div class='slotValue'>	Returns a new string containing the subset of the receiver 
    from the startIndex to the endIndex. The endIndex argument
	is optional. If not given, it is assumed to be the end of the string. 
    Step argument is also optional and defaults to 1, if not given.
    However, since Io supports positional arguments only, you need to
    explicitly specify endIndex, if you need a custom step.
</div>
</div>
<div class='slot'>
<div class='slotName'>sliceInPlace(startIndex, endIndex, step)</div>
<div class='slotValue'>	Returns the receiver containing the subset of the
	receiver from the startIndex to the endIndex. The endIndex argument
	is optional. If not given, it is assumed to be the end of the string. 
    Step argument is also optional and defaults to 1.
</div>
</div>
<div class='slot'>
<div class='slotName'>sort</div>
<div class='slotValue'>Returns a new list containing the sorted items from the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>sortBy(aBlock)</div>
<div class='slotValue'>        Returns a new list containing the items from the receiver, sorted using aBlock as compare function. Example:
<code>list(1, 3, 2, 4, 0) sortBy(block(a, b, a > b))
==> list(4, 3, 2, 1, 0)</code>
</div>
</div>
<div class='slot'>
<div class='slotName'>sortInPlace(optionalExpression)</div>
<div class='slotValue'>	Sorts the list using the compare method on the items. Returns self.
	If an optionalExpression is provided, the sort is done on the result of the evaluation
	of the optionalExpression on each value.
</div>
</div>
<div class='slot'>
<div class='slotName'>sortInPlaceBy(aBlock)</div>
<div class='slotValue'>	Sort the list using aBlock as the compare function. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>sum</div>
<div class='slotValue'>Returns the sum of the items.
</div>
</div>
<div class='slot'>
<div class='slotName'>swapIndices(index1, index2)</div>
<div class='slotValue'>	Exchanges the object at index1 with the object at index2.
	Raises an exception if either index is out of bounds. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>union(list)</div>
<div class='slotValue'> Returns a new list containing items from the target and items which are only in the argument list.
</div>
</div>
<div class='slot'>
<div class='slotName'>unique</div>
<div class='slotValue'>Returns a new list containing all the values in the target, but no duplicates.
</div>
</div>
<div class='slot'>
<div class='slotName'>uniqueCount</div>
<div class='slotValue'>Returns a list of list(value, count) for each unique value in self.
</div>
</div>
<div class='slot'>
<div class='slotName'>with(anObject, ...)</div>
<div class='slotValue'>	Returns a new List containing the arguments.
</div>
</div>
</div>
<a name='Core.Map'></a>
<div class='class'>
<div class='className'>Map</div>
<div class='classDescription'>A key/value dictionary appropriate for holding large key/value collections.
</div>
<div class='slot'>
<div class='slotName'>asJson</div>
<div class='slotValue'>Converts a Map to a string that represents contents in JSON-compilant form
</div>
</div>
<div class='slot'>
<div class='slotName'>asList</div>
<div class='slotValue'>Converts a Map to a list of lists. Each element in the returned list will be a list of two elements: the key, and the value.
</div>
</div>
<div class='slot'>
<div class='slotName'>asObject</div>
<div class='slotValue'>Create a new Object whose slotDescriptionMap will be equal to self
</div>
</div>
<div class='slot'>
<div class='slotName'>asQueryString</div>
<div class='slotValue'>Returns an escaped query string representation of this map
</div>
</div>
<div class='slot'>
<div class='slotName'>at(keyString, optionalDefaultValue)</div>
<div class='slotValue'>	Returns the value for the key keyString. Returns nil if the key is absent.
</div>
</div>
<div class='slot'>
<div class='slotName'>atIfAbsentPut(keyString, aValue)</div>
<div class='slotValue'>	If a value is present at the specified key, the value is returned. 
	Otherwise, inserts/sets aValue and returns aValue.
</div>
</div>
<div class='slot'>
<div class='slotName'>atPut(keyString, aValue)</div>
<div class='slotValue'>	Inserts/sets aValue with the key keyString. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>detect(optionalIndex, optionalValue, message)</div>
<div class='slotValue'>		Returns a random value for which message evals to non-nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>empty</div>
<div class='slotValue'>	Removes all keys from the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>foreach(optionalKey, value, message)</div>
<div class='slotValue'>	For each key value pair, sets the locals key to
the key and value to the value and executes message.
Example:
<pre>	aMap foreach(k, v, writeln(k, " = ", v))
aMap foreach(v, write(v))</pre>	

Example use with a block:

<pre>	myBlock = block(k, v, write(k, " = ", v, "\n"))
aMap foreach(k, v, myBlock(k, v))</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>hasKey(keyString)</div>
<div class='slotValue'>	Returns true if the key is present or false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>hasValue(aValue)</div>
<div class='slotValue'>	Returns true if the value is one of the Map's values or false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isEmpty</div>
<div class='slotValue'>returns true if this map doesn't contain any pairs.
</div>
</div>
<div class='slot'>
<div class='slotName'>isNotEmpty</div>
<div class='slotValue'>returns true if this map contains at least one pair.
</div>
</div>
<div class='slot'>
<div class='slotName'>justSerialized(stream)</div>
<div class='slotValue'> Writes the receiver's code into the stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>keys</div>
<div class='slotValue'>	Returns a List of the receivers keys.
</div>
</div>
<div class='slot'>
<div class='slotName'>map(key, value, message)</div>
<div class='slotValue'>		Create a List of results of message applied to self's items in a random
		order.
</div>
</div>
<div class='slot'>
<div class='slotName'>merge(anotherMap)</div>
<div class='slotValue'>		Returns a new map created by merging the pairs from anotherMap into this map
</div>
</div>
<div class='slot'>
<div class='slotName'>mergeInPlace(anotherMap)</div>
<div class='slotValue'>		Merges the pairs from anotherMap into this map
</div>
</div>
<div class='slot'>
<div class='slotName'>removeAt(keyString)</div>
<div class='slotValue'>	Removes the specified keyString if present. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>reverseMap</div>
<div class='slotValue'>Create a new Map using values as keys and keys as values
</div>
</div>
<div class='slot'>
<div class='slotName'>select(optionalIndex, optionalValue, message)</div>
<div class='slotValue'>		Create a new Map with keys,values of self for which message evaluated
		to non-nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>size</div>
<div class='slotValue'>	Returns the number of key/value pairs in the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>values</div>
<div class='slotValue'>	Returns a List of the receivers values.
</div>
</div>
<div class='slot'>
<div class='slotName'>with(key1, value1, key2, value2, ...)</div>
<div class='slotValue'> Returns a new map containing the given keys and values
</div>
</div>
</div>
<a name='Core.Message'></a>
<div class='class'>
<div class='className'>Message</div>
<div class='classDescription'>A Message object encapsulates the action of a message send. 
Blocks are composed of a Message and its children.
<p>
Terminology
<pre>
Example:
  Io> msg := message(A B(C D); E F)
  ==> A B(C D); E F
  
In the above example:
  msg name            =>  A
  msg next            =>  B(C D); E F
  msg next arguments  =>  list(C D)
  msg next next name  =>  ;
  msg next next next  =>  E F
</pre>
Important: Modifying the message tree of a block currently in use may cause
a crash if a garbage collection cycle occurs. If the implementation were
changed to retain every called message, this could be avoided.
But the cost to performance seems to outweigh the need to cover this case for now.
</div>
<div class='slot'>
<div class='slotName'>appendArg(aMessage)</div>
<div class='slotValue'>Adds aMessage to the argument list of receiver. Examples,
<pre>	
Io> message(a) appendArg(message(b))
==> a(b)

Io> message(a(1,2)) appendArg(message(3))
==> a(1, 2, 3)
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>appendCachedArg(aValue)</div>
<div class='slotValue'>	Adds aValue to the argument list of receiver as a cachedResult.
</div>
</div>
<div class='slot'>
<div class='slotName'>argAt(indexNumber)</div>
<div class='slotValue'>	Returns Message object for the specified argument or Nil if none exists.
</div>
</div>
<div class='slot'>
<div class='slotName'>argCount</div>
<div class='slotValue'>Returns the number of arguments this message has. A faster way to do, msg arguments size. Examples,
<pre>	
Io> message(a(1,2,3)) argCount
==> 3

Io> message(a) argCount
==> 0
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>argsEvaluatedIn(anObject)</div>
<div class='slotValue'>	Returns a List containing the argument messages evaluated in the
	context of anObject.
</div>
</div>
<div class='slot'>
<div class='slotName'>arguments</div>
<div class='slotValue'>	Returns a list of the message objects that act as the
	receiver's arguments. Modifying this list will not alter the actual
	list of arguments. Use the arguments_() method to do that.
</div>
</div>
<div class='slot'>
<div class='slotName'>asMessageWithEvaluatedArgs(optionalContext)</div>
<div class='slotValue'>	Returns a copy of receiver with arguments evaluated in the context of sender if
	optionalContext is nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>asSimpleString</div>
<div class='slotValue'>Returns one-line string representation up to 40 characters long.
</div>
</div>
<div class='slot'>
<div class='slotName'>asStackEntry</div>
<div class='slotValue'>Returns a string containing message name, file and line.
</div>
</div>
<div class='slot'>
<div class='slotName'>asString</div>
<div class='slotValue'>	Same as code().
</div>
</div>
<div class='slot'>
<div class='slotName'>cachedResult</div>
<div class='slotValue'>	Returns the cached result of the Message or Nil if there is none.
</div>
</div>
<div class='slot'>
<div class='slotName'>characterNumber</div>
<div class='slotValue'>	Returns the message character number. The charcter number is typically
	the beginning character index in the source text from with the message was read.
</div>
</div>
<div class='slot'>
<div class='slotName'>clone</div>
<div class='slotValue'>	Returns a Message that is a deep copy of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>code</div>
<div class='slotValue'>	Returns a String containing a decompiled code representation of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>codeOfLength(n)</div>
<div class='slotValue'>		Same as <tt>Message code</tt>, but returns first <tt>n</tt> characters only.
</div>
</div>
<div class='slot'>
<div class='slotName'>description</div>
<div class='slotValue'>Returns a string containing a short description of the method.
</div>
</div>
<div class='slot'>
<div class='slotName'>doInContext(anObject, locals)</div>
<div class='slotValue'>	Evaluates the receiver in the context of anObject. Optional <tt>locals</tt> 
	object is used as message sender. <tt>anObject</tt> is used as sender otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>evaluatedArgs</div>
<div class='slotValue'>	Returns a List containing the argument messages evaluated in the context.
</div>
</div>
<div class='slot'>
<div class='slotName'>fluxPath</div>
<div class='slotValue'> The directory where the .io files for the Flux views are located. This directory is added to the Importer searchPaths.
</div>
</div>
<div class='slot'>
<div class='slotName'>fluxSource</div>
<div class='slotValue'> The directory of Flux where Flux.io is located. This directory is added to the Importer searchPaths.
</div>
</div>
<div class='slot'>
<div class='slotName'>fromString(aString)</div>
<div class='slotValue'>	Returns a new Message object for the compiled(but not executed)
	result of aString.
</div>
</div>
<div class='slot'>
<div class='slotName'>hasCachedResult</div>
<div class='slotValue'>	Returns true if there is a cached result. Nil is a valid cached result.
</div>
</div>
<div class='slot'>
<div class='slotName'>isEndOfLine</div>
<div class='slotValue'>	Returns true if the message marks the end of the line. A ';' message.
</div>
</div>
<div class='slot'>
<div class='slotName'>label</div>
<div class='slotValue'>	Returns the message label. The label is typically set to the
	name of the file from which the source code for the message was read.
</div>
</div>
<div class='slot'>
<div class='slotName'>last</div>
<div class='slotValue'>	Returns the last message in the chain.
</div>
</div>
<div class='slot'>
<div class='slotName'>lastBeforeEndOfLine</div>
<div class='slotValue'>	Returns the last message in the chain before the EndOfLine or nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>lineNumber</div>
<div class='slotValue'>	Returns the line number of the message. The charcter number
	is typically the line number in the source text from with the message was read.
</div>
</div>
<div class='slot'>
<div class='slotName'>name</div>
<div class='slotValue'>	Returns the name of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>next</div>
<div class='slotValue'>	Returns the next message in the message chain or nil if there is no next message.
</div>
</div>
<div class='slot'>
<div class='slotName'>nextIgnoreEndOfLines</div>
<div class='slotValue'>	Returns the next message in the message chain which is not an 
	EndOfLine or nil if there is no next message.
</div>
</div>
<div class='slot'>
<div class='slotName'>previous</div>
<div class='slotValue'>	Returns the previous message in the message chain or Nil if there is no previous message.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeCachedResult</div>
<div class='slotValue'>	Removes the cached result of the Message.
</div>
</div>
<div class='slot'>
<div class='slotName'>setArguments(aListOfMessages)</div>
<div class='slotValue'>	Sets the arguments of the receiver to deep copies of
	those contained in aListOfMessages.  Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setCachedArgs(listOfValues)</div>
<div class='slotValue'> Appends evaluated arguments to a message. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setCachedResult(anObject)</div>
<div class='slotValue'>	Sets the cached result of the message. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setCharacterNumber(aNumber)</div>
<div class='slotValue'>	Sets the character number of the message. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setLabel(aString)</div>
<div class='slotValue'>	Sets the label of the message and its children. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setLineNumber(aNumber)</div>
<div class='slotValue'>	Sets the line number of the message. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setName(aString)</div>
<div class='slotValue'>	Sets the name of the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setNext(aMessageOrNil)</div>
<div class='slotValue'>	Sets the next message in the message chain to a deep copy of
	aMessage or it removes the next message if aMessage is nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPrevious(aMessageOrNil)</div>
<div class='slotValue'>	Sets the previous message in the message chain to a deep copy of
	aMessage or it removes the previous message if aMessage is Nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>union(other) Creates a union of the receiver and the other parameter.</div>
<div class='slotValue'>	Returns a new message object with the receivers message as the first argument of the returned message, 
	and the other parameter's arguments as each successive argument to the new message.
	<br/>
	<pre>
  Io> message(a) union(message(b))
  ==> [unnamed](a, b)
  </pre>
</div>
</div>
</div>
<a name='Core.Number'></a>
<div class='class'>
<div class='className'>Number</div>
<div class='classDescription'>A container for a double (a 64bit floating point number on most platforms).
</div>
<div class='slot'>
<div class='slotName'>%(aNumber)</div>
<div class='slotValue'>	Returns the receiver modulus aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>&(aNumber)</div>
<div class='slotValue'>	Returns a new number with the bitwise AND of the receiver and aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>*(aNumber)</div>
<div class='slotValue'>	Returns a new number that is the product of the receiver and aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>**(aNumber)</div>
<div class='slotValue'>	Same as pow(aNumber).
</div>
</div>
<div class='slot'>
<div class='slotName'>+(aNumber)</div>
<div class='slotValue'>	Returns a new number that is the sum of the receiver and aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>-(aNumber)</div>
<div class='slotValue'>	Returns a new number that is the difference of the receiver and aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>/(aNumber)</div>
<div class='slotValue'>	Returns a new number with the value of the receiver divided by aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'><<(aNumber)</div>
<div class='slotValue'>	Shifts the bits of the receiver left by the number of places specified by aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>>>(aNumber)</div>
<div class='slotValue'>	Shifts the bits of the receiver right by the number of places specified by aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>^(aNumber)</div>
<div class='slotValue'>	Returns the bitwise xor with the receiver (both numbers are converted to longs for the operation).
</div>
</div>
<div class='slot'>
<div class='slotName'>abs</div>
<div class='slotValue'>	Returns a number with the absolute value of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>acos</div>
<div class='slotValue'>	Returns a number with the arc cosine of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>asBinary</div>
<div class='slotValue'>Returns the number as binary digits inside a string. 42 asBinary -> "101010"
</div>
</div>
<div class='slot'>
<div class='slotName'>asBuffer(optionalNumberOfBytes)</div>
<div class='slotValue'>	Returns a Buffer containing a the number of bytes specified by
	optionalNumberOfBytes (up to the size of a double on the platform) of the receiver.
	If no optionalNumberOfBytes is specified, it is assumed to be the number of bytes
	in a double on the host platform.
</div>
</div>
<div class='slot'>
<div class='slotName'>asCharacter</div>
<div class='slotValue'>	Returns a String containing a single character whose
	value is the value of the first byte of the receiver.
	Returns nil if the number has no valid UCS mapping.
</div>
</div>
<div class='slot'>
<div class='slotName'>asHex</div>
<div class='slotValue'>Returns the number as hex digits inside a string. 97 asHex -> "61"
</div>
</div>
<div class='slot'>
<div class='slotName'>asLowercase</div>
<div class='slotValue'>	Returns a new Number containing a lower case version of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>asNumber</div>
<div class='slotValue'>	Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>asOctal</div>
<div class='slotValue'>Returns the number as octal digits inside a string. 436 asOctal -> "664"
</div>
</div>
<div class='slot'>
<div class='slotName'>asString(optionalIntegerDigits, optionalFactionDigits)</div>
<div class='slotValue'>Returns a string representation of the receiver. For example:
<pre>
1234.5678 asString(0, 2)
</pre>	
would return:
<pre>
1234.57
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>asUint32Buffer</div>
<div class='slotValue'>	Returns a Sequence containing a 4 byte representation of the uint32 value of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>asUppercase</div>
<div class='slotValue'>	Returns a new Number containing a upper case version of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>asin</div>
<div class='slotValue'>	Returns a number with the arc sine of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>at(bitIndexNumber)</div>
<div class='slotValue'>	Returns a new Number containing 1 if the receiver cast to a long
	has its bit set to 1 at bitIndexNumber. Otherwise returns 0.
</div>
</div>
<div class='slot'>
<div class='slotName'>atan</div>
<div class='slotValue'>	Returns a number with the arc tangent of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>atan2(aNumber)</div>
<div class='slotValue'>	Returns a number with the arc tangent of y/x where y is the receiver and x is aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>between(aNumber1, aNumber2)</div>
<div class='slotValue'>	Returns true if the receiver's value is between or
	equal to aNumber1 and aNumber2, otherwise returns false.
</div>
</div>
<div class='slot'>
<div class='slotName'>bitwiseAnd(aNumber)</div>
<div class='slotValue'>	Returns a new number with the bitwise AND of the receiver and aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>bitwiseComplement</div>
<div class='slotValue'>	Returns a new number with the bitwise complement of the
	receiver. (The 0 bits become 1s and the 1 bits become 0s. )
</div>
</div>
<div class='slot'>
<div class='slotName'>bitwiseOr(aNumber)</div>
<div class='slotValue'>	Returns a new number with the bitwise AND of the receiver and aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>bitwiseXor(aNumber)</div>
<div class='slotValue'>	Returns a new number with the bitwise XOR of the receiver and aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>ceil</div>
<div class='slotValue'>	Returns the a number with the receiver's value rounded up to
	the nearest integer if its fractional component is greater than 0.
</div>
</div>
<div class='slot'>
<div class='slotName'>clip(aNumber1, aNumber2)</div>
<div class='slotValue'>	Returns self if the receiver is between aNumber1 and aNumber2.
	Returns aNumber1 if it is less than aNumber1. Returns aNumber2 if it is greater than aNumber2.
</div>
</div>
<div class='slot'>
<div class='slotName'>combinations(size)</div>
<div class='slotValue'> Returns the combinations where the receiver is the number of different objects and size is the number to be arranged.
</div>
</div>
<div class='slot'>
<div class='slotName'>constants</div>
<div class='slotValue'>Object containing number constants e, inf, nan and pi.
</div>
</div>
<div class='slot'>
<div class='slotName'>cos</div>
<div class='slotValue'>	Returns the cosine of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>cubed</div>
<div class='slotValue'>	Returns the cube of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>doubleMin</div>
<div class='slotValue'>	Returns the minimum double precision float value.
</div>
</div>
<div class='slot'>
<div class='slotName'>e</div>
<div class='slotValue'>Returns the constant e.
</div>
</div>
<div class='slot'>
<div class='slotName'>exp</div>
<div class='slotValue'>	Returns e to the power of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>factorial</div>
<div class='slotValue'>	Returns the factorial of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>floatMax</div>
<div class='slotValue'>	Returns the maximum double precision float value.
</div>
</div>
<div class='slot'>
<div class='slotName'>floatMin</div>
<div class='slotValue'>	Returns the minimum float value.
</div>
</div>
<div class='slot'>
<div class='slotName'>floor</div>
<div class='slotValue'>	Returns a number with the receiver's value rounded
	down to the nearest integer if its fractional component is not 0.
</div>
</div>
<div class='slot'>
<div class='slotName'>inf</div>
<div class='slotValue'>Returns a not-a-number constant.
</div>
</div>
<div class='slot'>
<div class='slotName'>integerMax</div>
<div class='slotValue'>	Returns the maximum integer value.
</div>
</div>
<div class='slot'>
<div class='slotName'>integerMin</div>
<div class='slotValue'>	Returns the minimum integer value.
</div>
</div>
<div class='slot'>
<div class='slotName'>isAlphaNumeric</div>
<div class='slotValue'>	Returns true if 
	receiver is an alphanumeric character value
	, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isControlCharacter</div>
<div class='slotValue'>	Returns true if 
	receiver is a control character value
	, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isDigit</div>
<div class='slotValue'>	Returns true if 
	receiver is a numeric digit value
	, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isEven</div>
<div class='slotValue'>	Returns true if 
	integer form of the receiver is even
	, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isGraph</div>
<div class='slotValue'>	Returns true if 
	the receiver is a printing character value except space
	, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isHexDigit</div>
<div class='slotValue'>	Returns true if 
	the receiver is a hexadecimal character value
	, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isInASequenceSet</div>
<div class='slotValue'>Return true if receiver is in one of the Sequence sequenceSets, otherwise false.
</div>
</div>
<div class='slot'>
<div class='slotName'>isLetter</div>
<div class='slotValue'>	Returns true if 
	receiver is a letter character value
	, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isLowercase</div>
<div class='slotValue'>	Returns true if 
	the receiver is a lowercase character value
	, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isNan</div>
<div class='slotValue'>	Returns true if the receiver is not a number. Otherwise returns false.
</div>
</div>
<div class='slot'>
<div class='slotName'>isOdd</div>
<div class='slotValue'>	Returns true if 
	integer form of the receiver is odd
	, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isPrint</div>
<div class='slotValue'>	Returns true if 
	the receiver is a printing character value, including space
	, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isPunctuation</div>
<div class='slotValue'>	Returns true if 
	the receiver is a punctuation character value
	, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isSpace</div>
<div class='slotValue'>	Returns true if 
	the receiver is a space, formfeed, newline carriage return, tab or vertical tab character value
	, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isUppercase</div>
<div class='slotValue'>	Returns true if 
	the receiver is a uppercase character value
	, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>justSerialized(stream)</div>
<div class='slotValue'> Writes the receiver's code into the stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>log</div>
<div class='slotValue'>	Returns the logarithm of the receiver.  The base
	is taken as the value of the first argument or the constant e if
	the first argument is omitted.
</div>
</div>
<div class='slot'>
<div class='slotName'>log10</div>
<div class='slotValue'>	Returns the base 10 logarithm of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>log2</div>
<div class='slotValue'>	Returns the base 2 logarithm of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>longMax</div>
<div class='slotValue'>	Returns the maximum long value.
</div>
</div>
<div class='slot'>
<div class='slotName'>longMin</div>
<div class='slotValue'>	Returns the minimum long value.
</div>
</div>
<div class='slot'>
<div class='slotName'>max(aNumber)</div>
<div class='slotValue'>	Returns the greater of the receiver and aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>min(aNumber)</div>
<div class='slotValue'>	Returns the lesser of the receiver and aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>minMax(low, high)</div>
<div class='slotValue'> Returns a number between or equal to low and high. If the receiver is equal to or between low and high, the receiver is returned. If the receiver is less than low, low is returned. If the receiver is greater than high, high is returned.
</div>
</div>
<div class='slot'>
<div class='slotName'>mod(aNumber)</div>
<div class='slotValue'>	Returns the receiver modulus aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>nan</div>
<div class='slotValue'>Returns a infinity constant.
</div>
</div>
<div class='slot'>
<div class='slotName'>negate</div>
<div class='slotValue'>	Returns new number that is negated version of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>permutations(size)</div>
<div class='slotValue'> Returns the permutations where the receiver is the number of different objects and size is the number to be arranged.
</div>
</div>
<div class='slot'>
<div class='slotName'>pi</div>
<div class='slotValue'>Returns the constant pi.
</div>
</div>
<div class='slot'>
<div class='slotName'>pow(aNumber)</div>
<div class='slotValue'>	Returns the value of the receiver to the aNumber power.
</div>
</div>
<div class='slot'>
<div class='slotName'>print</div>
<div class='slotValue'>	Prints the number.
</div>
</div>
<div class='slot'>
<div class='slotName'>repeat(optionalIndex, expression)</div>
<div class='slotValue'>	Evaluates message a number of times that corresponds to the receivers
	integer value. This is significantly faster than a for() or while() loop.
</div>
</div>
<div class='slot'>
<div class='slotName'>round</div>
<div class='slotValue'>	Returns a number with the receiver's value rounded up to
	the nearest integer if its fraction component is >= .5 or rounded up to the nearest integer otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>roundDown</div>
<div class='slotValue'>	Returns a number with the receiver's value rounded down to
	the nearest integer if its fraction component is <= .5 or rounded up the the nearest integer otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>shortMax</div>
<div class='slotValue'>	Returns the maximum short value.
</div>
</div>
<div class='slot'>
<div class='slotName'>shortMin</div>
<div class='slotValue'>	Returns the minimum short value.
</div>
</div>
<div class='slot'>
<div class='slotName'>sin</div>
<div class='slotValue'>	Returns the sine of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>sqrt</div>
<div class='slotValue'>	Returns the square root of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>squared</div>
<div class='slotValue'>	Returns the square of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>tan</div>
<div class='slotValue'>	Returns the tangent of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>toBase(base)</div>
<div class='slotValue'> Returns the number in another base. 42 toBase(2) -> "101010"
</div>
</div>
<div class='slot'>
<div class='slotName'>toBaseWholeBytes(base)</div>
<div class='slotValue'> Returns the number in another base printing out entire bytes. 42 toBaseWholeBytes(2) -> "00101010"
</div>
</div>
<div class='slot'>
<div class='slotName'>toggle</div>
<div class='slotValue'>	Returns 1 if the receiver is 0. Returns 0 otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>unsignedIntMax</div>
<div class='slotValue'>	Returns the maximum unsigned int value.
</div>
</div>
<div class='slot'>
<div class='slotName'>unsignedLongMax</div>
<div class='slotValue'>	Returns the maximum unsigned long value.
</div>
</div>
<div class='slot'>
<div class='slotName'>unsignedShortMax</div>
<div class='slotValue'>	Returns the minimum unsigned int value.
</div>
</div>
<div class='slot'>
<div class='slotName'>|(aNumber)</div>
<div class='slotValue'>	Returns a new number with the bitwise OR of the receiver and aNumber.
</div>
</div>
</div>
<a name='Core.Object'></a>
<div class='class'>
<div class='className'>Object</div>
<div class='classDescription'>An Object is a key/value dictionary with string keys and values of any type.
The prototype Object contains a clone slot that is a CFuntion that creates new objects.
When cloned, an Object will call its init slot (with no arguments).
</div>
<div class='slot'>
<div class='slotName'>!=(aValue)</div>
<div class='slotValue'>	Returns true the receiver is not equal to aValue, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>(expression)</div>
<div class='slotValue'>	The '' method evaluates the argument and returns the result.
</div>
</div>
<div class='slot'>
<div class='slotName'>-(aNumber)</div>
<div class='slotValue'>	Returns the negative version of aNumber.
	Raises an exception if argument is not a number.
</div>
</div>
<div class='slot'>
<div class='slotName'>..(arg)</div>
<div class='slotValue'> .. is an alias for: method(arg, self asString append(arg asString))
</div>
</div>
<div class='slot'>
<div class='slotName'><(expression)</div>
<div class='slotValue'>	Evaluates argument and returns self if self is less or Nil if not.
</div>
</div>
<div class='slot'>
<div class='slotName'><=(expression)</div>
<div class='slotValue'>	Evaluates argument and returns self if self is less
	than or equal to it, or Nil if not.
</div>
</div>
<div class='slot'>
<div class='slotName'>==(aValue)</div>
<div class='slotValue'>	Returns true if receiver and aValue are equal, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>>(expression)</div>
<div class='slotValue'>	Evaluates argument and returns self if self is greater than it, or Nil if not.
</div>
</div>
<div class='slot'>
<div class='slotName'>>=(expression)</div>
<div class='slotValue'>	Evaluates argument and returns self if self is greater
	than or equal to it, or Nil if not.
</div>
</div>
<div class='slot'>
<div class='slotName'>?(aMessage)</div>
<div class='slotValue'>	description: Sends the message aMessage to the receiver if it can respond to it. Example:
	<pre>
	MyObject test // performs test
	MyObject ?test // performs test if MyObject has a slot named test
	</pre>
	The search for the slot only follows the receivers proto chain.
</div>
</div>
<div class='slot'>
<div class='slotName'>@</div>
<div class='slotValue'>	Sends asynchronous message to an object, returns a FutureProxy.
	<br/>
	Caller coroutine is paused when proxy is accessed (i.e. message is sent)
	till result is ready. Proxy will become an actual result when it is ready.
	<br/>
	See IoGuide for more information.
	<br/>
	Usage: obj @someMethod(a, b, c)
</div>
</div>
<div class='slot'>
<div class='slotName'>@@</div>
<div class='slotValue'>	Same as Object @, but returns nil instead of FutureProxy.
	<br/>
	Might be useful in a command line or as a last expression in a block/method when
	you don't want to return a future.
</div>
</div>
<div class='slot'>
<div class='slotName'>NullCharacter</div>
<div class='slotValue'>A sequence with a single zero byte.
</div>
</div>
<div class='slot'>
<div class='slotName'>actorProcessQueue</div>
<div class='slotValue'>Processes each message in a queue, yielding between each message.
</div>
</div>
<div class='slot'>
<div class='slotName'>actorRun</div>
<div class='slotValue'>Starts actor mode if not started already. Basically, sets actorProcessQueue for later execution.
</div>
</div>
<div class='slot'>
<div class='slotName'>ancestorWithSlot(slotName)</div>
<div class='slotValue'>	Returns the first ancestor of the receiver that contains
	a slot of the specified name or Nil if none is found.
</div>
</div>
<div class='slot'>
<div class='slotName'>ancestors</div>
<div class='slotValue'>Returns a list of all of the receiver's ancestors as found by recursively following the protos links.
</div>
</div>
<div class='slot'>
<div class='slotName'>and(arg)</div>
<div class='slotValue'> Evaluates argument and returns the result.
</div>
</div>
<div class='slot'>
<div class='slotName'>appendProto(anObject)</div>
<div class='slotValue'>	Appends anObject to the receiver's proto list. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>apropos</div>
<div class='slotValue'>Prints out <tt>Protos Core</tt> slot descriptions.
</div>
</div>
<div class='slot'>
<div class='slotName'>argIsActivationRecord</div>
<div class='slotValue'>  Note: seems to be an obsolete method.
</div>
</div>
<div class='slot'>
<div class='slotName'>argIsCall(arg)</div>
<div class='slotValue'>	Returns true if arg is an activation context (i.e. Call object)
	<br/>
	Note: this is used internally in one place only (Coroutine callStack).
	Refactoring should be considered.
</div>
</div>
<div class='slot'>
<div class='slotName'>asSimpleString</div>
<div class='slotValue'>Returns <type>_<uniqueHexId> string.
</div>
</div>
<div class='slot'>
<div class='slotName'>asString</div>
<div class='slotValue'>Same as <tt>slotSummary</tt>.
</div>
</div>
<div class='slot'>
<div class='slotName'>become(anotherObject)</div>
<div class='slotValue'>	Replaces receiver with <tt>anotherObject</tt> and returns self.
	Useful for implementing transparent proxies. See also <tt>FutureProxy</tt> and <tt>Object @</tt>.
	<br/>
	Note: primitives cannot become new values.
</div>
</div>
<div class='slot'>
<div class='slotName'>block(args..., body)</div>
<div class='slotValue'>	Creates a block and binds it to the sender context (i.e. lexical context).
	In other words, block locals' proto is sender's locals.
	<tt>args</tt> is a list of formal arguments (can be empty). <br/>
	<tt>body</tt> is evaluated in the context of Locals object.<br/>
	See also <tt>Object method</tt>.
	<br/>
	<pre>
	Io> block(x, x*2) scope == thisContext
  ==> true
	</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>break(optionalReturnValue)</div>
<div class='slotValue'>	Break the current loop, if any.
</div>
</div>
<div class='slot'>
<div class='slotName'>checkMemory()</div>
<div class='slotValue'>	accesses memory in the IoObjectData struct that should be accessible.  Should cause a memory access
	exception if memory is corrupt.
</div>
</div>
<div class='slot'>
<div class='slotName'>clone</div>
<div class='slotValue'>	Returns a clone of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>cloneWithoutInit</div>
<div class='slotValue'>	Returns a clone of the receiver but does not call init.
</div>
</div>
<div class='slot'>
<div class='slotName'>compact</div>
<div class='slotValue'>	Compact the memory for the object if possible. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>compactState</div>
<div class='slotValue'>	Attempt to compact the memory of the IoState if possible.
</div>
</div>
<div class='slot'>
<div class='slotName'>compare(anObject)</div>
<div class='slotValue'>	Returns a number containing the comparison value of the target with anObject.
</div>
</div>
<div class='slot'>
<div class='slotName'>contextWithSlot(slotName)</div>
<div class='slotValue'>	Returns the first context (starting with the receiver and following the lookup path)
	that contains a slot of the specified name or Nil if none is found.
</div>
</div>
<div class='slot'>
<div class='slotName'>continue</div>
<div class='slotValue'>	Skip the rest of the current loop iteration and start on
	the next, if any.
</div>
</div>
<div class='slot'>
<div class='slotName'>coroDo(code)</div>
<div class='slotValue'>		Creates a new coro to be run in a context of sender and yields to it.
		Returns a coro.
</div>
</div>
<div class='slot'>
<div class='slotName'>coroDoLater(code)</div>
<div class='slotValue'>		Returns a new coro to be run in a context of sender.
		New coro is moved to the top of the yieldingCoros queue to be executed 
		when current coro yields.
		<br/>
		Note: run target is <tt>self</tt> (i.e. receiver), not <tt>call sender</tt> as in coroDo.
</div>
</div>
<div class='slot'>
<div class='slotName'>coroFor(code)</div>
<div class='slotValue'>		Returns a new coro to be run in a context of sender.
</div>
</div>
<div class='slot'>
<div class='slotName'>coroWith(code)</div>
<div class='slotValue'> Returns a new coro to be run in a context of receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>currentCoro</div>
<div class='slotValue'>Returns the currently running coroutine.
</div>
</div>
<div class='slot'>
<div class='slotName'>debugOff</div>
<div class='slotValue'>Sets debugWriteln to nil. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>debugOn</div>
<div class='slotValue'>Sets debugWriteln to writeln. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>debugWriteln</div>
<div class='slotValue'>Method for writing debug messages (nil/writeln by default)
</div>
</div>
<div class='slot'>
<div class='slotName'>deprecatedWarning(optionalNewName)</div>
<div class='slotValue'>	Prints a warning message that the current method is deprecated.
	If optionalNewName is supplied, the warning will suggest using that instead.
	Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>do(expression)</div>
<div class='slotValue'>	Evaluates the message in the context of the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>doFile(pathString)</div>
<div class='slotValue'>	Evaluates the File in the context of the receiver. Returns the result.
	pathString is relative to the current working directory.
</div>
</div>
<div class='slot'>
<div class='slotName'>doMessage(aMessage, optionalContext)</div>
<div class='slotValue'>	Evaluates the message object in the context of the receiver.
	Returns the result. optionalContext can be used to specific the locals
	context in which the message is evaluated.
</div>
</div>
<div class='slot'>
<div class='slotName'>doRelativeFile(pathString)</div>
<div class='slotValue'>		Evaluates the File in the context of the receiver. Returns the result. 
		pathString is relative to the file calling doRelativeFile. (Duplicate of relativeDoFile)
</div>
</div>
<div class='slot'>
<div class='slotName'>doString(aString)</div>
<div class='slotValue'>	Evaluates the string in the context of the receiver. Returns the result.
</div>
</div>
<div class='slot'>
<div class='slotName'>doURL(urlString)</div>
<div class='slotValue'> Fetches the URL and evals it in the context of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>evalArg(expression)</div>
<div class='slotValue'>	The '' method evaluates the argument and returns the result.
</div>
</div>
<div class='slot'>
<div class='slotName'>evalArgAndReturnNil(expression)</div>
<div class='slotValue'>	Evaluates the argument and returns nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>evalArgAndReturnSelf(expression)</div>
<div class='slotValue'>	Evaluates the argument and returns the target.
</div>
</div>
<div class='slot'>
<div class='slotName'>for(<counter>, <start>, <end>, <do message>)</div>
<div class='slotValue'>	A for-loop control structure. See the io Programming Guide for a full description.
</div>
</div>
<div class='slot'>
<div class='slotName'>foreach([name,] value, message)</div>
<div class='slotValue'>For each slot, set name to the slot's
name and value to the slot's value and execute message. Examples:
<p>
<pre>
myObject foreach(n, v,
	writeln("slot ", n, " = ", v type)
)

myObject foreach(v,
	writeln("slot type ", v type)
)
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>foreachSlot(slotName, slotValue, code)</div>
<div class='slotValue'>  Iterates over all the slots in a receiver. Provides slotValue (non-activated)
  along with slotName. Code is executed in context of sender. <tt>slotName</tt> and <tt>slotValue</tt>
  become visible in the receiver (no Locals created! Maybe, it is not the best decision).
  <br/>
  <pre>
  Io> thisContext foreachSlot(n, v, n println)
  Lobby
  Protos
  exit
  forward
  n
  v
  ==> false
  </pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>forward</div>
<div class='slotValue'>Called when the receiver is sent a message it doesn't recognize.
Default implementation raises an "Object doesNotRespond" exception.
Subclasses can override this method to implement proxies or special error handling.
<p>
Example:
<p>
<pre>
myProxy forward = method(
	messageName := thisMessage name
	arguments := thisMessage arguments
	myObject doMessage(thisMessage)
)
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>getLocalSlot(slotNameString)</div>
<div class='slotValue'>	Returns the value of the slot named slotNameString
	(not looking in the object's protos) or nil if no such slot is found.
</div>
</div>
<div class='slot'>
<div class='slotName'>getSlot(slotNameString)</div>
<div class='slotValue'>	Returns the value of the slot named slotNameString
	(following the lookup path) or nil if no such slot is found.
</div>
</div>
<div class='slot'>
<div class='slotName'>handleActorException(exception)</div>
<div class='slotValue'>	Callback for handling exceptions during asynchronous message processing.
	<br/>
	Default value: method(e, e showStack)
</div>
</div>
<div class='slot'>
<div class='slotName'>hasLocalSlot(slotNameString)</div>
<div class='slotValue'>	Returns true if the slot exists in the receiver or false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>hasProto(anObject)</div>
<div class='slotValue'>	Returns true if anObject is found in the proto path of the target, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>hasSlot(name)</div>
<div class='slotValue'>  Returns <tt>true</tt> if slot is found somewhere in the inheritance chain 
  (including receiver itself).
</div>
</div>
<div class='slot'>
<div class='slotName'>if(<condition>, <trueMessage>, <optionalFalseMessage>)</div>
<div class='slotValue'>	Evaluates trueMessage if condition evaluates to a non-Nil.
	Otherwise evaluates optionalFalseMessage if it is present.
	Returns the result of the evaluated message or Nil if none was evaluated.
</div>
</div>
<div class='slot'>
<div class='slotName'>ifDebug(code)</div>
<div class='slotValue'> Executes code if debugWriteln is not nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>ifError</div>
<div class='slotValue'>Does nothing, returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>ifNil(arg)</div>
<div class='slotValue'> Does nothing, returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>ifNilEval(arg)</div>
<div class='slotValue'> Does nothing, returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>ifNonNil(arg)</div>
<div class='slotValue'> Evaluates argument and returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>ifNonNilEval(arg)</div>
<div class='slotValue'> Evaluates argument and returns the result.
</div>
</div>
<div class='slot'>
<div class='slotName'>in(aList)</div>
<div class='slotValue'> Same as: aList contains(self)
</div>
</div>
<div class='slot'>
<div class='slotName'>inlineMethod</div>
<div class='slotValue'>  Creates a method which is executed directly in a receiver (no Locals object is created).
  <br/>
  <pre>
  Io> m := inlineMethod(x := x*2)
  Io> x := 1
  ==> 1
  Io> m
  ==> 2
  Io> m
  ==> 4
  Io> m
  ==> 8
  </pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>isActivatable</div>
<div class='slotValue'>	Returns true if the receiver is activatable, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isError</div>
<div class='slotValue'>Returns false if not an error.
</div>
</div>
<div class='slot'>
<div class='slotName'>isIdenticalTo(aValue)</div>
<div class='slotValue'>	Returns true if the receiver is identical to aValue, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isKindOf(anObject)</div>
<div class='slotValue'> Returns true if anObject is in the receiver's ancestors.
</div>
</div>
<div class='slot'>
<div class='slotName'>isLaunchScript</div>
<div class='slotValue'>Returns true if the current file was run on the command line. Io's version of Python's __file__ == "__main__"
</div>
</div>
<div class='slot'>
<div class='slotName'>isNil</div>
<div class='slotValue'>Returns false.
</div>
</div>
<div class='slot'>
<div class='slotName'>isTrue</div>
<div class='slotValue'>Returns true.
</div>
</div>
<div class='slot'>
<div class='slotName'>justSerialized(stream)</div>
<div class='slotValue'>  Writes serialized representation to a SerializationStream. Returns stream contents. 
  [This is unintended side effect! Returned value may change in the future.]
</div>
</div>
<div class='slot'>
<div class='slotName'>launchFile(pathString)</div>
<div class='slotValue'> Eval file at pathString as if from the command line in its folder.
</div>
</div>
<div class='slot'>
<div class='slotName'>lazySlot(code)</div>
<div class='slotValue'>  Defines a slot with a lazy initialization code. 
  Code is run only once: the first time slot is accessed. 
  Returned value is stored in a regular slot.
  <br/>
  <pre>
  Io> x := lazySlot("Evaluated!" println; 17)
  Io> x
  Evaluated!
  ==> 17
  Io> x
  ==> 17
  Io> x
  ==> 17
  </pre>
  <br/>
  Another form is <tt>lazySlot(name, code)</tt>:
  <br/>
  <pre>
  Io> lazySlot("x", "Evaluated!" println; 17)
  Io> x
  Evaluated!
  ==> 17
  Io> x
  ==> 17
  Io> x
  ==> 17
  </pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>list(...)</div>
<div class='slotValue'> Returns a List containing the arguments.
</div>
</div>
<div class='slot'>
<div class='slotName'>localsForward</div>
<div class='slotValue'>	CFunction used by Locals prototype for forwarding.
</div>
</div>
<div class='slot'>
<div class='slotName'>localsUpdateSlot(slotNameString, valueObject)</div>
<div class='slotValue'>	Local's version of updateSlot mthod.
</div>
</div>
<div class='slot'>
<div class='slotName'>loop(expression)</div>
<div class='slotValue'>	Keeps evaluating message until a break.
</div>
</div>
<div class='slot'>
<div class='slotName'>markClean</div>
<div class='slotValue'>Cleans object's slots.
</div>
</div>
<div class='slot'>
<div class='slotName'>memorySize</div>
<div class='slotValue'>	Return the amount of memory used by the object.
</div>
</div>
<div class='slot'>
<div class='slotName'>memorySizeOfState</div>
<div class='slotValue'>	Returns the number of bytes in the IoState
	(this may not include memory allocated by C libraries).
</div>
</div>
<div class='slot'>
<div class='slotName'>message(expression)</div>
<div class='slotValue'>	Return the message object for the argument or Nil if there is no argument.
	Note: returned object is a mutable singleton. Use "message(foo) clone" if
  you wish to modify it.
</div>
</div>
<div class='slot'>
<div class='slotName'>method(args..., body)</div>
<div class='slotValue'>	Creates a method. 
	<tt>args</tt> is a list of formal arguments (can be empty). <br/>
	<tt>body</tt> is evaluated in the context of Locals object.<br/>
	Locals' proto is a message receiver (i.e. self).
	<br/>
	Slot with a method is <em>activatable</em>. Use getSlot(name) to retrieve 
	method object without activating it (i.e. calling).
	<br/>
	See also <tt>Object block</tt>.
</div>
</div>
<div class='slot'>
<div class='slotName'>newSlot(slotName, aValue)</div>
<div class='slotValue'>	Creates a getter and setter for the slot with the name slotName
	and sets its default value to aValue. Returns self. For example,
	newSlot("foo", 1) would create slot named foo with the value 1 as well as a setter method setFoo().
</div>
</div>
<div class='slot'>
<div class='slotName'>not</div>
<div class='slotValue'>Returns nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>or(arg)</div>
<div class='slotValue'> Returns true.
</div>
</div>
<div class='slot'>
<div class='slotName'>ownsSlots</div>
<div class='slotValue'>  A debug method.
</div>
</div>
<div class='slot'>
<div class='slotName'>pSlots</div>
<div class='slotValue'>PDB extension to set a list of slots to persist with PDB.
Creates the specified slots using newSlot and sets them to nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>pause</div>
<div class='slotValue'>	Removes current coroutine from the yieldingCoros queue and
	yields to another coro. Exits if no coros left.
	<br/>
	See Coroutine documentation for more details.
</div>
</div>
<div class='slot'>
<div class='slotName'>perform(methodName, <arg1>, <arg2>, ...)</div>
<div class='slotValue'>	Performs the method corresponding to methodName with the arguments supplied.
</div>
</div>
<div class='slot'>
<div class='slotName'>performWithArgList(methodName, argList)</div>
<div class='slotValue'>	Performs the method corresponding to methodName with the arguments in the argList.
</div>
</div>
<div class='slot'>
<div class='slotName'>persist</div>
<div class='slotValue'>Force immediate persistence of this object with PDB.
</div>
</div>
<div class='slot'>
<div class='slotName'>persistData</div>
<div class='slotValue'>Force immediate persistence of this object's serialized form (using asSerialization)
into PDB, if possible.
</div>
</div>
<div class='slot'>
<div class='slotName'>persistMetaData</div>
<div class='slotValue'>Force immediate persistence of this object's type data into PDB
</div>
</div>
<div class='slot'>
<div class='slotName'>persistSlots</div>
<div class='slotValue'>Force immediate persistence of this object's dirty slots into PDB.
</div>
</div>
<div class='slot'>
<div class='slotName'>ppid</div>
<div class='slotValue'>This PDB extension returns a unique identifier for this object and registers it
for persistence with PDB.
</div>
</div>
<div class='slot'>
<div class='slotName'>prependProto(anObject)</div>
<div class='slotValue'>	Prepends anObject to the receiver's proto list. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>print</div>
<div class='slotValue'>	Prints a string representation of the object. Returns Nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>println</div>
<div class='slotValue'>Same as print, but also prints a new line. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>proto</div>
<div class='slotValue'>	Same as; method(self protos first)
</div>
</div>
<div class='slot'>
<div class='slotName'>protos</div>
<div class='slotValue'>	Returns a copy of the receiver's protos list.
</div>
</div>
<div class='slot'>
<div class='slotName'>raiseIfError</div>
<div class='slotValue'>Does nothing, returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>relativeDoFile(pathString)</div>
<div class='slotValue'>		Evaluates the File in the context of the receiver. Returns the result. 
		pathString is relative to the file calling doRelativeFile. (Duplicate of doRelativeFile)
</div>
</div>
<div class='slot'>
<div class='slotName'>removeAllProtos</div>
<div class='slotValue'>	Removes all of the receiver's protos. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeAllSlots</div>
<div class='slotValue'>	Removes all of the receiver's slots. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeProto(anObject)</div>
<div class='slotValue'>	Removes anObject from the receiver's proto list if it
	is present. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeSlot(slotNameString)</div>
<div class='slotValue'>	Removes the specified slot (only) in the receiver if it exists. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>resend</div>
<div class='slotValue'>	Send the message used to activate the current method to the Object's proto.
  For example:
  <pre>
  Dog := Mammal clone do(
    init := method(
  	  resend
    )
  )
  </pre>
	Calling Dog init will send an init method to Mammal, but using the Dog's context.
</div>
</div>
<div class='slot'>
<div class='slotName'>return(anObject)</div>
<div class='slotValue'>	Return anObject from the current execution block.
</div>
</div>
<div class='slot'>
<div class='slotName'>returnIfError</div>
<div class='slotValue'>Does nothing, returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>returnIfNonNil</div>
<div class='slotValue'>	Returns the receiver from the current execution block if it is non nil. 
	Otherwise returns the receiver locally.
</div>
</div>
<div class='slot'>
<div class='slotName'>self</div>
<div class='slotValue'>	Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>serialized</div>
<div class='slotValue'>  Returns a serialized representation of the receiver.
  <br/>
  <pre>
  Io> Object clone do(x:=1) serialized
  ==> Object clone do(
  	x := 1
  )
  </pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>serializedSlots(stream)</div>
<div class='slotValue'> Writes all slots to a stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>serializedSlotsWithNames(names, stream)</div>
<div class='slotValue'> Writes selected slots to a stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>setIsActivatable(aValue)</div>
<div class='slotValue'>	When called with a non-Nil aValue, sets the object
	to call its activate slot when accessed as a value. Turns this behavior
	off if aValue is Nil. Only works on Objects which are not Activatable
	Primitives (such as CFunction or Block). Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPpid</div>
<div class='slotValue'>PDB extension to set the value returned by ppid.
</div>
</div>
<div class='slot'>
<div class='slotName'>setProto(anObject)</div>
<div class='slotValue'>	Sets the first proto of the receiver to anObject, replacing the
	current one, if any. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setProtos(aList)</div>
<div class='slotValue'>	Replaces the receiver's protos with a copy of aList. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSlot(slotNameString, valueObject)</div>
<div class='slotValue'>	Sets the slot slotNameString in the receiver to
	hold valueObject. Returns valueObject.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSlotWithType(slotNameString, valueObject)</div>
<div class='slotValue'>	Sets the slot slotNameString in the receiver to
	hold valueObject and sets the type slot of valueObject
	to be slotNameString. Returns valueObject.
</div>
</div>
<div class='slot'>
<div class='slotName'>shallowCopy</div>
<div class='slotValue'>	Returns a shallow copy of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>shouldPersistByDefault</div>
<div class='slotValue'>PDB boolean flag indicating whether this object should be considered for persistence
when persistence has not been specifically requested by calling ppid() or PDB addObjectToPersist.
Always false by default for Object.
</div>
</div>
<div class='slot'>
<div class='slotName'>slotDescriptionMap</div>
<div class='slotValue'>  Returns raw map of slot names and short values' descriptions.
  See also <tt>Object slotSummary</tt>.
</div>
</div>
<div class='slot'>
<div class='slotName'>slotNames</div>
<div class='slotValue'>	Returns a list of strings containing the names of the
	slots in the receiver (but not in its lookup path).
</div>
</div>
<div class='slot'>
<div class='slotName'>slotSummary</div>
<div class='slotValue'>  Returns a formatted <tt>slotDescriptionMap</tt>.
  <br/>
  <pre>
  Io> slotSummary
  ==>  Object_0x30c590:
    Lobby            = Object_0x30c590
    Protos           = Object_0x30c880
    exit             = method(...)
    forward          = method(...)
  </pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>slotValues</div>
<div class='slotValue'>	Returns a list of the values held in the slots of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>stopStatus</div>
<div class='slotValue'>	Returns the internal IoState->stopStatus.
</div>
</div>
<div class='slot'>
<div class='slotName'>super(aMessage)</div>
<div class='slotValue'>	Sends the message aMessage to the receiver's proto with the context of self. Example:
	<pre>
	self test(1, 2)   // performs test(1, 2) on self
	super(test(1, 2)) // performs test(1, 2) on self proto but with the context of self
	</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>switch(<key1>, <expression1>, <key2>, <expression2>, ...)</div>
<div class='slotValue'>	Execute an expression depending on the value of the caller. (This is an equivalent to C switch/case)
	<code>
	hour := Date hour switch(
		12, "midday",
		0, "midnight",
		17, "teatime",
		Date hour asString
	)
	</code>
</div>
</div>
<div class='slot'>
<div class='slotName'>tailCall(expression)</div>
<div class='slotValue'>Does a tailCall on the currently executing Block. Example:
<pre>	
Io> a := method(x, x = x + 1; if(x > 10, return x); tailCall(x))
==> method(x, updateSlot("x", x +(1));
		if(x >(10), return(x));
		tailCall(x))
Io> a(1)
==> 11
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>thisContext</div>
<div class='slotValue'>	Synonym to self.
</div>
</div>
<div class='slot'>
<div class='slotName'>thisLocalContext</div>
<div class='slotValue'>	Returns current locals.
</div>
</div>
<div class='slot'>
<div class='slotName'>thisMessage</div>
<div class='slotValue'>	Returns the calling message (i.e. thisMessage itself, huh).
</div>
</div>
<div class='slot'>
<div class='slotName'>try(code)</div>
<div class='slotValue'>		Executes particular code in a new coroutine.
		Returns exception or nil if no exception is caught.
		<br/>
		See also documentation for Exception catch and pass.
</div>
</div>
<div class='slot'>
<div class='slotName'>type</div>
<div class='slotValue'>	Returns a string containing the name of the type of Object (Number, String, etc).
</div>
</div>
<div class='slot'>
<div class='slotName'>uniqueHexId</div>
<div class='slotValue'>  Returns uniqueId in a hexadecimal form (with a "0x" prefix)
  <pre>
  Io> Object uniqueId
  ==> 3146784
  Io> Object uniqueHexId
  ==> 0x300420
  </pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>uniqueId</div>
<div class='slotValue'>	Returns a Number containing a unique id for the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>unpersist</div>
<div class='slotValue'>PDB extension to populate this object with the data associated with this object's ppid from PDB.
</div>
</div>
<div class='slot'>
<div class='slotName'>updateSlot(slotNameString, valueObject)</div>
<div class='slotValue'>	Same as setSlot(), but raises an error if the slot does not
	already exist in the receiver's slot lookup path.
</div>
</div>
<div class='slot'>
<div class='slotName'>wait(s)</div>
<div class='slotValue'>	Pauses current coroutine for at least <tt>s</tt> seconds.
	<br/>
	Note: current coroutine may wait much longer than designated number of seconds
	depending on circumstances.
</div>
</div>
<div class='slot'>
<div class='slotName'>while(<condition>, expression)</div>
<div class='slotValue'>	Keeps evaluating message until condition return Nil.
	Returns the result of the last message evaluated or Nil if none were evaluated.
</div>
</div>
<div class='slot'>
<div class='slotName'>write(<any number of arguments>)</div>
<div class='slotValue'>	Sends a print message to the evaluated result of each argument. Returns Nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>writeln(<any number of arguments>)</div>
<div class='slotValue'>	Same as write() but also writes a return character at the end. Returns Nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>yield</div>
<div class='slotValue'>	Yields to another coroutine. Does nothing if yieldingCoros queue is empty.
	<br/>
	See Coroutine documentation for more details.
</div>
</div>
</div>
<a name='Core.Profiler'></a>
<div class='class'>
<div class='className'>Profiler</div>
<div class='classDescription'>Basic support for profiling Io code execution.
</div>
<div class='slot'>
<div class='slotName'>reset</div>
<div class='slotValue'>	Resets the profilerTime on all Block objects in the system.
</div>
</div>
<div class='slot'>
<div class='slotName'>timedObjects</div>
<div class='slotValue'>	Returns a list of objects found in the system that have profile times.
</div>
</div>
</div>
<a name='Core.Sandbox'></a>
<div class='class'>
<div class='className'>Sandbox</div>
<div class='classDescription'>Sandbox can be used to run separate instances of Io within the same process.
</div>
<div class='slot'>
<div class='slotName'>doSandboxString(aString)</div>
<div class='slotValue'>	Evaluate aString inside the Sandbox.
</div>
</div>
<div class='slot'>
<div class='slotName'>messageCount</div>
<div class='slotValue'>	Returns a number containing the messageCount limit of the Sandbox.
</div>
</div>
<div class='slot'>
<div class='slotName'>printCallback(string)</div>
<div class='slotValue'> default implementation is; method(string, string print)
</div>
</div>
<div class='slot'>
<div class='slotName'>setMessageCount(anInteger)</div>
<div class='slotValue'>	Sets the messageCount limit of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>setTimeLimit(aDouble)</div>
<div class='slotValue'>	Sets the time limit of the Sandbox.
</div>
</div>
<div class='slot'>
<div class='slotName'>timeLimit</div>
<div class='slotValue'>	Returns a number containing the time limit of calls made to the Sandbox.
</div>
</div>
</div>
<a name='Core.Scheduler'></a>
<div class='class'>
<div class='className'>Scheduler</div>
<div class='classDescription'>Io's coroutine scheduler.
</div>
<div class='slot'>
<div class='slotName'>currentCoroutine</div>
<div class='slotValue'>Returns the currently running coroutine.
</div>
</div>
<div class='slot'>
<div class='slotName'>setTimers(aListOfTimers)</div>
<div class='slotValue'> Sets the list of active timers.
</div>
</div>
<div class='slot'>
<div class='slotName'>setYieldingCoros(aListOfCoros)</div>
<div class='slotValue'> Sets the list of yielding Coroutine objects.
</div>
</div>
<div class='slot'>
<div class='slotName'>timers</div>
<div class='slotValue'>The List of active timers.
</div>
</div>
<div class='slot'>
<div class='slotName'>yieldingCoros</div>
<div class='slotValue'>The List of yielding Coroutine objects.
</div>
</div>
</div>
<a name='Core.Sequence'></a>
<div class='class'>
<div class='className'>Sequence</div>
<div class='classDescription'>A Sequence is a container for a list of data elements. Typically these elements are each 1 byte in size. A Sequence can be either mutable or immutable. When immutable, only the read-only methods can be used.
<p>
Terminology
<ul>
<li> Buffer: A mutable Sequence of single byte elements, typically in a binary encoding
<li> Symbol or String: A unique immutable Sequence, typically in a character encoding
</ul>
</div>
<div class='slot'>
<div class='slotName'>*(aSeq)</div>
<div class='slotValue'>	Multiplies the values of aSeq to the corresponding values of the receiver 
	returning a new vector with the result.
	Only works on Sequences whose item type is numeric.
</div>
</div>
<div class='slot'>
<div class='slotName'>*=(aSeq)</div>
<div class='slotValue'>	Multiplies the values of aSeq to the corresponding values of the receiver.
	Only works on Sequences whose item type is numeric. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>+(aSeq)</div>
<div class='slotValue'>	Vector addition - Adds the values of aSeq to the corresponding values of the receiver 
	returning a new vector with the result.
	Only works on Sequences whose item type is numeric.
</div>
</div>
<div class='slot'>
<div class='slotName'>+=(aSeq)</div>
<div class='slotValue'>	Vector addition - adds the values of aSeq to those of the receiver.
	Only works on Sequences whose item type is numeric. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>-=(aSeq)</div>
<div class='slotValue'>	Vector subtraction - subtracts the values of aSeq to those of the receiver.
	Only works on Sequences whose item type is numeric. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>..(aSequence)</div>
<div class='slotValue'>	Returns a copy of the receiver with aSequence appended to it.
</div>
</div>
<div class='slot'>
<div class='slotName'>/(aSeq)</div>
<div class='slotValue'>	Divides the values of aSeq to the corresponding values of the receiver 
	returning a new vector with the result.
	Only works on Sequences whose item type is numeric.
</div>
</div>
<div class='slot'>
<div class='slotName'>/=(aSeq)</div>
<div class='slotValue'>	Divides the values of aSeq to the corresponding values of the receiver.
	Only works on Sequences whose item type is numeric. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>Max</div>
<div class='slotValue'>Returns the maximum value in the sequence.
</div>
</div>
<div class='slot'>
<div class='slotName'>Min</div>
<div class='slotValue'>Returns the minimum value in the sequence.
</div>
</div>
<div class='slot'>
<div class='slotName'>abs</div>
<div class='slotValue'>Sets each value of the Sequence to its absolute value.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>acos</div>
<div class='slotValue'>Sets each value of the Sequence to the trigonometric arcsine of it's value.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>afterSeq(aSequence)</div>
<div class='slotValue'>	Returns the slice of the receiver (as a Symbol) after aSequence or
	nil if aSequence is not found. If aSequence is empty, the receiver
	(or a copy of the receiver if it is mutable) is returned.
</div>
</div>
<div class='slot'>
<div class='slotName'>alignCenter(width, [padding]) ""</div>
<div class='slotValue'>	Example:
	<code>
	Io> "abc" alignCenter(10, "-")
	==> ---abc----
	Io> "abc" alignCenter(10, "-=")
	==> -=-abc-=-=
	</code>
</div>
</div>
<div class='slot'>
<div class='slotName'>alignLeft(width, [padding])</div>
<div class='slotValue'>	Example:
	<p>
	<code>
	Io> "abc" alignLeft(10, "+")
	==> abc+++++++
	Io> "abc" alignLeft(10, "-=")
	==> abc-=-=-=-
	</code>
</div>
</div>
<div class='slot'>
<div class='slotName'>alignLeftInPlace(width, [padding])</div>
<div class='slotValue'> Same as align left but operation is performed on the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>alignRight(width, [padding])</div>
<div class='slotValue'>	Example:
	<p>
	<code>
	Io> "abc" alignRight(10, "-")
	==> -------abc
	Io> "abc" alignRight(10, "-=")
	==> -=-=-=-abc
	</code>
</div>
</div>
<div class='slot'>
<div class='slotName'>allMatchesOfRegex(aRegexOrString)</div>
<div class='slotValue'>		Returns a List containing all matches of the given regex found in the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>append(aNumber)</div>
<div class='slotValue'>	Appends aNumber (cast to a byte) to the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>appendPathSeq(aSeq)</div>
<div class='slotValue'>	Appends argument to the receiver such that there is one
	and only one path separator between the two. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>appendSeq(object1, object2, ...)</div>
<div class='slotValue'>	Calls asString on the arguments and appends the string to the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>asBase64(optionalCharactersPerLine)</div>
<div class='slotValue'>	Returns an immutable, base64 encoded (according to RFC 1421) version of self. 
	optionalCharactersPerLine describes the number of characters between line breaks and defaults to 0.
</div>
</div>
<div class='slot'>
<div class='slotName'>asBinaryNumber</div>
<div class='slotValue'>	Returns a Number containing the first 8 bytes of the
	receiver without casting them to a double. Endian is same as machine.
</div>
</div>
<div class='slot'>
<div class='slotName'>asBinarySignedInteger</div>
<div class='slotValue'>	Returns a Number with the bytes of the receiver interpreted as a binary signed integer. Endian is same as machine.
</div>
</div>
<div class='slot'>
<div class='slotName'>asBinaryUnsignedInteger</div>
<div class='slotValue'>	Returns a Number with the bytes of the receiver interpreted as a binary unsigned integer. Endian is same as machine.
</div>
</div>
<div class='slot'>
<div class='slotName'>asCapitalized</div>
<div class='slotValue'>	Returns a copy of the receiver with the first charater made uppercase.
</div>
</div>
<div class='slot'>
<div class='slotName'>asFile</div>
<div class='slotValue'>Returns a new File object with the receiver as its path.
</div>
</div>
<div class='slot'>
<div class='slotName'>asFixedSizeType</div>
<div class='slotValue'>	Returns a new sequence with the receiver encoded in the 
	minimal fixed width text encoding that its characters can fit 
	into (either, ascii, utf8, utf16 or utf32).
</div>
</div>
<div class='slot'>
<div class='slotName'>asHTML</div>
<div class='slotValue'>SGML extension to interpret the Sequence as HTML and return an SGML object using SGMLParser elementForString
</div>
</div>
<div class='slot'>
<div class='slotName'>asHex</div>
<div class='slotValue'>Returns a hex string for the receiving sequence, e.g., \"abc\" asHex -> \"616263\".")
</div>
</div>
<div class='slot'>
<div class='slotName'>asIoPath</div>
<div class='slotValue'>Returns a Io style path for an OS style path.
</div>
</div>
<div class='slot'>
<div class='slotName'>asJid</div>
<div class='slotValue'>Converts Sequence to JID object. <pre><code>"cow@moo.com/Scandinavia" asJid</code></pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>asJson</div>
<div class='slotValue'>Converts to form that could be interpreted as json if it already contains json, e.g. {"aaa":"bbb"} --> "{\"aaa\":\"bbb\"}"
</div>
</div>
<div class='slot'>
<div class='slotName'>asLowercase</div>
<div class='slotValue'>	Returns a symbol containing the reveiver made lowercase.
</div>
</div>
<div class='slot'>
<div class='slotName'>asMessage(optionalLabel)</div>
<div class='slotValue'>	Returns the compiled message object for the string.
</div>
</div>
<div class='slot'>
<div class='slotName'>asMutable</div>
<div class='slotValue'>	Returns a mutable copy of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>asNumber</div>
<div class='slotValue'>	Returns the receiver converted to a number.
	Initial whitespace is ignored.
</div>
</div>
<div class='slot'>
<div class='slotName'>asOSPath</div>
<div class='slotValue'>Returns a OS style path for an Io style path.
</div>
</div>
<div class='slot'>
<div class='slotName'>asRegex</div>
<div class='slotValue'>		Returns a new Regex created from the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>asSGML</div>
<div class='slotValue'>SGML extension to interpret the Sequence as SGML and return an SGML object using SGMLParser elementForString
</div>
</div>
<div class='slot'>
<div class='slotName'>asStruct(memberList)</div>
<div class='slotValue'>For a sequence that contains the data for a raw memory data structure (as used in C),
this method can be used to extract its members into an Object. The memberList argument
specifies the layout of the datastructure. Its form is:
<p>
list(memberType1, memberName1, memberType2, memberName2, ...)
<p>
Member types include: 
<pre>
int8, int16, int32, int64
uint8, uint16, uint32, uint64
float32, float64 
</pre>
Example:
<pre>
pointObject := structPointSeq asStruct(list("float32", "x", "float32", "y"))
</pre>
The output pointObject would contain x and y slots with Number objects.
</div>
</div>
<div class='slot'>
<div class='slotName'>asSymbol</div>
<div class='slotValue'>	Returns a immutable Sequence (aka Symbol) version of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>asUCS2</div>
<div class='slotValue'>	Returns a new copy of the receiver converted to UCS2 (fixed character width UTF16) encoding.
</div>
</div>
<div class='slot'>
<div class='slotName'>asUCS4</div>
<div class='slotValue'>	Returns a new copy of the receiver converted to UCS4 (fixed character width UTF32) encoding.
</div>
</div>
<div class='slot'>
<div class='slotName'>asURL</div>
<div class='slotValue'>Returns a new URL object instance with the receiver as its url string.
</div>
</div>
<div class='slot'>
<div class='slotName'>asUTF8</div>
<div class='slotValue'>	Returns a new copy of the receiver converted to utf8 encoding.
</div>
</div>
<div class='slot'>
<div class='slotName'>asUppercase</div>
<div class='slotValue'>	Returns a symbol containing the reveiver made uppercase.
</div>
</div>
<div class='slot'>
<div class='slotName'>asUrl</div>
<div class='slotValue'>Shortcut for HCUrl with(aUrlSeq)
</div>
</div>
<div class='slot'>
<div class='slotName'>asXML</div>
<div class='slotValue'>SGML extension to interpret the Sequence as XML and return an SGML object using SGMLParser elementForString
</div>
</div>
<div class='slot'>
<div class='slotName'>asin</div>
<div class='slotValue'>Sets each value of the Sequence to the trigonometric arcsine of it's value.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>at(aNumber)</div>
<div class='slotValue'>	Returns a value at the index specified by aNumber.
	Returns nil if the index is out of bounds.
</div>
</div>
<div class='slot'>
<div class='slotName'>atInsertSeq(indexNumber, object)</div>
<div class='slotValue'>	Calls asString on object and inserts the string at position indexNumber. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>atPut(aNumberIndex, aNumber)</div>
<div class='slotValue'>	Sets the value at the index specified by aNumberIndex to aNumber. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>atan</div>
<div class='slotValue'>Sets each value of the Sequence to the trigonometric arctangent of it's value.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>beforeSeq(aSequence)</div>
<div class='slotValue'>	Returns the slice of the receiver (as a Symbol) before
	aSequence or self if aSequence is not found.
</div>
</div>
<div class='slot'>
<div class='slotName'>beginsWithSeq(aSequence)</div>
<div class='slotValue'>	Returns true if the receiver begins with aSequence, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>betweenSeq(aSequence, anotherSequence)</div>
<div class='slotValue'>	Returns a new Sequence containing the bytes between the
	occurrence of aSequence and anotherSequence in the receiver. 
	If aSequence is empty, this method is equivalent to beforeSeq(anotherSequence).
	If anotherSequence is nil, this method is equivalent to afterSeq(aSequence).
	nil is returned if no match is found.
</div>
</div>
<div class='slot'>
<div class='slotName'>bitAt(bitIndex)</div>
<div class='slotValue'>Returns a Number containing the bit at the bit index value.
</div>
</div>
<div class='slot'>
<div class='slotName'>bitCount</div>
<div class='slotValue'>Returns the number of bits in the sequence.
</div>
</div>
<div class='slot'>
<div class='slotName'>bitwiseAnd(aSequence)</div>
<div class='slotValue'>Updates the receiver to be the result of a bitwiseAnd with aSequence. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>bitwiseNot(aSequence)</div>
<div class='slotValue'>Updates the receiver to be the result of a bitwiseNot with aSequence. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>bitwiseOr(aSequence)</div>
<div class='slotValue'>Updates the receiver to be the result of a bitwiseOr with aSequence. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>bitwiseXor(aSequence)</div>
<div class='slotValue'>Updates the receiver to be the result of a bitwiseXor with aSequence. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>byteAt(byteIndex)</div>
<div class='slotValue'>Returns a Number containing the byte at the byte index value.
</div>
</div>
<div class='slot'>
<div class='slotName'>capitalize</div>
<div class='slotValue'>	First charater of the receiver is made uppercase.
</div>
</div>
<div class='slot'>
<div class='slotName'>ceil</div>
<div class='slotValue'>Round each value to smallest integral value not less than x.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>clear</div>
<div class='slotValue'>Set all values in the sequence to 0. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>clipAfterSeq(aSequence)</div>
<div class='slotValue'>	Removes the contents of the receiver after the end of
	the first occurance of aSequence. Returns true if anything was
	removed, or false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>clipAfterStartOfSeq(aSequence)</div>
<div class='slotValue'>	Removes the contents of the receiver after the beginning of
	the first occurance of aSequence. Returns true if anything was
	removed, or false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>clipBeforeEndOfSeq(aSequence)</div>
<div class='slotValue'>	Removes the contents of the receiver before the end of
	the first occurance of aSequence. Returns true if anything was
	removed, or false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>clipBeforeSeq(aSequence)</div>
<div class='slotValue'>	Clips receiver before aSequence.
</div>
</div>
<div class='slot'>
<div class='slotName'>cloneAppendPath(aSequence)</div>
<div class='slotValue'>	Appends argument to a copy the receiver such that there is one
	and only one path separator between the two and returns the result.
</div>
</div>
<div class='slot'>
<div class='slotName'>contains(aNumber)</div>
<div class='slotValue'>	Returns true if the receiver contains an element equal in value to aNumber, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>containsAnyCaseSeq(aSequence)</div>
<div class='slotValue'>	Returns true if the receiver contains the aSequence
	regardless of casing, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>containsSeq(aSequence)</div>
<div class='slotValue'>	Returns true if the receiver contains the substring
	aSequence, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>convertToItemType(aTypeName)</div>
<div class='slotValue'>	Converts the underlying machine type for the elements, expanding or contracting
	the size of the Sequence as needed. 
	Valid names are uint8, uint16, uint32, uint64, int8, int16, int32, 
	int64, float32, and float64. Note that 64 bit types are only available 
	on platforms that support such types. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>copy(aSequence)</div>
<div class='slotValue'>	Replaces the bytes of the receiver with a copy of those in aSequence. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>cos</div>
<div class='slotValue'>Sets each value of the Sequence to the trigonometric cosine of it's value.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>cosh</div>
<div class='slotValue'>Sets each value of the Sequence to the hyperbolic cosine of its value.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>distanceTo(aSeq)</div>
<div class='slotValue'>	Returns a number with the square root of the sum of the square 
	of the differences of the items between the sequences.
</div>
</div>
<div class='slot'>
<div class='slotName'>dotProduct(aSeq)</div>
<div class='slotValue'>	Returns a new Sequence containing the dot product of the receiver with aSeq.
</div>
</div>
<div class='slot'>
<div class='slotName'>duplicateIndexes</div>
<div class='slotValue'>Duplicates all indexes in the receiver.
For example, list(1,2,3) duplicateIndexes == list(1,1,2,2,3,3). Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>empty</div>
<div class='slotValue'>	Sets all bytes in the receiver to 0x0 and sets
	its length to 0. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>encoding</div>
<div class='slotValue'>	Returns the encoding of the elements.
</div>
</div>
<div class='slot'>
<div class='slotName'>endsWithSeq(aSequence)</div>
<div class='slotValue'>	Returns true if the receiver ends with aSequence, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>escape</div>
<div class='slotValue'>	Escape characters in the receiver are replaced with escape codes.
	For example a string containing a single return character would contain the
	following 2 characters after being escaped: "\n". Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>escapeRegexChars</div>
<div class='slotValue'>		Returns a clone of the receiver with all special regular expression characters
		("^", "$", etc) backslashed. Useful if you have a string that contains such characters,
		but want it to be treated as a literal string.
</div>
</div>
<div class='slot'>
<div class='slotName'>exclusiveSlice(inclusiveStartIndex, exclusiveEndIndex)</div>
<div class='slotValue'>	Returns a new string containing the subset of the
	receiver from the inclusiveStartIndex to the exclusiveEndIndex. The exclusiveEndIndex argument
	is optional. If not given, it is assumed to be one beyond the end of the string.
</div>
</div>
<div class='slot'>
<div class='slotName'>exp</div>
<div class='slotValue'>Sets each value of the Sequence to e**value.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>fileName</div>
<div class='slotValue'>	Returns the last path component sans the path extension.
</div>
</div>
<div class='slot'>
<div class='slotName'>findNthSeq(aSequence, n)</div>
<div class='slotValue'> Returns a number with the nth occurence of aSequence.
</div>
</div>
<div class='slot'>
<div class='slotName'>findRegex(aRegexOrString, [startIndex])</div>
<div class='slotValue'>		Returns the first match of the given regex in the receiver, after the given start index.
		If you don't specify a start index, the search will start at the beginning of the receiver.
		The method returns nil if no match is found.
</div>
</div>
<div class='slot'>
<div class='slotName'>findSeq(aSequence, optionalStartIndex)</div>
<div class='slotValue'>	Returns a number with the first occurrence of aSequence in
	the receiver after the startIndex. If no startIndex is specified,
	the search starts at index 0.
	nil is returned if no occurences are found.
</div>
</div>
<div class='slot'>
<div class='slotName'>findSeqs(listOfSequences, optionalStartIndex)</div>
<div class='slotValue'>	Returns an object with two slots - an \"index\" slot which contains 
	the first occurrence of any of the sequences in listOfSequences found 
	in the receiver after the startIndex, and a \"match\" slot, which 
	contains a reference to the matching sequence from listOfSequences. 
	If no startIndex is specified, the search starts at index 0. 
	nil is returned if no occurences are found.
</div>
</div>
<div class='slot'>
<div class='slotName'>floor</div>
<div class='slotValue'>Round each value to largest integral value not greater than x.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>foreach(optionalIndex, value, message)</div>
<div class='slotValue'>For each element, set index to the index of the
element and value to the element value and execute message. 
Example:
<pre>	
aSequence foreach(i, v, writeln("value at index ", i, " is ", v))
aSequence foreach(v, writeln("value ", v))
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>fromBase(aNumber)</div>
<div class='slotValue'>	Returns a number with a base 10 representation of the receiver
	converted from the specified base. Only base 2 through 32 are currently supported.
</div>
</div>
<div class='slot'>
<div class='slotName'>fromBase64</div>
<div class='slotValue'>	Returns an immutable, base64 decoded (according to RFC 1421) version of self.
</div>
</div>
<div class='slot'>
<div class='slotName'>greaterThan(aSeq)</div>
<div class='slotValue'>	Returns true if the receiver is greater than aSeq, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>greaterThanOrEqualTo(aSeq)</div>
<div class='slotValue'>	Returns true if the receiver is greater than or equal to aSeq, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>hasMatchOfRegex(aRegexOrString)</div>
<div class='slotValue'>		Returns true if the string contains one or more matches of the given regex.
</div>
</div>
<div class='slot'>
<div class='slotName'>hash</div>
<div class='slotValue'>Returns a Number containing a hash of the Sequence.
</div>
</div>
<div class='slot'>
<div class='slotName'>inclusiveSlice(inclusiveStartIndex, inclusiveEndIndex)</div>
<div class='slotValue'>	Returns a new string containing the subset of the
	receiver from the inclusiveStartIndex to the inclusiveEndIndex. The inclusiveEndIndex argument
	is optional. If not given, it is assumed to be the end of the string.
</div>
</div>
<div class='slot'>
<div class='slotName'>interpolate(ctx)</div>
<div class='slotValue'>	Returns immutable copy of self with interpolateInPlace(ctx) passed to the copy.
</div>
</div>
<div class='slot'>
<div class='slotName'>interpolateInPlace(optionalContext)</div>
<div class='slotValue'>	Replaces all #{expression} with expression evaluated in the optionalContext. 
	If optionalContext not given, the current context is used.  Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>isEmpty</div>
<div class='slotValue'>	Returns true if the size of the receiver is 0, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isEqualAnyCase(aSequence)</div>
<div class='slotValue'>	Returns true if aSequence is equal to the receiver
	ignoring case differences, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isLowercase</div>
<div class='slotValue'>	Returns self if all the characters in the string are lower case.
</div>
</div>
<div class='slot'>
<div class='slotName'>isMutable</div>
<div class='slotValue'>	Returns true if the receiver is a mutable Sequence or false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isSymbol</div>
<div class='slotValue'>	Returns true if the receiver is a
	immutable Sequence (aka, a Symbol) or false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isUppercase</div>
<div class='slotValue'>	Returns self if all the characters in the string are upper case.
</div>
</div>
<div class='slot'>
<div class='slotName'>isZero</div>
<div class='slotValue'>	Returns true if all elements are 0, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>itemCopy</div>
<div class='slotValue'>Returns a new sequence containing the items from the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>itemSize</div>
<div class='slotValue'>	Returns number of bytes in each element.
</div>
</div>
<div class='slot'>
<div class='slotName'>itemType</div>
<div class='slotValue'>	Returns machine type of elements.
</div>
</div>
<div class='slot'>
<div class='slotName'>justSerialized(stream)</div>
<div class='slotValue'> Writes the receiver's code into the stream.
</div>
</div>
<div class='slot'>
<div class='slotName'>lastPathComponent</div>
<div class='slotValue'>	Returns a string containing the receiver clipped up
	to the last path separator.
</div>
</div>
<div class='slot'>
<div class='slotName'>lessThan(aSeq)</div>
<div class='slotValue'>	Returns true if the receiver is less than aSeq, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>lessThanOrEqualTo(aSeq)</div>
<div class='slotValue'>	Returns true if the receiver is less than or equal to aSeq, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>linePrint</div>
<div class='slotValue'>	Prints the Sequence and a newline character.
</div>
</div>
<div class='slot'>
<div class='slotName'>log</div>
<div class='slotValue'>Sets each value of the Sequence to the natural log of its value.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>log10</div>
<div class='slotValue'>Sets each value of the Sequence to the base 10 log of its value.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>logicalAnd(aSequence)</div>
<div class='slotValue'>Updates the receiver's values to be the result of a logical OR operations with the values of aSequence. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>logicalOr(aSequence)</div>
<div class='slotValue'>Updates the receiver's values to be the result of a logical OR operations with the values of aSequence. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>lowercase</div>
<div class='slotValue'>	Makes all the uppercase characters in the receiver lowercase. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>lstrip(aSequence)</div>
<div class='slotValue'>Strips the characters in aSequence
stripped from the beginning of the receiver. Example:
<p>
<pre>	
"Keep the tail" lstrip(" eKp")
==> "the tail"
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>makeFirstCharacterLowercase</div>
<div class='slotValue'>  Receiver must be mutable (see also asMutable). Returns receiver.
  <br/>
  <pre>
  Io> "ABC" asMutable makeFirstCharacterLowercase
  ==> aBC
  </pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>makeFirstCharacterUppercase</div>
<div class='slotValue'>  Receiver must be mutable (see also asMutable). Returns receiver.
  <br/>
  <pre>
  Io> "abc" asMutable makeFirstCharacterUppercase
  ==> Abc
  </pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>matchesOfRegex(aRegexOrString)</div>
<div class='slotValue'>		Returns a RegexMatches object that enumerates all matches of the given regex in the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>matchesRegex(aRegexOrString)</div>
<div class='slotValue'>		Returns true if the receiver matches the given regex, false if not.
</div>
</div>
<div class='slot'>
<div class='slotName'>max</div>
<div class='slotValue'>Returns the maximum value of the Sequence.
</div>
</div>
<div class='slot'>
<div class='slotName'>mean</div>
<div class='slotValue'>Returns the arithmetic mean of the sequence.
</div>
</div>
<div class='slot'>
<div class='slotName'>meanSquare</div>
<div class='slotValue'>Returns the arithmetic mean of the sequence's values after they have been squared.
</div>
</div>
<div class='slot'>
<div class='slotName'>min</div>
<div class='slotValue'>Returns the minimum value of the Sequence.
</div>
</div>
<div class='slot'>
<div class='slotName'>negate</div>
<div class='slotValue'>Negates the values of the receiver.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>normalize</div>
<div class='slotValue'>Divides each value of the Sequence by the max value of the sequence.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>occurancesOfSeq(aSeq)</div>
<div class='slotValue'>	Returns count of aSeq in the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>pathComponent</div>
<div class='slotValue'>	Returns a slice of the receiver before the last path separator as a symbol.
</div>
</div>
<div class='slot'>
<div class='slotName'>pathExtension</div>
<div class='slotValue'>	Returns a string containing the receiver clipped up to the last period.
</div>
</div>
<div class='slot'>
<div class='slotName'>preallocateToSize(aNumber)</div>
<div class='slotValue'>	If needed, resize the memory alloced for the receivers
	byte array to be large enough to fit the number of bytes specified by
	aNumber. This is useful for pio_reallocating the memory so it doesn't
	keep getting allocated as the Sequence is appended to. This operation
	will not change the Sequence's length or contents. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>prependSeq(object1, object2, ...)</div>
<div class='slotValue'> Prepends given objects asString in reverse order to the receiver.  Returns self.")
</div>
</div>
<div class='slot'>
<div class='slotName'>print</div>
<div class='slotValue'>Prints contents of a sequence.
</div>
</div>
<div class='slot'>
<div class='slotName'>product</div>
<div class='slotValue'>Returns the product of all the sequence's values multipled together.
</div>
</div>
<div class='slot'>
<div class='slotName'>rangeFill</div>
<div class='slotValue'>Sets the values of the Sequence to their index values.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeAt(index)</div>
<div class='slotValue'>	Removes the item at index. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeEvenIndexes</div>
<div class='slotValue'>Removes even indexes in the receiver.
For example, list(1,2,3) removeEvenIndexes == list(1, 3). Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeLast</div>
<div class='slotValue'>	Removes the last element from the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeOddIndexes</div>
<div class='slotValue'>Removes odd indexes in the receiver.
For example, list(1,2,3) removeOddIndexes == list(2). Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>removePrefix(aSequence)</div>
<div class='slotValue'>	If the receiver begins with aSequence, it is removed. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeSeq(aSequence)</div>
<div class='slotValue'>	Removes occurances of aSequence from the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeSlice(startIndex, endIndex)</div>
<div class='slotValue'>	Removes the items from startIndex to endIndex.
	Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeSuffix(aSequence)</div>
<div class='slotValue'>	If the receiver end with aSequence, it is removed. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>repeated(n)</div>
<div class='slotValue'> Returns a new sequence containing the receiver repeated n number of times.
</div>
</div>
<div class='slot'>
<div class='slotName'>replaceFirstSeq(aSequence, anotherSequence, optionalStartIndex)</div>
<div class='slotValue'>	Returns a new Sequence with the first occurance of aSequence
	replaced with anotherSequence in the receiver. If optionalStartIndex is
	provided, the search for aSequence begins at that index. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>replaceMap(aMap)</div>
<div class='slotValue'>	In the receiver, the keys of aMap replaced with its values. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>replaceSeq(aSequence, anotherSequence)</div>
<div class='slotValue'>	Returns a new Sequence with all occurances of aSequence
	replaced with anotherSequence in the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>reverse</div>
<div class='slotValue'>Reverses the ordering of all the items of the receiver. Returns copy of receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>reverseFindSeq(aSequence, startIndex)</div>
<div class='slotValue'>	Returns a number with the first occurrence of aSequence in
	the receiver before the startIndex. The startIndex argument is optional.
	By default reverseFind starts at the end of the string. Nil is
	returned if no occurrences are found.
</div>
</div>
<div class='slot'>
<div class='slotName'>reverseInPlace</div>
<div class='slotValue'>	Reverses the bytes in the receiver, in-place.
</div>
</div>
<div class='slot'>
<div class='slotName'>rstrip(aSequence)</div>
<div class='slotValue'>Strips the characters in
aSequence stripped from the end of the receiver. Example:
<pre>	
"Cut the tail off" rstrip(" afilot")
==> "Cut the"
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>set(aNumber1, aNumber2, ...)</div>
<div class='slotValue'>	Sets the values of the receiver to the sequences of numbers in the arguments.
	Unset values will remain unchanged.
	Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setEncoding(encodingName)</div>
<div class='slotValue'>	Sets the encoding flag of the receiver (only the encoding flag, 
	itemSize and itemType will change, no conversion is done between UTF
	encodings - you can use convertToUTF8, etc methods for conversions). 
	Valid encodings are number, utf8, utf16, and utf32. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setItemType(aTypeName)</div>
<div class='slotValue'>	Sets the underlying machine type for the elements. 
	Valid names are uint8, uint16, uint32, uint64, int8, int16, int32, 
	int64, float32, and float64. Note that 64 bit types are only available 
	on platforms that support such types. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setItemsToDouble(aNumber)</div>
<div class='slotValue'>	Sets all items in the Sequence to the double floating point value of aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>setItemsToLong(aNumber)</div>
<div class='slotValue'>	Sets all items in the Sequence to the long integer value of aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSize(aNumber)</div>
<div class='slotValue'>	Sets the length in bytes of the receiver to aNumber. Return self.
</div>
</div>
<div class='slot'>
<div class='slotName'>sin</div>
<div class='slotValue'>Sets each value of the Sequence to the trigonometric sine of it's value.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>sinh</div>
<div class='slotValue'>Sets each value of the Sequence to the hyperbolic sine of its value.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>size</div>
<div class='slotValue'>Returns the length in number of items (which may or may not
be the number of bytes, depending on the item type) of the receiver. For example,
<p>
<pre>	
"abc" size == 3
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>sizeInBytes</div>
<div class='slotValue'>	Returns the length in bytes of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>slice</div>
<div class='slotValue'>Deprecated method. Use exSlice instead.
</div>
</div>
<div class='slot'>
<div class='slotName'>slicesBetween(startSeq, endSeq)</div>
<div class='slotValue'>  Returns a list of slices delimited 
  by <tt>startSeq</tt> and <tt>endSeq</tt>.
  <br>
  <pre>
  Io> "<a><b></b></a>" slicesBetween("<", ">")
  ==> list("a", "b", "/b", "/a")
  </pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>sort</div>
<div class='slotValue'>Sorts the characters/numbers in the array. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>split Returns a list containing the sub-sequences of the receiver divided by the given arguments.</div>
<div class='slotValue'>		If no arguments are given the sequence is split on white space.
</div>
</div>
<div class='slot'>
<div class='slotName'>split(optionalArg1, optionalArg2, ...)</div>
<div class='slotValue'>Returns a list containing the sub-sequences of the receiver divided by the given arguments.
If no arguments are given the sequence is split on white space.
Examples:
<pre>	
"a b c d" split == list("a", "b", "c", "d")
"a*b*c*d" split("*") == list("a", "b", "c", "d")
"a*b|c,d" split("*", "|", ",") == list("a", "b", "c", "d")
"a   b  c d" split == list("a", "", "", "", "b", "", "", "c", "", "d")
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>splitAt(indexNumber)</div>
<div class='slotValue'>	Returns a list containing the two parts of the receiver as split at the given index.
</div>
</div>
<div class='slot'>
<div class='slotName'>splitAtRegex(aRegexOrString)</div>
<div class='slotValue'>		Splits the receiver into pieces using the given regex as the delimiter and
		returns the pieces as a list of strings.
</div>
</div>
<div class='slot'>
<div class='slotName'>splitNoEmpties(optionalArg1, optionalArg2, ...)</div>
<div class='slotValue'>		Returns a list containing the non-empty sub-sequences of the receiver divided by the given arguments.
		If no arguments are given the sequence is split on white space.
		Examples:
		<code>
		"a   b  c d" splitNoEmpties => list("a", "b", "c", "d")
		"a***b**c*d" splitNoEmpties("*") => list("a", "b", "c", "d")
		"a***b||c,d" splitNoEmpties("*", "|", ",") => list("a", "b", "c", "d")
		</code>
</div>
</div>
<div class='slot'>
<div class='slotName'>sqrt</div>
<div class='slotValue'>Sets each value of the Sequence to the square root of its value.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>square</div>
<div class='slotValue'>Sets each value of the Sequence to the square of its value.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>strip(optionalSequence)</div>
<div class='slotValue'>Trims the whitespace (or optionalSequence) off both ends:
<p>
<pre>	
"   Trim this string   \r\n" strip
==> "Trim this string"
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>sum</div>
<div class='slotValue'>Returns the sum of the Sequence.
</div>
</div>
<div class='slot'>
<div class='slotName'>tan</div>
<div class='slotValue'>Sets each value of the Sequence to the trigonometric tangent of it's value.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>tanh</div>
<div class='slotValue'>Sets each value of the Sequence to the hyperbolic tangent of its value.
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>toBase(aNumber)</div>
<div class='slotValue'>	Returns a Sequence containing the receiver (which is
	assumed to be a base 10 number) converted to the specified base.
	Only base 8 and 16 are currently supported.
</div>
</div>
<div class='slot'>
<div class='slotName'>translate(fromChars, toChars)</div>
<div class='slotValue'>	In the receiver, the characters in fromChars are replaced with those in the same positions in toChars. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>unescape</div>
<div class='slotValue'>	Escape codes replaced with escape characters. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>uppercase</div>
<div class='slotValue'>	Makes all characters of the receiver uppercase.
</div>
</div>
<div class='slot'>
<div class='slotName'>whiteSpaceStrings</div>
<div class='slotValue'>	Returns a List of strings. Each string contains a different
	whitespace character.
</div>
</div>
<div class='slot'>
<div class='slotName'>with(aSequence, ...)</div>
<div class='slotValue'>	Returns a new Sequence which is the concatination of the arguments.
	The returned sequence will have the same mutability status as the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>withStruct(memberList)</div>
<div class='slotValue'>This method is useful for producing a Sequence containing a raw datastructure with
the specified types and values. The memberList format is:
<p>
list(memberType1, memberName1, memberType2, memberName2, ...)
<p>
Member types include: 
<pre>
int8, int16, int32, int64
uint8, uint16, uint32, uint64
float32, float64 
</pre>
Example:
<pre>
pointStructSeq := Sequence withStruct(list("float32", 1.2, "float32", 3.5))
</pre>
The output pointStructSeq would contain 2 raw 32 bit floats.
</div>
</div>
</div>
<a name='Core.System'></a>
<div class='class'>
<div class='className'>System</div>
<div class='classDescription'>Contains methods related to the IoVM.
</div>
<div class='slot'>
<div class='slotName'>activeCpus</div>
<div class='slotValue'>	Returns the number of active CPUs.
</div>
</div>
<div class='slot'>
<div class='slotName'>args</div>
<div class='slotValue'>	Returns the list of command line argument strings the program was run with.")
</div>
</div>
<div class='slot'>
<div class='slotName'>daemon(dontChroot, dontRedirectOutputStreams)</div>
<div class='slotValue'>	Become a daemon process.  If dontChroot is false, the process will change its directory to /.  If dontRedirectOutputStreams is false, stdout and stderr are redirected to /dev/null.
</div>
</div>
<div class='slot'>
<div class='slotName'>distribution</div>
<div class='slotValue'>	Returns the Io distribution name as a string.
</div>
</div>
<div class='slot'>
<div class='slotName'>errorNumber</div>
<div class='slotValue'>	Returns the C errno string.
</div>
</div>
<div class='slot'>
<div class='slotName'>exit(optionalReturnCodeNumber)</div>
<div class='slotValue'>	Shutdown the IoState (io_free all objects) and return
control to the calling program (if any).
</div>
</div>
<div class='slot'>
<div class='slotName'>getEnvironmentVariable(nameString)</div>
<div class='slotValue'>	Returns a string with the value of the environment 
	variable whose name is specified by nameString.
</div>
</div>
<div class='slot'>
<div class='slotName'>getOptions(args)</div>
<div class='slotValue'>	This primitive is used to get command line options similar to Cs getopt().
	It returns a map in containing the left side of the argument, with the
	value of the right side. (The key will not contain
	the beginning dashes (--).
	<p>
	Example:
	<pre>
	options := System getOptions(args)
	options foreach(k, v,
	  if(v type == List type,
		v foreach(i, j, writeln(\"Got unnamed argument with value: \" .. j))
		continue
	  )
	  writeln(\"Got option: \" .. k .. \" with value: \" .. v)
	)
	</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>installPrefix</div>
<div class='slotValue'>	Returns the root path where io was installed. The default is /usr/local.
</div>
</div>
<div class='slot'>
<div class='slotName'>ioPath</div>
<div class='slotValue'>Returns the path of io installation. The default is $INSTALL_PREFIX/lib/io.
</div>
</div>
<div class='slot'>
<div class='slotName'>launchPath</div>
<div class='slotValue'>Returns a pathComponent of the launch file.
</div>
</div>
<div class='slot'>
<div class='slotName'>launchScript</div>
<div class='slotValue'>Returns the path of the io file run on the command line. Returns nil if no file was run.
</div>
</div>
<div class='slot'>
<div class='slotName'>maxRecycledObjects</div>
<div class='slotValue'>	Returns the max number of recycled objects used.
</div>
</div>
<div class='slot'>
<div class='slotName'>platform</div>
<div class='slotValue'>	Returns a string description of the platform.
</div>
</div>
<div class='slot'>
<div class='slotName'>platformVersion</div>
<div class='slotValue'>	Returns the version id of the OS.
</div>
</div>
<div class='slot'>
<div class='slotName'>recycledObjectCount</div>
<div class='slotValue'>	Returns the current number of objects being held for recycling.
</div>
</div>
<div class='slot'>
<div class='slotName'>runCommand</div>
<div class='slotValue'>Calls system and redirects stdout/err to tmp files.  Returns object with exitStatus, stdout and stderr slots.
</div>
</div>
<div class='slot'>
<div class='slotName'>setEnvironmentVariable(keyString, valueString)</div>
<div class='slotValue'>	Sets the environment variable keyString to the value valueString.
</div>
</div>
<div class='slot'>
<div class='slotName'>setLobby(anObject)</div>
<div class='slotValue'>	Sets the root object of the garbage collector.
</div>
</div>
<div class='slot'>
<div class='slotName'>setMaxRecycledObjects(aNumber)</div>
<div class='slotValue'>	Sets the max number of recycled objects used.
</div>
</div>
<div class='slot'>
<div class='slotName'>sleep(secondsNumber)</div>
<div class='slotValue'>	Performs a *blocking* sleep call for specified number of seconds.
</div>
</div>
<div class='slot'>
<div class='slotName'>symbols</div>
<div class='slotValue'>	Returns a List containing all Symbols currently in the system.
</div>
</div>
<div class='slot'>
<div class='slotName'>system(aString)</div>
<div class='slotValue'>	Makes a system call and returns a Number for the return value.
</div>
</div>
<div class='slot'>
<div class='slotName'>thisProcessPid()</div>
<div class='slotValue'>	Return the process id (pid) for this Io process.
</div>
</div>
<div class='slot'>
<div class='slotName'>userInterruptHandler</div>
<div class='slotValue'>Called when control-c is hit. Override to add custom behavior. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>version</div>
<div class='slotValue'>	Returns a version number for Io.
</div>
</div>
</div>
<a name='Core.WeakLink'></a>
<div class='class'>
<div class='className'>WeakLink</div>
<div class='classDescription'>	A WeakLink is a primitive that can hold a reference to 
	an object without preventing the garbage collector from 
	collecting it. The link reference is set with the setLink() method. 
	After the garbage collector collects an object, it informs any 
	(uncollected) WeakLink objects whose link value pointed to that 
	object by calling their "collectedLink" method.
</div>
<div class='slot'>
<div class='slotName'>link</div>
<div class='slotValue'>	Returns the link pointer or Nil if none is set.
</div>
</div>
<div class='slot'>
<div class='slotName'>setLink(aValue)</div>
<div class='slotValue'>	Sets the link pointer. Returns self.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Flux</div>
<a name='Flux.Message'></a>
<div class='class'>
<div class='className'>Message</div>
<div class='classDescription'>A Message object encapsulates the action of a message send. 
Blocks are composed of a Message and its children.
<p>
Terminology
<pre>
Example:
  Io> msg := message(A B(C D); E F)
  ==> A B(C D); E F
  
In the above example:
  msg name            =>  A
  msg next            =>  B(C D); E F
  msg next arguments  =>  list(C D)
  msg next next name  =>  ;
  msg next next next  =>  E F
</pre>
Important: Modifying the message tree of a block currently in use may cause
a crash if a garbage collection cycle occurs. If the implementation were
changed to retain every called message, this could be avoided.
But the cost to performance seems to outweigh the need to cover this case for now.
</div>
<div class='slot'>
<div class='slotName'>appendArg(aMessage)</div>
<div class='slotValue'>Adds aMessage to the argument list of receiver. Examples,
<pre>	
Io> message(a) appendArg(message(b))
==> a(b)

Io> message(a(1,2)) appendArg(message(3))
==> a(1, 2, 3)
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>appendCachedArg(aValue)</div>
<div class='slotValue'>	Adds aValue to the argument list of receiver as a cachedResult.
</div>
</div>
<div class='slot'>
<div class='slotName'>argAt(indexNumber)</div>
<div class='slotValue'>	Returns Message object for the specified argument or Nil if none exists.
</div>
</div>
<div class='slot'>
<div class='slotName'>argCount</div>
<div class='slotValue'>Returns the number of arguments this message has. A faster way to do, msg arguments size. Examples,
<pre>	
Io> message(a(1,2,3)) argCount
==> 3

Io> message(a) argCount
==> 0
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>argsEvaluatedIn(anObject)</div>
<div class='slotValue'>	Returns a List containing the argument messages evaluated in the
	context of anObject.
</div>
</div>
<div class='slot'>
<div class='slotName'>arguments</div>
<div class='slotValue'>	Returns a list of the message objects that act as the
	receiver's arguments. Modifying this list will not alter the actual
	list of arguments. Use the arguments_() method to do that.
</div>
</div>
<div class='slot'>
<div class='slotName'>asMessageWithEvaluatedArgs(optionalContext)</div>
<div class='slotValue'>	Returns a copy of receiver with arguments evaluated in the context of sender if
	optionalContext is nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>asSimpleString</div>
<div class='slotValue'>Returns one-line string representation up to 40 characters long.
</div>
</div>
<div class='slot'>
<div class='slotName'>asStackEntry</div>
<div class='slotValue'>Returns a string containing message name, file and line.
</div>
</div>
<div class='slot'>
<div class='slotName'>asString</div>
<div class='slotValue'>	Same as code().
</div>
</div>
<div class='slot'>
<div class='slotName'>cachedResult</div>
<div class='slotValue'>	Returns the cached result of the Message or Nil if there is none.
</div>
</div>
<div class='slot'>
<div class='slotName'>characterNumber</div>
<div class='slotValue'>	Returns the message character number. The charcter number is typically
	the beginning character index in the source text from with the message was read.
</div>
</div>
<div class='slot'>
<div class='slotName'>clone</div>
<div class='slotValue'>	Returns a Message that is a deep copy of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>code</div>
<div class='slotValue'>	Returns a String containing a decompiled code representation of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>codeOfLength(n)</div>
<div class='slotValue'>		Same as <tt>Message code</tt>, but returns first <tt>n</tt> characters only.
</div>
</div>
<div class='slot'>
<div class='slotName'>description</div>
<div class='slotValue'>Returns a string containing a short description of the method.
</div>
</div>
<div class='slot'>
<div class='slotName'>doInContext(anObject, locals)</div>
<div class='slotValue'>	Evaluates the receiver in the context of anObject. Optional <tt>locals</tt> 
	object is used as message sender. <tt>anObject</tt> is used as sender otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>evaluatedArgs</div>
<div class='slotValue'>	Returns a List containing the argument messages evaluated in the context.
</div>
</div>
<div class='slot'>
<div class='slotName'>fluxPath</div>
<div class='slotValue'> The directory where the .io files for the Flux views are located. This directory is added to the Importer searchPaths.
</div>
</div>
<div class='slot'>
<div class='slotName'>fluxSource</div>
<div class='slotValue'> The directory of Flux where Flux.io is located. This directory is added to the Importer searchPaths.
</div>
</div>
<div class='slot'>
<div class='slotName'>fromString(aString)</div>
<div class='slotValue'>	Returns a new Message object for the compiled(but not executed)
	result of aString.
</div>
</div>
<div class='slot'>
<div class='slotName'>hasCachedResult</div>
<div class='slotValue'>	Returns true if there is a cached result. Nil is a valid cached result.
</div>
</div>
<div class='slot'>
<div class='slotName'>isEndOfLine</div>
<div class='slotValue'>	Returns true if the message marks the end of the line. A ';' message.
</div>
</div>
<div class='slot'>
<div class='slotName'>label</div>
<div class='slotValue'>	Returns the message label. The label is typically set to the
	name of the file from which the source code for the message was read.
</div>
</div>
<div class='slot'>
<div class='slotName'>last</div>
<div class='slotValue'>	Returns the last message in the chain.
</div>
</div>
<div class='slot'>
<div class='slotName'>lastBeforeEndOfLine</div>
<div class='slotValue'>	Returns the last message in the chain before the EndOfLine or nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>lineNumber</div>
<div class='slotValue'>	Returns the line number of the message. The charcter number
	is typically the line number in the source text from with the message was read.
</div>
</div>
<div class='slot'>
<div class='slotName'>name</div>
<div class='slotValue'>	Returns the name of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>next</div>
<div class='slotValue'>	Returns the next message in the message chain or nil if there is no next message.
</div>
</div>
<div class='slot'>
<div class='slotName'>nextIgnoreEndOfLines</div>
<div class='slotValue'>	Returns the next message in the message chain which is not an 
	EndOfLine or nil if there is no next message.
</div>
</div>
<div class='slot'>
<div class='slotName'>previous</div>
<div class='slotValue'>	Returns the previous message in the message chain or Nil if there is no previous message.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeCachedResult</div>
<div class='slotValue'>	Removes the cached result of the Message.
</div>
</div>
<div class='slot'>
<div class='slotName'>setArguments(aListOfMessages)</div>
<div class='slotValue'>	Sets the arguments of the receiver to deep copies of
	those contained in aListOfMessages.  Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setCachedArgs(listOfValues)</div>
<div class='slotValue'> Appends evaluated arguments to a message. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setCachedResult(anObject)</div>
<div class='slotValue'>	Sets the cached result of the message. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setCharacterNumber(aNumber)</div>
<div class='slotValue'>	Sets the character number of the message. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setLabel(aString)</div>
<div class='slotValue'>	Sets the label of the message and its children. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setLineNumber(aNumber)</div>
<div class='slotValue'>	Sets the line number of the message. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setName(aString)</div>
<div class='slotValue'>	Sets the name of the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setNext(aMessageOrNil)</div>
<div class='slotValue'>	Sets the next message in the message chain to a deep copy of
	aMessage or it removes the next message if aMessage is nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPrevious(aMessageOrNil)</div>
<div class='slotValue'>	Sets the previous message in the message chain to a deep copy of
	aMessage or it removes the previous message if aMessage is Nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>union(other) Creates a union of the receiver and the other parameter.</div>
<div class='slotValue'>	Returns a new message object with the receivers message as the first argument of the returned message, 
	and the other parameter's arguments as each successive argument to the new message.
	<br/>
	<pre>
  Io> message(a) union(message(b))
  ==> [unnamed](a, b)
  </pre>
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>NotificationCenter</div>
<a name='NotificationCenter.Notification'></a>
<div class='class'>
<div class='className'>Notification</div>
<div class='slot'>
<div class='slotName'>name</div>
<div class='slotValue'>Returns the name of the notification.
</div>
</div>
<div class='slot'>
<div class='slotName'>post</div>
<div class='slotValue'>Posts the notification to the NotificationCenter.
</div>
</div>
<div class='slot'>
<div class='slotName'>sender</div>
<div class='slotValue'>Returns the sender of the notification.
</div>
</div>
<div class='slot'>
<div class='slotName'>setName(anObject)</div>
<div class='slotValue'> Sets the name of the Notification. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSender(anObject)</div>
<div class='slotValue'> Sets the sender of the Notification. Returns self.
</div>
</div>
</div>
<a name='NotificationCenter.NotificationCenter'></a>
<div class='class'>
<div class='className'>NotificationCenter</div>
<div class='classDescription'>
An NotificationCenter similar to the one found in Apple's FoundationKit.
<p>
Example use:
<pre>
// in listener
listener := NotificationListener clone setTarget(self) setName("FeedDownloadedFile") start

// in sender
Notification clone setSender(self) setName("FeedDownloadedFile") post

// note: notifications can also be reused, and any extra data can be added in it's slots

// to stop listening
listener stop
</pre>
</div>
<div class='slot'>
<div class='slotName'>addListener(aNotificationListener)</div>
<div class='slotValue'> Removes aNotificationListener from listeners list. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>listeners</div>
<div class='slotValue'>Returns list of NotificationListeners.
</div>
</div>
<div class='slot'>
<div class='slotName'>postNotification(aNotification)</div>
<div class='slotValue'>Sends aNotification to be handled by listeners. Returns self.  
Implementation:
<pre>
listeners foreach(handleNotification(n))
</pre>
</div>
</div>
</div>
<a name='NotificationCenter.NotificationListener'></a>
<div class='class'>
<div class='className'>NotificationListener</div>
<div class='slot'>
<div class='slotName'>action</div>
<div class='slotValue'>Returns the name of the message that is sent to the target when a matching notification is found.
</div>
</div>
<div class='slot'>
<div class='slotName'>handleNotification(aNotification)</div>
<div class='slotValue'>Checks to see if aNotification matches the listener criteria and if so, sends it to the target. Implementation:
<pre>
if((name == nil or name == n name) and(object == nil or sender == n sender),
	target perform(action, n)
)
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>name</div>
<div class='slotValue'>Returns the message name that the listener wants to receive messages for.
</div>
</div>
<div class='slot'>
<div class='slotName'>sender</div>
<div class='slotValue'>Returns the sender that the listener wants to receive messages from.
</div>
</div>
<div class='slot'>
<div class='slotName'>setAction(messageName)</div>
<div class='slotValue'> Sets the name of the message that is sent to the target when a matching notification is found. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setName(aSeq)</div>
<div class='slotValue'> Sets the message name that the listener wants to receive messages for. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSender(anObject)</div>
<div class='slotValue'> Sets the sender that the listener wants to receive messages from. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setTarget(anObject)</div>
<div class='slotValue'> Sets the target that the receiver sends matching messages to. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>start</div>
<div class='slotValue'>Removes the receiver to the NotificationCenter set of listeners. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>target</div>
<div class='slotValue'>Returns the target that the receiver sends matching messages to.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Range</div>
<a name='Range.Range'></a>
<div class='class'>
<div class='className'>Range</div>
<div class='classDescription'>Simple datastructure representing the items at and between two specific points.
</div>
<div class='slot'>
<div class='slotName'>asList</div>
<div class='slotValue'>Returns a list containing all the items within and including the ranges starting and ending points.
</div>
</div>
<div class='slot'>
<div class='slotName'>at(position)</div>
<div class='slotValue'> Rewinds the range, skips forward until we're at the supplied position then returns the value at that position. Raises an exception if the position is out of bounds.
</div>
</div>
<div class='slot'>
<div class='slotName'>contains</div>
<div class='slotValue'>Returns a boolean value if the range contains the argument.
</div>
</div>
<div class='slot'>
<div class='slotName'>first</div>
<div class='slotValue'>	Moves the current cursor to the beginning of the range, and returns it.
</div>
</div>
<div class='slot'>
<div class='slotName'>foreach(optionalIndex, value, message)</div>
<div class='slotValue'>	Iterates over each item beginning with the starting point, and finishing at 
	the ending point inclusive. This method can operate several ways; these include: 
	(1) Takes one argument, the message tree to be executed during each iteration; (2) 
	Takes two arguments, the first argument is the name of the current value being 
	iterated over, and the second is the message tree to be executed during each 
	iteration; (3) Takes three arguments: the first is the current index within the 
	range, the second is the name of the current value being iterated over, and the 
	third is the message tree to be executed during each iteration. 
	For example:
<pre>
// First method (operating on numbers)
1 to(10) foreach("iterating" print) // prints "iterating" 10 times
// Second method (operating on numbers)
1 to(10) foreach(v, v print) // prints each value
// Third method (operating on numbers)
1 to(10) foreach(i, v, writeln(i .. ": " .. v)) // prints "index: value"
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>index</div>
<div class='slotValue'>Returns the current index number starting from zero and extending 
outward up to the maximum number of items in the range.
</div>
</div>
<div class='slot'>
<div class='slotName'>indexOf(aValue)</div>
<div class='slotValue'> Calculates each value, checking to see if it matches the aValue parameter. If so, return the position within the range. NOTE: This method rewinds the range before searching. If you need to revert back to your original position, make a duplicate of the range, and use indexOf on it instead.
</div>
</div>
<div class='slot'>
<div class='slotName'>last</div>
<div class='slotValue'>	Moves the current cursor to the end of the range, and returns it.
</div>
</div>
<div class='slot'>
<div class='slotName'>levenshtein(other)</div>
<div class='slotValue'> Returns the levenshtein distance to other.
</div>
</div>
<div class='slot'>
<div class='slotName'>map(optionalIndex, value, message)</div>
<div class='slotValue'>	Returns a new list which contains the result of the 'body' for every element 
	stepped over in the range, from the starting point to the ending point inclusive. 
	This method can operate several ways; these include: 
	(1) Takes one argument, the message tree to be executed during each iteration; (2) 
	Takes two arguments, the first argument is the name of the current value being 
	iterated over, and the second is the message tree to be executed during each 
	iteration; (3) Takes three arguments: the first is the current index within the 
	range, the second is the name of the current value being iterated over, and the 
	third is the message tree to be executed during each iteration. 
	For example:
<pre>
# First method (operating on numbers)
1 to(10) map(*2) # multiply each value by two
# Second method (operating on numbers)
1 to(10) map(v, "#{v}" interpolate) # returns string representation of each value as list
# Third method (operating on numbers)
1 to(10) map(i, v, i*v) #  multiply each value by index
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>next</div>
<div class='slotValue'>		Sets the current item in the range to the next item in the range, 
		and returns a boolean value indicating whether it is not at the end of the range.
</div>
</div>
<div class='slot'>
<div class='slotName'>nextInSequence(skipVal)</div>
<div class='slotValue'> Returns the next item in the sequence.  The optional skipVal parameter allows you to skip ahead skipVal places.
</div>
</div>
<div class='slot'>
<div class='slotName'>previous</div>
<div class='slotValue'>	Sets the current item in the range to the previous item in the range, 
	and returns a boolean value indicating whether it is not at the beginning of the range.
</div>
</div>
<div class='slot'>
<div class='slotName'>rewind</div>
<div class='slotValue'>	Sets the current item and the index to the values the receiver started out with.
</div>
</div>
<div class='slot'>
<div class='slotName'>select</div>
<div class='slotValue'>Operates the same as 'List select'
</div>
</div>
<div class='slot'>
<div class='slotName'>setRange(start, end, increment)</div>
<div class='slotValue'>	Has several modes of operation. First, if only two parameters are specified, 
	the increment value is set to 1 by default, while the first parameter represents
	the point to start from, and the second parameter represents the point to end at. 
	If the second parameter is smaller than the first, the range will operate backwards. 
	If the third parameter is specified, a custom iteration value will be used instead of 1.
</div>
</div>
<div class='slot'>
<div class='slotName'>slice(start, end, [by])</div>
<div class='slotValue'> Returns a list containing the values from the Range starting at the start parameter, ending at the end parameter, and optionally incremented by the by parameter.
</div>
</div>
<div class='slot'>
<div class='slotName'>to</div>
<div class='slotValue'>Convenience constructor that returns a cursor object representing the range of numbers from the receiver to the 'endingPoint' parameter. Increments over each item in that range by 1.
</div>
</div>
<div class='slot'>
<div class='slotName'>to(endpoint)</div>
<div class='slotValue'> Convenience constructor that returns a range of sequences from the receiver to the endpoint argument. Increments over each item in that range by 1.
</div>
</div>
<div class='slot'>
<div class='slotName'>toBy(endingPoint, incrementValue)</div>
<div class='slotValue'> Convenience constructor that returns a cursor object representing the range of numbers from the receiver to the 'endingPoint' parameter. Increments over each item in that range by the 'incrementValue' parameter.
</div>
</div>
<div class='slot'>
<div class='slotName'>toBy(endpoint, increment)</div>
<div class='slotValue'> Convenience constructor that returns a range of sequences from the receiver to the endpoint argument. Increments over each item in that range by the value of the increment parameter. The increment parameter must be positive.
</div>
</div>
<div class='slot'>
<div class='slotName'>value</div>
<div class='slotValue'>	Returns the value of the current item in the range.
</div>
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Databases</div>
<div class='package'>
<div class='packageName'>DBI</div>
<a name='DBI.DBI'></a>
<div class='class'>
<div class='className'>DBI</div>
<div class='classDescription'>An object for wrapping libdbi to allow Io access to
a multitude of database systems transparently.
</div>
<div class='slot'>
<div class='slotName'>drivers</div>
<div class='slotValue'>	Get a list of drivers and its associated information:

	<ol>
		<li>name</li>
		<li>description</li>
		<li>filename</li>
		<li>version</li>
		<li>date compiled</li>
		<li>maintainer</li>
		<li>url</li>
	</ol>
</div>
</div>
<div class='slot'>
<div class='slotName'>init</div>
<div class='slotValue'>Initialize the DBI environment with the default driver path.
</div>
</div>
<div class='slot'>
<div class='slotName'>initWithDriversPath</div>
<div class='slotValue'>	Initialize the DBI environment with the specified libdbi driver path.
</div>
</div>
<div class='slot'>
<div class='slotName'>version</div>
<div class='slotValue'>Return string version of libdbi being used.
</div>
</div>
<div class='slot'>
<div class='slotName'>with(driverName)</div>
<div class='slotValue'> Get a new connection with the given driver.
</div>
</div>
</div>
<a name='DBI.DBIConn'></a>
<div class='class'>
<div class='className'>DBIConn</div>
<div class='classDescription'>An object that represents a DBI Connection.
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>Close the connection to the database.
</div>
</div>
<div class='slot'>
<div class='slotName'>connect</div>
<div class='slotValue'>Connect to the database server.
</div>
</div>
<div class='slot'>
<div class='slotName'>driver</div>
<div class='slotValue'>Return database driver name.
</div>
</div>
<div class='slot'>
<div class='slotName'>execute(sql_query)</div>
<div class='slotValue'>	Perform a database query that expects no results. 
	Returns the number of rows affected.
</div>
</div>
<div class='slot'>
<div class='slotName'>option(key)</div>
<div class='slotValue'> Retrieve an option value for the connection.
</div>
</div>
<div class='slot'>
<div class='slotName'>optionClear(key)</div>
<div class='slotValue'> Clear a specific option associated with the connection.
</div>
</div>
<div class='slot'>
<div class='slotName'>optionPut(key,value)</div>
<div class='slotValue'> Add an option key, value pair to the connection.
</div>
</div>
<div class='slot'>
<div class='slotName'>options</div>
<div class='slotValue'>Retrieve an option list of the connection.
</div>
</div>
<div class='slot'>
<div class='slotName'>optionsClear</div>
<div class='slotValue'>Clear all options associated with the connection
</div>
</div>
<div class='slot'>
<div class='slotName'>ping</div>
<div class='slotValue'>	Ping the database to see if it's alive. 
	Will return true if it is, otherwise false.
</div>
</div>
<div class='slot'>
<div class='slotName'>query(sql_query)</div>
<div class='slotValue'>	Perform a database query returning a DBIResult object.
</div>
</div>
<div class='slot'>
<div class='slotName'>queryOne([object], sql)</div>
<div class='slotValue'>	Perform a query and return the first
	result.

	If [object] is supplied, the object is populated with the contents of the
	result, the result is marked done and the object is returned.
</div>
</div>
<div class='slot'>
<div class='slotName'>quote(value)</div>
<div class='slotValue'>	Quote a string value according to the database server's specifications.
</div>
</div>
<div class='slot'>
<div class='slotName'>sequenceLast([name])</div>
<div class='slotValue'>	Return the last inserted sequence value.
</div>
</div>
<div class='slot'>
<div class='slotName'>sequenceNext([name])</div>
<div class='slotValue'>	Return the next sequence that will be used during an INSERT query.
</div>
</div>
</div>
<a name='DBI.DBIRecord'></a>
<div class='class'>
<div class='className'>DBIRecord</div>
<div class='classDescription'>A DBI Record. When utilizing `foreach' or `populate' methods
of a DBIResult object, you can pass an optional Object cloned from DBIRecord.
This object will be populated with the row contents making it possible to
write objects that represent your SQL results. A simple example would be:

<pre>
Person := DBIRecord clone do (fullName := method(firstName.." "..lastName))
q := conn query("SELECT id, firstName, lastName FROM people")
q foreach(Person, p, writeln("Name = ", p fullName))
</pre>

As you can see, fullName was not in the SQL query, however, a dynamic method
in your Person class.

DBIRecord in and of itself provides no real functionality. It simply acts
as an Object and stores the values from the SQL query into a Map. You can
access the field information:

<pre>
o := r populate(Person)
o firstName            // would retrieve the firstName value of the SQL query
o setFirstName("John") // would update the object's firstName value to be John
</pre>

Do not confuse the above example as updating the actual database. The call
to setFirstName <i>only</i> updates the objects representation of firstName.
</div>
<div class='slot'>
<div class='slotName'>forward</div>
<div class='slotValue'>Private method that implements getting and setting values.
</div>
</div>
<div class='slot'>
<div class='slotName'>with(aMap)</div>
<div class='slotValue'> Returns a new DBIRecord instance for the given value map.
</div>
</div>
</div>
<a name='DBI.DBIResult'></a>
<div class='class'>
<div class='className'>DBIResult</div>
<div class='classDescription'>A DBI Result created by a call to DBIConn query.
</div>
<div class='slot'>
<div class='slotName'>at(index_or_name)</div>
<div class='slotValue'>	 Returns the contents of the given field. 
	 The parameter can be a field index or a field name.
</div>
</div>
<div class='slot'>
<div class='slotName'>done</div>
<div class='slotValue'>	Close and free the result. This <b>must</b> be called on
each result. Failure to do so will cause memory leaks and open queries with
the database server.
</div>
</div>
<div class='slot'>
<div class='slotName'>fields</div>
<div class='slotValue'>Returns a list of field names in the result.
</div>
</div>
<div class='slot'>
<div class='slotName'>first</div>
<div class='slotValue'>Move the cursor to the first record.
</div>
</div>
<div class='slot'>
<div class='slotName'>foreach([Object], value, message)</div>
<div class='slotValue'>Loops over the records in the result starting at either the first result 
(if the cursor has never been moved) or its current location if moved. i.e.

<pre>
r := conn query("SELECT * FROM people")
r foreach(r, r at(1))
</pre>

The above would start at the first row, however, you can move around in the
result set and then foreach would pickup where you left off, for instance, say
you wanted to skip the first three rows:

<pre>
r := conn query("SELECT * FROM people")
r seek(4)
r foreach(r, r at (1))
</pre>

The above would start at the record #4, not at the beginning.

The optional Object parameter would cause a decendent of DBIRecord to be
populate instead of the index being set. This allows for advanced
functionality. Please see `DBIRecord' for further information and an example.
</div>
</div>
<div class='slot'>
<div class='slotName'>last</div>
<div class='slotValue'>Move the cursor to the last record.
</div>
</div>
<div class='slot'>
<div class='slotName'>next</div>
<div class='slotValue'>Move the cursor to the next record.
</div>
</div>
<div class='slot'>
<div class='slotName'>populate(object)</div>
<div class='slotValue'>	Populates a decendent of DBIRecord with the current record's contents. 
	See `DBIRecord' for further explanation and an example.
</div>
</div>
<div class='slot'>
<div class='slotName'>position</div>
<div class='slotValue'>Return the current row's position (or index).
</div>
</div>
<div class='slot'>
<div class='slotName'>previous</div>
<div class='slotValue'>Move the cursor to the previous record.
</div>
</div>
<div class='slot'>
<div class='slotName'>seek(row_number)</div>
<div class='slotValue'> Move the cursor to the nth record.
</div>
</div>
<div class='slot'>
<div class='slotName'>size</div>
<div class='slotValue'>Returns the number of rows available.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Memcached</div>
<a name='Memcached.Memcached'></a>
<div class='class'>
<div class='className'>Memcached</div>
<div class='classDescription'><a href="http://www.danga.com/memcached/">memcached</a> is a high-performance,
distributed memory object caching system, generic in nature,
but intended for use in speeding up dynamic web applications
by alleviating database load. Memcached is an Io client library for memcached,
based on C <a href="http://tangent.org/552/libmemcached.html">libmemcached</a>.
</div>
<div class='slot'>
<div class='slotName'>add(key, value[, expiration])</div>
<div class='slotValue'>Asks memcached to store the value identified by the key,
but only if the server *doesn't* already hold data for this key.
Returns true on success, false in case of a collision.
Otherwise raises an exception.
</div>
</div>
<div class='slot'>
<div class='slotName'>addServer(address)</div>
<div class='slotValue'>Adds a memcached server. address is a "host:port" string, e.g., "127.0.0.1:11211"
Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>append(key, value)</div>
<div class='slotValue'>Asks memcached to add this value to an existing key after existing value.
Returns true on success, otherwise raises an exception.
value should be a Sequence.
Supported by memcached 1.2.4+
</div>
</div>
<div class='slot'>
<div class='slotName'>at(key, optionalDefaultValue)</div>
<div class='slotValue'>	Asks memcached to retrieve data corresponding to the key.
	Returns nil if the data is not there (or if the data *is* nil).
</div>
</div>
<div class='slot'>
<div class='slotName'>atIfAbsentPut(key, value[, expiration])</div>
<div class='slotValue'>	If a value is present at the specified key, its value is returned.
	Otherwise, inserts the new value and returns it.
</div>
</div>
<div class='slot'>
<div class='slotName'>atPut(key, value[, expiration])</div>
<div class='slotValue'>	Asks memcached to store the value identified by the key.
	Same as Memcached set, but returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>decr([offset])</div>
<div class='slotValue'>Asks memcached to decrement data for some item in place. The data for the item is
treated as decimal representation of a 64-bit unsigned integer. If the
current data value does not conform to such a representation, the
commands behave as if the value were 0.
Default offset is 1.
Returns the new value.
</div>
</div>
<div class='slot'>
<div class='slotName'>delete(key[, time])</div>
<div class='slotValue'>Asks memcached to delete an item with the given key.
time is the amount of time in seconds (or Unix time until which)
the client wishes the server to refuse "add" and "replace" commands
with this key.
Returns true on success, false if there is no item with the given key.
Otherwise raises an exception.
</div>
</div>
<div class='slot'>
<div class='slotName'>flushAll([expiration])</div>
<div class='slotValue'>Asks memcached to invalidate all existing items immediately (by default)
or after the expiration specified.
Always returns true.
</div>
</div>
<div class='slot'>
<div class='slotName'>get(key)</div>
<div class='slotValue'>Asks memcached to retrieve data corresponding to the key.
Raises "NOT FOUND" if the data is not there.
</div>
</div>
<div class='slot'>
<div class='slotName'>getMulti(keys)</div>
<div class='slotValue'>Asks memcached to retrieve data corresponding to the list of keys.
Returns a Map with the results.
If some of the keys appearing in a retrieval request are not sent back
by the server in the item list this means that the server does not
hold items with such keys
</div>
</div>
<div class='slot'>
<div class='slotName'>incr([offset])</div>
<div class='slotValue'>Asks memcached to increment data for some item in place. The data for the item is
treated as decimal representation of a 64-bit unsigned integer. If the
current data value does not conform to such a representation, the
commands behave as if the value were 0.
Default offset is 1.
Returns the new value.
</div>
</div>
<div class='slot'>
<div class='slotName'>prepend(key, value)</div>
<div class='slotValue'>Asks memcached to add this value to an existing key before existing value.
Returns true on success, otherwise raises an exception.
value should be a Sequence.
Supported by memcached 1.2.4+
</div>
</div>
<div class='slot'>
<div class='slotName'>removeAt(key)</div>
<div class='slotValue'>	Asks memcached to remove value with a given key. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>replace(key, value[, expiration])</div>
<div class='slotValue'>Asks memcached to store the value identified by the key,
but only if the server *does* already hold data for this key.
Returns true on success, false if there is already data for this key.
Otherwise raises an exception.
</div>
</div>
<div class='slot'>
<div class='slotName'>set(key, value[, expiration])</div>
<div class='slotValue'>Asks memcached to store the value identified by the key.
Returns true on success, otherwise raises an exception.
</div>
</div>
<div class='slot'>
<div class='slotName'>stats</div>
<div class='slotValue'>Returns a Map with servers' statistics. Keys are server addresses,
values are maps with actual stats.
</div>
</div>
<div class='slot'>
<div class='slotName'>with(servers)</div>
<div class='slotValue'>	Returns a new instance of Memcached.
	Accepts a Sequence or a List of server addresses.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>MySQL</div>
<a name='MySQL.MySQL'></a>
<div class='class'>
<div class='className'>MySQL</div>
<div class='classDescription'><a href="http://www.mysql.com/">MySQL</a> is a fast, multi-threaded,
multi-user SQL database server. IoMySQL is a MySQL binding for Io,
by <a href="http://dahlia.pe.kr/">Min-hee Hong</a>.

<pre><code>
my := MySQL establish(&quot;localhost&quot;, &quot;user&quot;, &quot;password&quot;, &quot;database&quot;)

# Get rows by Map
my queryThenMap(&quot;SELECT * FROM rel&quot;) foreach(at(&quot;col&quot;) println)
# Get rows by List
my query(&quot;SELECT * FROM rel&quot;) foreach(at(0) println)

my close
</code></pre>
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>	Closes a previously opened connection.
</div>
</div>
<div class='slot'>
<div class='slotName'>connect(host, user, password, database, port, unixSocket, useSSL)</div>
<div class='slotValue'>	Connect to a MySQL database.
</div>
</div>
<div class='slot'>
<div class='slotName'>connected</div>
<div class='slotValue'>	Returns true if connected to the database, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>establish</div>
<div class='slotValue'>	Establish a connection to a MySQL database.
</div>
</div>
<div class='slot'>
<div class='slotName'>lastInsertRowId</div>
<div class='slotValue'>	Returns the value generated for an AUTO_INCREMENT column by the previous INSERT or UPDATE statement.
</div>
</div>
<div class='slot'>
<div class='slotName'>query(aQueryString)</div>
<div class='slotValue'>	Perform a SQL query and return a list of results.
	<pre>
	db query("SELECT * FROM accounts") foreach(println)
	</pre>
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Obsidian</div>
<a name='Obsidian.Obsidian'></a>
<div class='class'>
<div class='className'>Obsidian</div>
<div class='classDescription'>A double key/value database with cursors on first key. Basis for PDB.
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>Closes the persistence database file.
</div>
</div>
<div class='slot'>
<div class='slotName'>delete</div>
<div class='slotValue'>Removes the persistence database file set via setPath.
</div>
</div>
<div class='slot'>
<div class='slotName'>onAt</div>
<div class='slotValue'>Return the value associated with slotName of stored object whose ppid is objId.
</div>
</div>
</div>
<a name='Obsidian.ObsidianClient'></a>
<div class='class'>
<div class='className'>ObsidianClient</div>
</div>
<a name='Obsidian.ObsidianServer'></a>
<div class='class'>
<div class='className'>ObsidianServer</div>
<div class='classDescription'>
A network interface for Obsidian.

<h4>Starting a Server</h4>

<pre>
oServer := ObsidianServer clone
oServer localObject setName("foo") open
oServer start
</pre>

<h4>Example Client Code</h4>

<pre>
client := MDOConnection clone setHost("127.0.0.1") setPort(8000) connect
client onAtPut("1", "aKey", "aSlot")
client onAtPut("1", "cKey", "cSlot")
client onAtPut("1", "bKey", "bSlot")
client first("1", 5) println
a := client onAt("1", "aKey")
writeln("a = ", a)
b := client onAt("1", "bKey")
writeln("b = ", b)
client close
</pre>

The messages accepted by the Obsidian server include:

<pre>
onAtPut(id, key, value)
onAt(id, key)
onRemoveAt(id, key)
onFirst(id, count)
onLast(id, count)
onAfter(id, key, count)
onBefore(id, key, count)
</pre>
</div>
</div>
<a name='Obsidian.PDB'></a>
<div class='class'>
<div class='className'>PDB</div>
<div class='classDescription'>An arbitrary graph database with support for on-disk garbage collection. Example use:

<h4>Setup</h4>

<pre>
PDB open
PDB root atPut("users", PMap clone)
PDB sync
PDB close
</pre>

PMap is a Map/Dictionary whose keys are lazily loaded from the database. 
PDB root is the root PMap in the database and the root object used for PDB's garbage collector. 
PDB sync needs to be called to write any changes to the database.

<h4>Defining a Persistent Object</h4>

<pre>
User := Object clone pSlots(name, email)
</pre>

The pSlots(), declares which slots on the object should be persisted. 
The List, Date, Sequence and Number primitives already know how to persist themselves.

<h4>Inserting a Persistent Object</h4>

<pre>
PDB open 
user := User clone setName("steve") setEmail("steve@foo.com")
PDB root users atPut("steve", user)
PDB sync
PDB close
</pre>

<h4>Accessing a Persistent Object</h4>

<pre>
user := PDB root users at("steve")
writeln("user name = ", user name, " email = ", user email)
</pre>

<h4>Updating a Persistent Object</h4>

<pre>
user setEmail("steve@newDomain.com")
PDB sync 
</pre>

PDB sync will scan all persistent objects in the vm and save any with changes to their persistent slots. 
If the object was already in the database, only its updated slots will be written.

<h4>Removing an entry in a PMap</h4>

<pre>
PDB root users removeAt("steve")
</pre>

<h4>Removing a persistent object</h4>

This is never done explicitly, instead calling:

<pre>
PDB collectGarbage
</pre>

Will remove all objects unreachable by the reference graph from the root PMap.

<p>
Notes: Currently, PDB is a singleton.
</div>
<div class='slot'>
<div class='slotName'>addObjectToPersist</div>
<div class='slotValue'>Register an object to be persisted in the next PDB sync.
</div>
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>Close the persistence database.
</div>
</div>
<div class='slot'>
<div class='slotName'>collectGarbage</div>
<div class='slotValue'>Remove from PDB all objects not accessible via the root object.
</div>
</div>
<div class='slot'>
<div class='slotName'>newId</div>
<div class='slotValue'>Generate a new PDB id number for use as a persistent object's ppid.
</div>
</div>
<div class='slot'>
<div class='slotName'>objectAtPpid</div>
<div class='slotValue'>Return the object associated in the database with a ppid.
</div>
</div>
<div class='slot'>
<div class='slotName'>reopen</div>
<div class='slotValue'>Sync, close and reopen the PDB store.
</div>
</div>
<div class='slot'>
<div class='slotName'>root</div>
<div class='slotValue'>Return the root PMap object used to store and retrieve persistent objects and their slots.
</div>
</div>
<div class='slot'>
<div class='slotName'>show</div>
<div class='slotValue'>Print to standard output a listing of all objects and IDs stored in PDB.
</div>
</div>
<div class='slot'>
<div class='slotName'>sync</div>
<div class='slotValue'>Immediately persist data for all objects marked dirty by Collector whose 
shouldPersistByDefault is true, or that have specifically requested to be
persisted since the last sync via addObjectToPersist.
</div>
</div>
</div>
<a name='Obsidian.PMap'></a>
<div class='class'>
<div class='className'>PMap</div>
<div class='classDescription'>PMap stores persistent data in a Map-like fashion and lazily loads
available slots from the PDB backing store. Values stored or loaded are cached
into local object slots.
</div>
<div class='slot'>
<div class='slotName'>at(slotName)</div>
<div class='slotValue'>Tries to obtain a value for slot slotName from a local slot of that name,
or tries to load it from the PDB if the local slot does not exist. When all else fails, returns nil.
<p>
If slotName begins with an underscore ("_"), returns the id of the slot from PDB instead of the value.
</div>
</div>
<div class='slot'>
<div class='slotName'>atPut(slotName, value)</div>
<div class='slotValue'> Records value in the slot named slotName.
</div>
</div>
<div class='slot'>
<div class='slotName'>createIfAbsent</div>
<div class='slotValue'>Creates a slot with a new PMap clone if not already present.
</div>
</div>
<div class='slot'>
<div class='slotName'>init</div>
<div class='slotValue'>Initialize a new PMap and automatically add it as a persistent object to PDB.
</div>
</div>
<div class='slot'>
<div class='slotName'>objectsForKeys</div>
<div class='slotValue'>Returns a list of values for each key in the list given. Keys beginning with an
underscore ("_") are returned verbatim.
</div>
</div>
<div class='slot'>
<div class='slotName'>persist</div>
<div class='slotValue'>Commits the PMap's slots to PDB.
</div>
</div>
<div class='slot'>
<div class='slotName'>persistSlots</div>
<div class='slotValue'>Cleans up dirty slots by committing them to PDB.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeAt</div>
<div class='slotValue'>Marks a value for removal.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeSlot</div>
<div class='slotValue'>Marks a value for removal.
</div>
</div>
<div class='slot'>
<div class='slotName'>shouldPersistByDefault</div>
<div class='slotValue'>PDB boolean flag indicating whether this object should be considered for persistence
when persistence has not been specifically requested by calling ppid() or PDB addObjectToPersist.
Always true by default for PMap.
</div>
</div>
<div class='slot'>
<div class='slotName'>slotCount</div>
<div class='slotValue'>Returns the number of slots committed to PDB.
</div>
</div>
</div>
<a name='Obsidian.PObject'></a>
<div class='class'>
<div class='className'>PObject</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Postgres</div>
<a name='Postgres.Postgres'></a>
<div class='class'>
<div class='className'>Postgres</div>
</div>
</div>
<div class='package'>
<div class='packageName'>QDBM</div>
<a name='QDBM.QDBM'></a>
<div class='class'>
<div class='className'>QDBM</div>
<div class='classDescription'>An ordered key/value database that supports transactions and arbitrary kay and value sizes.
</div>
<div class='slot'>
<div class='slotName'>abort</div>
<div class='slotValue'>	Abort transaction. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>at(keySymbol)</div>
<div class='slotValue'>	Returns a Sequence for the value at the given key or nil if there is no such key.
</div>
</div>
<div class='slot'>
<div class='slotName'>atPut(keySymbol, valueSequence)</div>
<div class='slotValue'>	Sets the value of valueSequence with the key keySymbol. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>atRemove(keySymbol)</div>
<div class='slotValue'>	Removes the specified key. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>begin</div>
<div class='slotValue'>	Begin transaction. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>	Closes the database.
</div>
</div>
<div class='slot'>
<div class='slotName'>commit</div>
<div class='slotValue'>	Commit transaction. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>cursorFirst</div>
<div class='slotValue'>	Move cursor to first record. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>cursorJumpBackward(key)</div>
<div class='slotValue'>	Move cursor to previous record around key. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>cursorJumpForward(key)</div>
<div class='slotValue'>	Move cursor to next record around key. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>cursorKey</div>
<div class='slotValue'>	Returns current cursor key or nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>cursorLast</div>
<div class='slotValue'>	Move cursor to last record. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>cursorNext</div>
<div class='slotValue'>	Move cursor to next record. Returns true if there is another key, 
	or false if there is no next record.
</div>
</div>
<div class='slot'>
<div class='slotName'>cursorPrevious</div>
<div class='slotValue'>	Move cursor to previous record. Returns true if there is another key, 
	or false if there is no previous record.
</div>
</div>
<div class='slot'>
<div class='slotName'>cursorPut(value)</div>
<div class='slotValue'>	Sets the value at the current cursor postion. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>cursorRemove</div>
<div class='slotValue'>	Removes the current cursor postion. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>cursorValue</div>
<div class='slotValue'>	Returns current cursor value or nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>name</div>
<div class='slotValue'>	Returns the name of the database.
</div>
</div>
<div class='slot'>
<div class='slotName'>open(path)</div>
<div class='slotValue'>	Opens the database.
</div>
</div>
<div class='slot'>
<div class='slotName'>optimize</div>
<div class='slotValue'>	Optimizes the database. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>size</div>
<div class='slotValue'>	Returns number of records in database. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>sizeAt(keySymbol)</div>
<div class='slotValue'>	Returns the size of the value at the given key or nil if there is no such key.
</div>
</div>
<div class='slot'>
<div class='slotName'>sync</div>
<div class='slotValue'>	Syncs the database. Returns self
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>SQLite</div>
<a name='SQLite.SQLite'></a>
<div class='class'>
<div class='className'>SQLite</div>
<div class='classDescription'>SQLite provides a embedded simple and fast (2x faster than PostgreSQL or MySQL) SQL database. See http://www.hwaci.com/sw/sqlite/ for details. It's SQL command set is described at http://www.hwaci.com/sw/sqlite/lang.html. SQLite was written by Dr. Richard Hipp who offers consulting services for custom modifications and support of SQLite. Example:
<pre>	
db := SQLite clone
db setPath("myDatabase.sqlite")
db open
db exec("CREATE TABLE Dbm (key, value)")
db exec("CREATE INDEX DbmIndex ON Dbm (key)")
db exec("INSERT INTO Dbm ('key', 'value') VALUES ('a', '123')")
db exec("INSERT INTO Dbm ('key', 'value') VALUES ('a', 'efg')")
rows := db exec("SELECT key, value FROM Dbm WHERE key='a'")
db exec("DELETE FROM Dbm WHERE key='a'")
rows := db exec("SELECT key, value FROM Dbm WHERE key='a'")
db close
</pre>
</div>
<div class='slot'>
<div class='slotName'>changes</div>
<div class='slotValue'>	Returns the number of rows that were changed by the most 
	recent SQL statement. Or Nil if the database is closed.
</div>
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>	Closes the database if it is open. Returns self. 
	If the database is open when the open is garbage collected, 
	it will be automatically closed.
</div>
</div>
<div class='slot'>
<div class='slotName'>columnNamesOfTable(tableName)</div>
<div class='slotValue'>	Returns a list containing the names of all columns in the specified table.
</div>
</div>
<div class='slot'>
<div class='slotName'>debugOff</div>
<div class='slotValue'>	Turns off debugging.
</div>
</div>
<div class='slot'>
<div class='slotName'>debugOn</div>
<div class='slotValue'>	Turns on debugging.
</div>
</div>
<div class='slot'>
<div class='slotName'>error</div>
<div class='slotValue'>	Results a string containing the current error. 
	If there is no error, Nil is returned.
</div>
</div>
<div class='slot'>
<div class='slotName'>escapeString(aString)</div>
<div class='slotValue'>	Returns a translated version of aString by making two 
	copies of every single-quote (') character. This has the effect 
	of escaping the end-of-string meaning of single-quote within a string literal.
</div>
</div>
<div class='slot'>
<div class='slotName'>exec(aString)</div>
<div class='slotValue'>	Opens the database if it is not already open and executes
	aString as an sql command. Results a List of Map objects or Nil if
	there was an error. Each map holds the contents of a row.
	The key/value pairs of the maps being column name/column value
	pairs for a row. ")
</div>
</div>
<div class='slot'>
<div class='slotName'>isOpen</div>
<div class='slotValue'>	Returns true if the database is open, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>lastInsertRowId</div>
<div class='slotValue'>	Returns the number with the row id of the last row inserted.
</div>
</div>
<div class='slot'>
<div class='slotName'>open(optionalPathString)</div>
<div class='slotValue'>	Opens the database.Returns self on success or nil upon failure.
	If the databse is locked, "yield" will be called until it is 
	accessable or timeoutSeconds has expired.
</div>
</div>
<div class='slot'>
<div class='slotName'>path</div>
<div class='slotValue'>	Returns the path to the database file.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPath(aSeq)</div>
<div class='slotValue'>	Sets the path to the database file. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setTimeoutSeconds(aNumber)</div>
<div class='slotValue'>	Sets the open timeout to aNumber. If aNumber is 0, an open 
	call will never timeout. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>tableNames</div>
<div class='slotValue'>	Returns a list containing the names of all tables in the database.
</div>
</div>
<div class='slot'>
<div class='slotName'>timeoutSeconds</div>
<div class='slotValue'>	Returns the number of seconds to wait before timing out an open call. 
	If the number is 0, an open call will never timeout.
</div>
</div>
<div class='slot'>
<div class='slotName'>version</div>
<div class='slotValue'>	Results a string the version of SQLite being used.
</div>
</div>
<div class='slot'>
<div class='slotName'>viewNames</div>
<div class='slotValue'>	Returns a list containing the names of all views in the database.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>SQLite3</div>
<a name='SQLite3.SQLite3'></a>
<div class='class'>
<div class='className'>SQLite3</div>
<div class='classDescription'>	SQLite provides a embedded simple and fast 
	(2x faster than PostgreSQL or MySQL) SQL database. 
	See http://www.hwaci.com/sw/sqlite/ for details. 
	It's SQL command set is described 
	at http://www.hwaci.com/sw/sqlite/lang.html. 
	SQLite was written by Dr. Richard Hipp who offers consulting 
	services for custom modifications and support of SQLite. Example:
	<p>
<pre>	
db := SQLite clone
db setPath("myDatabase.sqlite")
db open
db exec("CREATE TABLE Dbm (key, value)")
db exec("CREATE INDEX DbmIndex ON Dbm (key)")
db exec("INSERT INTO Dbm ('key', 'value') VALUES ('a', '123')")
db exec("INSERT INTO Dbm ('key', 'value') VALUES ('a', 'efg')")
rows := db exec("SELECT key, value FROM Dbm WHERE key='a'")
db exec("DELETE FROM Dbm WHERE key='a'")
rows := db exec("SELECT key, value FROM Dbm WHERE key='a'")
db close
</pre>
</div>
<div class='slot'>
<div class='slotName'>changes</div>
<div class='slotValue'>	Returns the number of rows that were changed by the most
	recent SQL statement. Or Nil if the database is closed.
</div>
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>	Closes the database if it is open. Returns self. If the database is open when the open is garbage collected, it will be automatically closed.
</div>
</div>
<div class='slot'>
<div class='slotName'>columnNamesOfTable(tableName)</div>
<div class='slotValue'>	Returns a list containing the names of all columns in the specified table.
</div>
</div>
<div class='slot'>
<div class='slotName'>debugOff</div>
<div class='slotValue'>	Turns off debugging.
</div>
</div>
<div class='slot'>
<div class='slotName'>debugOn</div>
<div class='slotValue'>	Turns on debugging.
</div>
</div>
<div class='slot'>
<div class='slotName'>error</div>
<div class='slotValue'>	Results a string containing the current error. If there is no error, Nil is returned.
</div>
</div>
<div class='slot'>
<div class='slotName'>escapeString(aString)</div>
<div class='slotValue'>	Returns a translated version of aString by making two copies of 
	every single-quote (') character. This has the effect of escaping the 
	end-of-string meaning of single-quote within a string literal.
</div>
</div>
<div class='slot'>
<div class='slotName'>exec(aString)</div>
<div class='slotValue'>	Opens the database if it is not already open and executes
	aString as an sql command. Results a List of Map objects or Nil if
	there was an error. Each map holds the contents of a row.
	The key/value pairs of the maps being column name/column value
	pairs for a row.
</div>
</div>
<div class='slot'>
<div class='slotName'>isOpen</div>
<div class='slotValue'>	Returns true if the database is open, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>lastInsertRowId</div>
<div class='slotValue'>	Returns the number with the row id of the last row inserted.
</div>
</div>
<div class='slot'>
<div class='slotName'>open(optionalPathString)</div>
<div class='slotValue'>	Opens the database. If there is an optionalPathString argument,
	the path is set to it's value before opening the database. If path is "" or ":memory:"
	a database will be created in-memory, otherwise the file specified by path is opened.
	Returns self or Nil upon failure.

	If the databse is locked, "yield" will be called until it is accessable or
	timeoutSeconds has expired. ""
</div>
</div>
<div class='slot'>
<div class='slotName'>path</div>
<div class='slotValue'>	Returns the path to the database file.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPath</div>
<div class='slotValue'>	Sets the path to the database file. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setTimeoutSeconds(aNumber)</div>
<div class='slotValue'>	Sets the open timeout to aNumber. If aNumber is 0, an open
	call will never timeout. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>tableNames</div>
<div class='slotValue'>	Returns a list containing the names of all tables in the database.
</div>
</div>
<div class='slot'>
<div class='slotName'>timeoutSeconds</div>
<div class='slotValue'>	Returns the number of seconds to wait before timing out an
	open call. If the number is 0, an open call will never timeout.
</div>
</div>
<div class='slot'>
<div class='slotName'>version</div>
<div class='slotValue'>	Results a string the version of SQLite being used.
</div>
</div>
<div class='slot'>
<div class='slotName'>viewNames</div>
<div class='slotValue'>	Returns a list containing the names of all
	views in the database.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>SkipDB</div>
<a name='SkipDB.SkipDB'></a>
<div class='class'>
<div class='className'>SkipDB</div>
<div class='classDescription'>An ordered key/value database implemented using a skiplist data structure.
</div>
<div class='slot'>
<div class='slotName'>at(keySymbol)</div>
<div class='slotValue'>	Returns a Sequence for the value at the given key or nil if there is no such key.
</div>
</div>
<div class='slot'>
<div class='slotName'>atPut(keySymbol, valueSequence)</div>
<div class='slotValue'>	Sets the value of valueSequence with the key keySymbol. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>atRemove(keySymbol)</div>
<div class='slotValue'>	Removes the specified key. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>cursor</div>
<div class='slotValue'>	Returns a new cursor to enumerate the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>headerPid</div>
<div class='slotValue'>	Returns the headerPid number.
</div>
</div>
<div class='slot'>
<div class='slotName'>size</div>
<div class='slotValue'>	Returns the number of keys in the receiver.
</div>
</div>
</div>
<a name='SkipDB.SkipDBCursor'></a>
<div class='class'>
<div class='className'>SkipDBCursor</div>
<div class='classDescription'>An iterator object for a SkipDB.
</div>
<div class='slot'>
<div class='slotName'>first</div>
<div class='slotValue'>	Move cursor to first item. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>goto(aKey)</div>
<div class='slotValue'>	Move cursor to the specified key or nearest preceeding key. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>key</div>
<div class='slotValue'>	Returns the current cursor key, or nil if the cursor is out of range.
</div>
</div>
<div class='slot'>
<div class='slotName'>last</div>
<div class='slotValue'>	Move cursor to last item. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>next</div>
<div class='slotValue'>	Move cursor to next item. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>previous</div>
<div class='slotValue'>	Move cursor to previous item. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>value</div>
<div class='slotValue'>	Returns the current cursor key, or nil if the cursor is out of range.
</div>
</div>
</div>
<a name='SkipDB.SkipDBM'></a>
<div class='class'>
<div class='className'>SkipDBM</div>
<div class='classDescription'>SkipDB is a skip-list based key-value database. SkipDBM manages any number of skipdbs within the same file. 
The root skipdb can be accessed using the root method.
</div>
<div class='slot'>
<div class='slotName'>at(pidNumber)</div>
<div class='slotValue'>	Returns the SkipDB at the specified persistent ID or nil if it is not found.
</div>
</div>
<div class='slot'>
<div class='slotName'>beginTransaction</div>
<div class='slotValue'>	Begin a transaction. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>	Closes the dbm.
</div>
</div>
<div class='slot'>
<div class='slotName'>commitTransaction</div>
<div class='slotValue'>	Commit a transaction. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>compact</div>
<div class='slotValue'>	Compacts the database. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>delete</div>
<div class='slotValue'>	Deletes the db. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>open</div>
<div class='slotValue'>	Opens the dbm. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>path</div>
<div class='slotValue'>	Returns the path to the dbm. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>root</div>
<div class='slotValue'>	Returns the root SkipDB.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPath(aString)</div>
<div class='slotValue'>	Sets the path to the dbm folder. Returns self.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>SqlDatabase</div>
<a name='SqlDatabase.SqlDatabase'></a>
<div class='class'>
<div class='className'>SqlDatabase</div>
</div>
</div>
<div class='package'>
<div class='packageName'>TagDB</div>
<a name='TagDB.TagDB'></a>
<div class='class'>
<div class='className'>TagDB</div>
<div class='classDescription'>Binding for <a href=http://www.dekorte.com/projects/opensource/tagdb/>tagdb</a> - a tagging database usefull for flickr-like tag searches.
<p>
Example use:
<pre>
tdb := TagDB clone

tdb setPath("test")
tdb open

writeln("size = ", tdb size)
tdb atKeyPutTags("f430 for sale", list("red", "ferrari"))
tdb atKeyPutTags("lotus esprit", list("lotus", "esprit"))
writeln("size = ", tdb size)
keys := tdb keysForTags(list("lotus"))
writeln("keys = ", tdb symbolForId(keys at(0)))
tdb close
tdb delete
</pre>
</div>
<div class='slot'>
<div class='slotName'>allUniqueTagIds</div>
<div class='slotValue'>	Returns a list of all unique tag ids.
</div>
</div>
<div class='slot'>
<div class='slotName'>atKeyPutTags(key, tagNameList)</div>
<div class='slotValue'>	Sets the tags for key to those in tagNameList. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>	Close the tagdb. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>delete</div>
<div class='slotValue'>	Deletes all keys in the database.
</div>
</div>
<div class='slot'>
<div class='slotName'>idForSymbol(aSeq)</div>
<div class='slotValue'>	Returns the TagDB id Number for the symbol specified by aSeq.
</div>
</div>
<div class='slot'>
<div class='slotName'>keyAtIndex(indexNumber)</div>
<div class='slotValue'>	Returns the key at the specified index of nil if the index is out of range.
</div>
</div>
<div class='slot'>
<div class='slotName'>keysForTags(aTagNameList)</div>
<div class='slotValue'>	Returns list of keys whose tags contain all of the tags in aTagNameList.
</div>
</div>
<div class='slot'>
<div class='slotName'>open</div>
<div class='slotValue'>	Open the tagdb. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeKey(aKey)</div>
<div class='slotValue'>	Removes the specified key if it is present. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPath(aPath)</div>
<div class='slotValue'>	Sets the path to the tag database. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>size</div>
<div class='slotValue'>	Returns number of keys in the database.
</div>
</div>
<div class='slot'>
<div class='slotName'>symbolForId(aNumber)</div>
<div class='slotValue'>	Returns the TagDB symbol for aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>tagsAtKey(key)</div>
<div class='slotValue'>	Returns the tags for the specified key.
</div>
</div>
<div class='slot'>
<div class='slotName'>uniqueTagNames</div>
<div class='slotValue'>Returns a list of all unique tag names.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>TokyoCabinet</div>
<a name='TokyoCabinet.TokyoCabinet'></a>
<div class='class'>
<div class='className'>TokyoCabinet</div>
<div class='classDescription'>An ordered key/value database that supports transactions and arbitrary key and value sizes.
</div>
<div class='slot'>
<div class='slotName'>abort</div>
<div class='slotValue'>	Abort transaction. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>at(keySymbol)</div>
<div class='slotValue'>	Returns a Sequence for the value at the given key or nil if there is no such key.
</div>
</div>
<div class='slot'>
<div class='slotName'>atApple(keySymbol, valueSequence)</div>
<div class='slotValue'>	Appends valueSequence to the current value at keySymbol. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>atPut(keySymbol, valueSequence)</div>
<div class='slotValue'>	Sets the value of valueSequence with the key keySymbol. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>atRemove(keySymbol)</div>
<div class='slotValue'>	Removes the specified key. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>begin</div>
<div class='slotValue'>	Begin transaction. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>	Closes the database.
</div>
</div>
<div class='slot'>
<div class='slotName'>commit</div>
<div class='slotValue'>	Commit transaction. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>compareType</div>
<div class='slotValue'>Returns the compare type function name used.
</div>
</div>
<div class='slot'>
<div class='slotName'>cursor</div>
<div class='slotValue'>	Returns a new cursor object.
</div>
</div>
<div class='slot'>
<div class='slotName'>open(path)</div>
<div class='slotValue'>	Opens the database.
</div>
</div>
<div class='slot'>
<div class='slotName'>optimize</div>
<div class='slotValue'>	Optimizes the database. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>path</div>
<div class='slotValue'>Returns the path of the database file.
</div>
</div>
<div class='slot'>
<div class='slotName'>prefixCursor</div>
<div class='slotValue'>	Returns a new prefix cursor object.
</div>
</div>
<div class='slot'>
<div class='slotName'>setCompareType(name)</div>
<div class='slotValue'>	Sets the compare type function used to compare keys in the database. Valid compare types include:
	"lexical", "decimal", "int32", "int64" and "path". Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPath(aPath)</div>
<div class='slotValue'> Sets the path of the database file. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>size</div>
<div class='slotValue'>	Returns number of records in the database. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>sizeAt(keySymbol)</div>
<div class='slotValue'>	Returns the size of the value at the given key or nil if there is no such key.
</div>
</div>
<div class='slot'>
<div class='slotName'>sync</div>
<div class='slotValue'>	Syncs the database. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>transactionalAtPut(key, value)</div>
<div class='slotValue'> Transactionally insert the given key and value. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>transactionalRemoveAt(key)</div>
<div class='slotValue'> Transactionally remove the given key. Returns self.
</div>
</div>
</div>
<a name='TokyoCabinet.TokyoCabinetCursor'></a>
<div class='class'>
<div class='className'>TokyoCabinetCursor</div>
<div class='classDescription'>A database cursor.
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>	Closes the database.
</div>
</div>
<div class='slot'>
<div class='slotName'>first</div>
<div class='slotValue'>	Move cursor to first record. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>jump(key)</div>
<div class='slotValue'>	Move cursor to record before key. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>key</div>
<div class='slotValue'>	Returns current cursor key or nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>last</div>
<div class='slotValue'>	Move cursor to last record. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>next</div>
<div class='slotValue'>	Move cursor to next record. Returns true if there is another key, 
	or false if there is no next record.
</div>
</div>
<div class='slot'>
<div class='slotName'>previous</div>
<div class='slotValue'>	Move cursor to previous record. Returns true if there is another key, 
	or false if there is no previous record.
</div>
</div>
<div class='slot'>
<div class='slotName'>put(value)</div>
<div class='slotValue'>	Sets the value at the current cursor postion. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>remove</div>
<div class='slotValue'>	Removes the current cursor postion. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>value</div>
<div class='slotValue'>	Returns current cursor value or nil.
</div>
</div>
</div>
<a name='TokyoCabinet.TokyoCabinetPrefixCursor'></a>
<div class='class'>
<div class='className'>TokyoCabinetPrefixCursor</div>
<div class='classDescription'>A database cursor.
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>	Closes the database.
</div>
</div>
<div class='slot'>
<div class='slotName'>first</div>
<div class='slotValue'>	Move cursor to first record. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>jump(key)</div>
<div class='slotValue'>	Move cursor to record before key. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>key</div>
<div class='slotValue'>	Returns current cursor key or nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>last</div>
<div class='slotValue'>	Move cursor to last record. Returns self
</div>
</div>
<div class='slot'>
<div class='slotName'>next</div>
<div class='slotValue'>	Move cursor to next record. Returns true if there is another key, 
	or false if there is no next record.
</div>
</div>
<div class='slot'>
<div class='slotName'>previous</div>
<div class='slotValue'>	Move cursor to previous record. Returns true if there is another key, 
	or false if there is no previous record.
</div>
</div>
<div class='slot'>
<div class='slotName'>put(value)</div>
<div class='slotValue'>	Sets the value at the current cursor postion. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>remove</div>
<div class='slotValue'>	Removes the current cursor postion. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>value</div>
<div class='slotValue'>	Returns current cursor value or nil.
</div>
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Digests</div>
<div class='package'>
<div class='packageName'>MD5</div>
<a name='MD5.MD5'></a>
<div class='class'>
<div class='className'>MD5</div>
<div class='classDescription'>An object for calculating MD5 hashes. Each hash calculation should instantiate its own MD5 instance.
<p>
Example:
<pre>
digest := MD5 clone
digest appendSeq("this is a message")
out := digest md5String
</pre>
</div>
<div class='slot'>
<div class='slotName'>appendSeq(aSequence)</div>
<div class='slotValue'>	Appends aSequence to the hash calculation. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>md5</div>
<div class='slotValue'>	Completes the MD5 calculation and returns the hash as a Buffer. Once this method is called, append() should not be called again on the receiver or it will raise an exception.
</div>
</div>
<div class='slot'>
<div class='slotName'>md5String</div>
<div class='slotValue'>	Returns a string containing a hexadecimal representation of the md5 hash.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>SHA1</div>
<a name='SHA1.SHA1'></a>
<div class='class'>
<div class='className'>SHA1</div>
<div class='classDescription'>An object for calculating SHA1 hashes. Each hash calculation 
should instantiate its own SHA1 instance.

<p>
Example:
<pre>
digest := SHA1 clone
digest appendSeq("this is a message")
out := digest md5String
</pre>
</div>
<div class='slot'>
<div class='slotName'>appendSeq(aSequence)</div>
<div class='slotValue'>	Appends aSequence to the hash calculation. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>sha1</div>
<div class='slotValue'>	Completes the SHA1 calculation and returns the hash as a Buffer.
	Once this method is called, append() should not be called again on the receiver or it will raise an exception.
</div>
</div>
<div class='slot'>
<div class='slotName'>sha1String</div>
<div class='slotValue'>	Returns a string containing a hexadecimal representation of the sha1 hash.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>UUID</div>
<a name='UUID.UUID'></a>
<div class='class'>
<div class='className'>UUID</div>
<div class='classDescription'>	Generates <a href=http://en.wikipedia.org/wiki/Universally_Unique_Identifier>Universally Unique Identifiers </a> (UUID/GUID).
</div>
<div class='slot'>
<div class='slotName'>urn</div>
<div class='slotValue'>Returns the uuid with "urn:uuid:" prepended to it.
</div>
</div>
<div class='slot'>
<div class='slotName'>uuid</div>
<div class='slotValue'>	Returns a new uuid in string format.
</div>
</div>
<div class='slot'>
<div class='slotName'>uuidRandom</div>
<div class='slotValue'>	Returns a new random uuid (type 4) in string format.
</div>
</div>
<div class='slot'>
<div class='slotName'>uuidTime</div>
<div class='slotValue'>	Returns a new time and mac uuid (type 1) in string format.
</div>
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Encryption</div>
<div class='package'>
<div class='packageName'>Blowfish</div>
<a name='Blowfish.Blowfish'></a>
<div class='class'>
<div class='className'>Blowfish</div>
<div class='classDescription'>The Blowfish object can be used to do encryption and decryption using 
the <a href=http://en.wikipedia.org/wiki/Blowfish_(cipher)>Blowfish</a> keyed, symmetric block cipher.
<p>
Example encryption and decription;

<pre>	
key := "secret"
data := "this is a message"

encryptedData := Blowfish clone setKey(key) encrypt(data)
decryptedData := Blowfish clone setKey(key) decrypt(encryptedData)
</pre>	

Or using the stream API:
<pre>	
key := "secret"
data := "this is a message"

cipher = Blowfish clone
cipher setIsEncrypting(true)
cipher setKey(key)
cipher beginProcessing
cipher inputBuffer appendSeq(data)
cipher process
cipher endProcess
encryptedData := cipher outputBuffer

cipher = Blowfish clone
cipher setIsEncrypting(false)
cipher setKey(key)
cipher beginProcessing
cipher inputBuffer appendSeq(encryptedData)
cipher process
cipher endProcess
decryptedData := cipher outputBuffer
</pre>
</div>
<div class='slot'>
<div class='slotName'>beginProcessing</div>
<div class='slotValue'>	Sets the key from the key slot and initializes the cipher.
</div>
</div>
<div class='slot'>
<div class='slotName'>decrypt(aSequence)</div>
<div class='slotValue'> Returns an decrypted version of aSequence.
</div>
</div>
<div class='slot'>
<div class='slotName'>encrypt(aSequence)</div>
<div class='slotValue'> Returns an encrypted version of aSequence.
</div>
</div>
<div class='slot'>
<div class='slotName'>endProcessing</div>
<div class='slotValue'>	Finish processing remaining bytes of inputBuffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>inputBuffer</div>
<div class='slotValue'>Returns the input buffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>outputBuffer</div>
<div class='slotValue'>Returns the output buffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>process</div>
<div class='slotValue'>	Process the inputBuffer and appends the result to the outputBuffer.
	The processed inputBuffer is emptied except for the spare 
	bytes at the end which don't fit into a cipher block.
</div>
</div>
<div class='slot'>
<div class='slotName'>setIsEncrypting(aBool)</div>
<div class='slotValue'>	If aBool is true, encrypting mode is on, otherwise, decrypting mode is on.
</div>
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Filesystem</div>
<div class='package'>
<div class='packageName'>AsyncRequest</div>
<a name='AsyncRequest.AsyncRequest'></a>
<div class='class'>
<div class='className'>AsyncRequest</div>
<div class='classDescription'>Used for doing asynchronous file i/o. When this addon is loaded, it will override
the File proto's readToBufferLength, readBufferOfLength and write methods to 
automatically use AsyncRequests. 
<p>
Note: This addon is only needed for async file requests - all socket ops are already
asynchronous in Io.
</div>
<div class='slot'>
<div class='slotName'>cancel</div>
<div class='slotValue'>	Cancels the request. Returns nil on error or self otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>copyBufferto(aSeq)</div>
<div class='slotValue'>	Copies the request buffer's data to aSeq.
	Returns nil on error or self otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>descriptor</div>
<div class='slotValue'>	Returns the descriptor for the request.
</div>
</div>
<div class='slot'>
<div class='slotName'>error</div>
<div class='slotValue'>	Returns sequence containing the last error or nil otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isDone</div>
<div class='slotValue'>	Returns true if the request is done, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>numberOfBytes</div>
<div class='slotValue'>	Returns the number of bytes associated with the request.
</div>
</div>
<div class='slot'>
<div class='slotName'>position</div>
<div class='slotValue'>	Returns a Number for the position of the descriptor.
</div>
</div>
<div class='slot'>
<div class='slotName'>read(aSeq, numberOfBytes)</div>
<div class='slotValue'>	Submits an async read request. Returns nil on error, self otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>setDescriptor(aDescriptorNumber)</div>
<div class='slotValue'>	Sets the descriptor for the receiver. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>sync</div>
<div class='slotValue'>	Waits for the request to complete. Returns nil on error or self otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>write(fileOffset, aSeq, bufferOffset, numberOfBytesToWrite)</div>
<div class='slotValue'>	Submits an async write request. Returns nil on error, self otherwise.
</div>
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Graphics</div>
<div class='package'>
<div class='packageName'>Box</div>
<a name='Box.Box'></a>
<div class='class'>
<div class='className'>Box</div>
<div class='classDescription'>A primitive for fast operations on rectangles.
</div>
<div class='slot'>
<div class='slotName'>Union(aBox)</div>
<div class='slotValue'>	Returns a new box containing the 2d union of the receiver and aBox.
</div>
</div>
<div class='slot'>
<div class='slotName'>containsPoint(aPoint)</div>
<div class='slotValue'>	Returns true if aPoint is within the receiver's bounds, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>copy(aBox)</div>
<div class='slotValue'>	Copies the values of aBox to the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>depth</div>
<div class='slotValue'>	Same as; size z
</div>
</div>
<div class='slot'>
<div class='slotName'>height</div>
<div class='slotValue'>	Same as; size y
</div>
</div>
<div class='slot'>
<div class='slotName'>intersectsBox(aBox)</div>
<div class='slotValue'>	Returns true if aBox is within the receiver's bounds, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>origin</div>
<div class='slotValue'>	Returns the point object for the origin of the box.
</div>
</div>
<div class='slot'>
<div class='slotName'>print</div>
<div class='slotValue'>	Prints a string representation of the receiver to the standard output.
</div>
</div>
<div class='slot'>
<div class='slotName'>set(origin, size)</div>
<div class='slotValue'>	Copies the values in origin and size to set the box's origin and size.
</div>
</div>
<div class='slot'>
<div class='slotName'>setOrigin(aPoint)</div>
<div class='slotValue'>	Copies the values in aPoint to the box's origin point.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSize(aPoint)</div>
<div class='slotValue'>	Copies the values in aPoint to the box's size point.
</div>
</div>
<div class='slot'>
<div class='slotName'>size</div>
<div class='slotValue'>	Returns the point object for the size of the box.
</div>
</div>
<div class='slot'>
<div class='slotName'>width</div>
<div class='slotValue'>	Same as; size x
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Cairo</div>
<a name='Cairo.Cairo'></a>
<div class='class'>
<div class='className'>Cairo</div>
<div class='classDescription'>Cairo is a 2D graphics library. http://cairographics.org/
</div>
</div>
<a name='Cairo.CairoContext'></a>
<div class='class'>
<div class='className'>CairoContext</div>
</div>
<a name='Cairo.CairoExtents'></a>
<div class='class'>
<div class='className'>CairoExtents</div>
</div>
<a name='Cairo.CairoFontExtents'></a>
<div class='class'>
<div class='className'>CairoFontExtents</div>
</div>
<a name='Cairo.CairoFontFace'></a>
<div class='class'>
<div class='className'>CairoFontFace</div>
</div>
<a name='Cairo.CairoFontOptions'></a>
<div class='class'>
<div class='className'>CairoFontOptions</div>
</div>
<a name='Cairo.CairoGlyph'></a>
<div class='class'>
<div class='className'>CairoGlyph</div>
</div>
<a name='Cairo.CairoGradient'></a>
<div class='class'>
<div class='className'>CairoGradient</div>
</div>
<a name='Cairo.CairoImageSurface'></a>
<div class='class'>
<div class='className'>CairoImageSurface</div>
</div>
<a name='Cairo.CairoLinearGradient'></a>
<div class='class'>
<div class='className'>CairoLinearGradient</div>
</div>
<a name='Cairo.CairoMatrix'></a>
<div class='class'>
<div class='className'>CairoMatrix</div>
</div>
<a name='Cairo.CairoPath'></a>
<div class='class'>
<div class='className'>CairoPath</div>
</div>
<a name='Cairo.CairoPathElement'></a>
<div class='class'>
<div class='className'>CairoPathElement</div>
</div>
<a name='Cairo.CairoPattern'></a>
<div class='class'>
<div class='className'>CairoPattern</div>
</div>
<a name='Cairo.CairoRadialGradient'></a>
<div class='class'>
<div class='className'>CairoRadialGradient</div>
</div>
<a name='Cairo.CairoRectangle'></a>
<div class='class'>
<div class='className'>CairoRectangle</div>
</div>
<a name='Cairo.CairoScaledFont'></a>
<div class='class'>
<div class='className'>CairoScaledFont</div>
</div>
<a name='Cairo.CairoSolidPattern'></a>
<div class='class'>
<div class='className'>CairoSolidPattern</div>
</div>
<a name='Cairo.CairoSurface'></a>
<div class='class'>
<div class='className'>CairoSurface</div>
</div>
<a name='Cairo.CairoSurfacePattern'></a>
<div class='class'>
<div class='className'>CairoSurfacePattern</div>
</div>
<a name='Cairo.CairoTextExtents'></a>
<div class='class'>
<div class='className'>CairoTextExtents</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Font</div>
<a name='Font.Font'></a>
<div class='class'>
<div class='className'>Font</div>
<div class='classDescription'>The Font object can be used to load and render TypeTrype fonts. Example use;
<pre>	
// within a GLUT display callback...

timesFont = Font clone open(\"times.ttf\")
if (timesFont error, write(\"Error loading font: \", timesFont error, \"\n\"); return)
timesFont setPointSize(16)
glColor(0,0,0,1)
timesFont draw(\"This is a test.\")
</pre>	

<b>Rendering fonts using OpenGL textures</b>
<p>
Smaller fonts (those having a point size around 30 or smaller, depending on the font) will automatically be cached in and rendered from a texture. This technique is very fast and should support rendering speeds as fast (or faster than) those of typical desktop font rendering systems. Larger font sizes(due to texture memory constraints) will be rendered to a pixelmap when displayed. Thanks to Mike Austin for implementing the font texturing system.
</div>
<div class='slot'>
<div class='slotName'>drawString(aString, optionalStartIndex, optionalEndIndex)</div>
<div class='slotValue'>	Draws aString using the optional start and end indexes, if supplied. Returns self.
<p>
Note; Fonts are drawn as RGBA pixel maps. These blending options are recommended:
<pre>	
glEnable(GL_BLEND)
glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>error</div>
<div class='slotValue'>	Returns the current error string or nil if there is no error.
</div>
</div>
<div class='slot'>
<div class='slotName'>isTextured</div>
<div class='slotValue'>	Returns true if the font is being cached in and rendered from a texture, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>open(optionalPath)</div>
<div class='slotValue'>	Opens the font. Sets path using optionalPath if supplied. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>path</div>
<div class='slotValue'>	Returns the Font path.
</div>
</div>
<div class='slot'>
<div class='slotName'>pixelHeight</div>
<div class='slotValue'>	Returns the height of the font measured in pixels.
</div>
</div>
<div class='slot'>
<div class='slotName'>pixelSize</div>
<div class='slotValue'>	Returns the font's pixelSize.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPath(aString)</div>
<div class='slotValue'>	Sets the Font path. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPixelSize(aNumber)</div>
<div class='slotValue'>	Sets the size of the font in pixels. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>stringIndexAtWidth(aString, startIndex, width)</div>
<div class='slotValue'>	Returns the max index of the character in String (starting at startIndex) 
	that fits within width.
</div>
</div>
<div class='slot'>
<div class='slotName'>widthOfCharacter(aNumber)</div>
<div class='slotValue'>	Returns the width of the character specified by aNumber in the receiver's font.
</div>
</div>
<div class='slot'>
<div class='slotName'>widthOfString(aString)</div>
<div class='slotValue'>	Returns a Number with the width that aString would render 
	to with the receiver's current settings.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>GLFW</div>
<a name='GLFW.GLFW'></a>
<div class='class'>
<div class='className'>GLFW</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Image</div>
<a name='Image.Image'></a>
<div class='class'>
<div class='className'>Image</div>
<div class='classDescription'>The Image object can read and draw images and provide the image 
data as a buffer. Example use:
<pre>	
image = Image clone open("curly.png")
image draw
image scaleTo(image width / 2, image height / 2)
image save("curly.tiff")
</pre>	
When loading an attempt will be made to convert the image into whichever 
of the following formats it is closest to: L8, LA8, RGB8, RGBA8.
<p>
Currently supported formats include PNG(which supports alpha), JPG and TIFF.
</div>
<div class='slot'>
<div class='slotName'>addAlpha</div>
<div class='slotValue'>	Adds an opaque alpha component if the image is in RGB format and does not already contain one.  Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>averageColor</div>
<div class='slotValue'>	Returns the average RGB color of all pixels in the image.
</div>
</div>
<div class='slot'>
<div class='slotName'>baselineHeight</div>
<div class='slotValue'>	Returns the pixel height (relative to the bottom of the image) which first contains a non-white pixel or -1 if
	no baseline is found.
</div>
</div>
<div class='slot'>
<div class='slotName'>bounds(cutoff)</div>
<div class='slotValue'>	Returns an object continaing the bounds of the image. Cutoff is max bound color value for any color component.
	If it is negative, it is the min bound color value.
</div>
</div>
<div class='slot'>
<div class='slotName'>componentCount</div>
<div class='slotValue'>	Returns the number of color components in the receiver as a Number.
</div>
</div>
<div class='slot'>
<div class='slotName'>crop(x, y, width, height)</div>
<div class='slotValue'>	Crops the image to the specified values. Returns self.
	Raises an exception on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>data</div>
<div class='slotValue'>	Returns a Buffer primitive containing the image data (loading it first if needed). 
	Manipulating this data will affect what is drawn when the receiver's draw method is called.
</div>
</div>
<div class='slot'>
<div class='slotName'>decodingHeightHint</div>
<div class='slotValue'>	Returns the decoding height hint.
</div>
</div>
<div class='slot'>
<div class='slotName'>decodingWidthHint</div>
<div class='slotValue'>	Returns the decoding width hint.
</div>
</div>
<div class='slot'>
<div class='slotName'>encodingQuality</div>
<div class='slotValue'>	Returns the encodingQuality setting.
</div>
</div>
<div class='slot'>
<div class='slotName'>error</div>
<div class='slotValue'>	Returns a String containing the current error or nil if there is no error.
</div>
</div>
<div class='slot'>
<div class='slotName'>flipX</div>
<div class='slotValue'>	Flips the image on the horizonal plane (left/right mirror). Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>flipY</div>
<div class='slotValue'>	Flips the image on the vertical plane (top/bottom mirror). Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>height</div>
<div class='slotValue'>	Returns the image hieght.
</div>
</div>
<div class='slot'>
<div class='slotName'>isL8</div>
<div class='slotValue'>	Returns true if the receiver is in L8 (8bit Luminance) format, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isLA8</div>
<div class='slotValue'>	Returns true if the receiver is in LA8 (8bit Luminance-Alpha) format, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isRGB8</div>
<div class='slotValue'>	Returns true if the receiver is in RGB8 format, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isRGBA8</div>
<div class='slotValue'>	Returns true if the receiver is in RGBA8 format, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>open(optionalPathString)</div>
<div class='slotValue'>	Sets the path to optionalPathString if provided and opens the image file. 
	Returns self on success, Nil on failure.
</div>
</div>
<div class='slot'>
<div class='slotName'>path</div>
<div class='slotValue'>	Returns the image path.
</div>
</div>
<div class='slot'>
<div class='slotName'>removeAlpha</div>
<div class='slotValue'>	Removes the alpha component if the image contains one.  Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>resizedTo(newWidth, newHeight)</div>
<div class='slotValue'> Scales the image up to newWidth x newHeight.  Returns the newly scaled image.
</div>
</div>
<div class='slot'>
<div class='slotName'>resizedTo(width, height)</div>
<div class='slotValue'>	Returns a new image of the receiver resized to the given width and height.
	Raises an exception on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>save(optionalPathString)</div>
<div class='slotValue'>	Sets the path to optionalPathString if provided and saves the image 
	in the format specified by the path extension. Returns self on success, nil on failure.
</div>
</div>
<div class='slot'>
<div class='slotName'>setDataWidthHeightComponentCount(aSequence, width, height, componentCount)</div>
<div class='slotValue'>	Sets the image data and its parameters. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setDecodingHeightHint(width)</div>
<div class='slotValue'>	Sets the decoding height hint. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setDecodingWidthHint(width)</div>
<div class='slotValue'>	Sets the decoding width hint. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setEncodingQuality(aNumber)</div>
<div class='slotValue'>	Sets the image encoding quality (range is 0.0 - 1.0, 1.0 with being the highest).
</div>
</div>
<div class='slot'>
<div class='slotName'>setPath(aString)</div>
<div class='slotValue'>	Sets the image path. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>width</div>
<div class='slotValue'>	Returns the image width.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>OpenGL</div>
<a name='OpenGL.Box'></a>
<div class='class'>
<div class='className'>Box</div>
<div class='classDescription'>A primitive for fast operations on rectangles.
</div>
<div class='slot'>
<div class='slotName'>Union(aBox)</div>
<div class='slotValue'>	Returns a new box containing the 2d union of the receiver and aBox.
</div>
</div>
<div class='slot'>
<div class='slotName'>containsPoint(aPoint)</div>
<div class='slotValue'>	Returns true if aPoint is within the receiver's bounds, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>copy(aBox)</div>
<div class='slotValue'>	Copies the values of aBox to the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>depth</div>
<div class='slotValue'>	Same as; size z
</div>
</div>
<div class='slot'>
<div class='slotName'>height</div>
<div class='slotValue'>	Same as; size y
</div>
</div>
<div class='slot'>
<div class='slotName'>intersectsBox(aBox)</div>
<div class='slotValue'>	Returns true if aBox is within the receiver's bounds, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>origin</div>
<div class='slotValue'>	Returns the point object for the origin of the box.
</div>
</div>
<div class='slot'>
<div class='slotName'>print</div>
<div class='slotValue'>	Prints a string representation of the receiver to the standard output.
</div>
</div>
<div class='slot'>
<div class='slotName'>set(origin, size)</div>
<div class='slotValue'>	Copies the values in origin and size to set the box's origin and size.
</div>
</div>
<div class='slot'>
<div class='slotName'>setOrigin(aPoint)</div>
<div class='slotValue'>	Copies the values in aPoint to the box's origin point.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSize(aPoint)</div>
<div class='slotValue'>	Copies the values in aPoint to the box's size point.
</div>
</div>
<div class='slot'>
<div class='slotName'>size</div>
<div class='slotValue'>	Returns the point object for the size of the box.
</div>
</div>
<div class='slot'>
<div class='slotName'>width</div>
<div class='slotValue'>	Same as; size x
</div>
</div>
</div>
<a name='OpenGL.GLApp'></a>
<div class='class'>
<div class='className'>GLApp</div>
</div>
<a name='OpenGL.GLScissor'></a>
<div class='class'>
<div class='className'>GLScissor</div>
</div>
<a name='OpenGL.GLU'></a>
<div class='class'>
<div class='className'>GLU</div>
<div class='slot'>
<div class='slotName'>gluScaleImage(formatIn, widthIn, heightIn, typeIn, dataSeqIn, widthOut, heightOut, typeOut, dataSeqOut)</div>
<div class='slotValue'>	Scales the image data in dataSeqIn and outputs the result to dataSeqOut.
	Returns error code as a Number.
</div>
</div>
</div>
<a name='OpenGL.GLUQuadric'></a>
<div class='class'>
<div class='className'>GLUQuadric</div>
</div>
<a name='OpenGL.GLUT'></a>
<div class='class'>
<div class='className'>GLUT</div>
</div>
<a name='OpenGL.OpenGL'></a>
<div class='class'>
<div class='className'>OpenGL</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Math</div>
<div class='package'>
<div class='packageName'>BigNum</div>
<a name='BigNum.BigNum'></a>
<div class='class'>
<div class='className'>BigNum</div>
<div class='classDescription'>A wrapper for <a href=http://gmplib.org/>GNU MP Bignum (arbitrary precision math) library</a>. 
Warning: GMP uses the restrictive GNU license which can be a problem if you are hard linking it into a distributed application.
</div>
<div class='slot'>
<div class='slotName'>%(aNum)</div>
<div class='slotValue'> Modulus op (same as mod()). Returns result.
</div>
</div>
<div class='slot'>
<div class='slotName'>&(aNum)</div>
<div class='slotValue'>  AND op. Returns result.
</div>
</div>
<div class='slot'>
<div class='slotName'>*(aNum)</div>
<div class='slotValue'> Multiply op. Returns result.
</div>
</div>
<div class='slot'>
<div class='slotName'>**(aNum)</div>
<div class='slotValue'> Power op. Returns result.
</div>
</div>
<div class='slot'>
<div class='slotName'>+(aNum)</div>
<div class='slotValue'> Add op. Returns result.
</div>
</div>
<div class='slot'>
<div class='slotName'>-(aNum)</div>
<div class='slotValue'> Subtract op. Returns result.
</div>
</div>
<div class='slot'>
<div class='slotName'>/(aNum)</div>
<div class='slotValue'> Divide op. Returns result.
</div>
</div>
<div class='slot'>
<div class='slotName'><<(aNum)</div>
<div class='slotValue'> Shift left (towards higher bits) op. Returns result.
</div>
</div>
<div class='slot'>
<div class='slotName'>>>(aNum)</div>
<div class='slotValue'> Shift right (towards lower bits) op. Returns result.
</div>
</div>
<div class='slot'>
<div class='slotName'>^(aNum)</div>
<div class='slotValue'> XOR op. Returns result.
</div>
</div>
<div class='slot'>
<div class='slotName'>abs</div>
<div class='slotValue'>Absolute op. Returns result.
</div>
</div>
<div class='slot'>
<div class='slotName'>asNumber</div>
<div class='slotValue'>Returns an Io Number for the receiving BigNum.
</div>
</div>
<div class='slot'>
<div class='slotName'>asSimpleString</div>
<div class='slotValue'>Returns simple string representation of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>asString</div>
<div class='slotValue'>Returns a string representation of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>gcd(aNum)</div>
<div class='slotValue'> Greatest common denominator op. Returns result.
</div>
</div>
<div class='slot'>
<div class='slotName'>hamdist(aNum)</div>
<div class='slotValue'>  Returns hamming distance between receiver and aNum.
</div>
</div>
<div class='slot'>
<div class='slotName'>invert(aNum)</div>
<div class='slotValue'>  ?
</div>
</div>
<div class='slot'>
<div class='slotName'>jacobi(aNum)</div>
<div class='slotValue'>  ?
</div>
</div>
<div class='slot'>
<div class='slotName'>kronecker</div>
<div class='slotValue'>?
</div>
</div>
<div class='slot'>
<div class='slotName'>lcm(aNum)</div>
<div class='slotValue'> Least common denominator op. Returns result.
</div>
</div>
<div class='slot'>
<div class='slotName'>legendre(aNum)</div>
<div class='slotValue'> ?
</div>
</div>
<div class='slot'>
<div class='slotName'>mod(aNum)</div>
<div class='slotValue'> Modulus op (same as %). Returns result.
</div>
</div>
<div class='slot'>
<div class='slotName'>neg</div>
<div class='slotValue'>Returns negative version of receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>nextprime</div>
<div class='slotValue'>Returns next prime larger than the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>popcount</div>
<div class='slotValue'>?
</div>
</div>
<div class='slot'>
<div class='slotName'>pow(aNum)</div>
<div class='slotValue'> Returns power of receiver to aNum.
</div>
</div>
<div class='slot'>
<div class='slotName'>powm(aNum)</div>
<div class='slotValue'> ?
</div>
</div>
<div class='slot'>
<div class='slotName'>root(aNum)</div>
<div class='slotValue'> Returns the aNum root of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>scan0(aNum)</div>
<div class='slotValue'>  ?
</div>
</div>
<div class='slot'>
<div class='slotName'>scan1(aNum)</div>
<div class='slotValue'>  ?
</div>
</div>
<div class='slot'>
<div class='slotName'>sqrt</div>
<div class='slotValue'>Returns square root of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>tstbit(aNum)</div>
<div class='slotValue'>  ?
</div>
</div>
<div class='slot'>
<div class='slotName'>with(aNumber)</div>
<div class='slotValue'> Returns a BigNum version of the Io number aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>|(aNum)</div>
<div class='slotValue'>  OR op. Returns result.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>ContinuedFraction</div>
<a name='ContinuedFraction.ContinuedFraction'></a>
<div class='class'>
<div class='className'>ContinuedFraction</div>
<div class='classDescription'>?
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Random</div>
<a name='Random.Random'></a>
<div class='class'>
<div class='className'>Random</div>
<div class='classDescription'>A high quality and reasonably fast random number generator based on 
Makoto Matsumoto, Takuji Nishimura, and Eric Landry's implementation 
of the <a href=http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html>Mersenne Twister</a> algorithm. The default seed is a xor of 
the ANSI C time() and clock() return values.
</div>
<div class='slot'>
<div class='slotName'>bytes(count)</div>
<div class='slotValue'>	Returns a Sequence of size count containing random bytes.
</div>
</div>
<div class='slot'>
<div class='slotName'>flip</div>
<div class='slotValue'>	Returns a random bit as a true or false object.
</div>
</div>
<div class='slot'>
<div class='slotName'>gaussian(optionalMean, optionalStandardDeviation)</div>
<div class='slotValue'>	Returns a pseudo random number between 0 and 1 with a gaussian distribution.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSeed(aNumber)</div>
<div class='slotValue'>	Sets the random number generator seed to the unsigned int version of aNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>value(optionalArg1, optionalArg2)</div>
<div class='slotValue'>	If called with:
	<ul>
	<li> no arguments, it returns a floating point
	random Number between 0 and 1.
	<li> one argument, it returns a floating point random
	Number between 0 and optionalArg1.
	<li> two arguments, it returns a floating point random
	Number between optionalArg1 and optionalArg2.
	</ul>
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Rational</div>
<a name='Rational.Rational'></a>
<div class='class'>
<div class='className'>Rational</div>
<div class='slot'>
<div class='slotName'>!=(other)</div>
<div class='slotValue'> Compares two numbers against one another. Returns true if they are equal (represent the same number), false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>%(aNum)</div>
<div class='slotValue'> Returns the receiver modulus aNum
</div>
</div>
<div class='slot'>
<div class='slotName'>*(aNum)</div>
<div class='slotValue'> Returns the value of the receiver multiplied by aNum.
</div>
</div>
<div class='slot'>
<div class='slotName'>+(aNum)</div>
<div class='slotValue'> Returns the value of the receiver added to aNum.
</div>
</div>
<div class='slot'>
<div class='slotName'>-(aNum)</div>
<div class='slotValue'> Returns the value of the receiver subtracted from aNum.
</div>
</div>
<div class='slot'>
<div class='slotName'>/(aNum)</div>
<div class='slotValue'> Returns the value of the receiver divided by aNum.
</div>
</div>
<div class='slot'>
<div class='slotName'>==(other)</div>
<div class='slotValue'> Compares two numbers against one another. Returns true if they are equal (represent the same number), false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>abs</div>
<div class='slotValue'>Returns a Rational number with the absolute value of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>asNumber</div>
<div class='slotValue'>Converts the Rational number to a floating point number.
</div>
</div>
<div class='slot'>
<div class='slotName'>asRational</div>
<div class='slotValue'>Converts the number to a Rational number. CAVEAT: Numbers in Io are floating point entities, which means since they are imprecise, this conversion may yield values not expected.")
</div>
</div>
<div class='slot'>
<div class='slotName'>asString</div>
<div class='slotValue'>Returns a text string representing the Rational number.
</div>
</div>
<div class='slot'>
<div class='slotName'>compare(other)</div>
<div class='slotValue'> Compares two numbers against one another. Returns a positive, zero or negative value based on whether the receiver is larger, equal or less than the argument.
</div>
</div>
<div class='slot'>
<div class='slotName'>denominator</div>
<div class='slotValue'>Returns the denominator.
</div>
</div>
<div class='slot'>
<div class='slotName'>divmod(aNum)</div>
<div class='slotValue'> Returns a list containing the integer value and the receiver modulus aNum.
</div>
</div>
<div class='slot'>
<div class='slotName'>gcd(aNum)</div>
<div class='slotValue'> Calculates the greatest common denominator between the receiver and the argument.
</div>
</div>
<div class='slot'>
<div class='slotName'>negate</div>
<div class='slotValue'>Negates the Rational number.
</div>
</div>
<div class='slot'>
<div class='slotName'>numerator</div>
<div class='slotValue'>Returns the numerator.
</div>
</div>
<div class='slot'>
<div class='slotName'>pow(aNum)</div>
<div class='slotValue'> Returns the value of the receiver to the power of aNum.
</div>
</div>
<div class='slot'>
<div class='slotName'>reduce</div>
<div class='slotValue'>Reduces the numerator and denominator to their lowest terms.
</div>
</div>
<div class='slot'>
<div class='slotName'>serialized</div>
<div class='slotValue'>Returns a bit of code which can be used to serialize the Rational number.
</div>
</div>
<div class='slot'>
<div class='slotName'>setDenominator(aNumber)</div>
<div class='slotValue'> Sets the denominator. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setNumerator(aNumber)</div>
<div class='slotValue'> Sets the numerator. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>with(aNumerator, aDenominator)</div>
<div class='slotValue'> Convenience constructor. Returns a new Rational number whose numerator and denominator are represented by the arguments aNumerator and aDenominator respectively.")
</div>
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Networking</div>
<div class='package'>
<div class='packageName'>Beanstalk</div>
<a name='Beanstalk.Beanstalk'></a>
<div class='class'>
<div class='className'>Beanstalk</div>
<div class='classDescription'>beanstalkd is a fast, distributed, in-memory workqueue service. See http://xph.us/software/beanstalkd/
<br />An example from http://xph.us/software/beanstalkd/:
<br />First, have one process put a job into the queue:
<pre>
producer := Beanstalk clone connect("127.0.0.1:11300")
producer put("hello")
</pre>

Then start another process to take jobs out of the queue and run them:
<pre>
worker := Beanstalk clone connect("127.0.0.1:11300")
loop(
	job := worker reserve
	job body println # prints "hello"
	job delete
)
</pre>
See Beanstalk.io code and protocol description (http://github.com/kr/beanstalkd/tree/master/doc/protocol.txt) for details.
Both are short and easy to read.

<br />Stat commands depend on <a href="http://github.com/why/syck/tree/a4f241be5d247853aea6127d02dbdedd8a1dd477/ext/io">YAML</a>.
</div>
<div class='slot'>
<div class='slotName'>bury(id, pri)</div>
<div class='slotValue'> Puts a job into the "buried" state
</div>
</div>
<div class='slot'>
<div class='slotName'>connect(address)</div>
<div class='slotValue'> Connects to a beanstalk server. address is a "host:port" string, e.g., "127.0.0.1:11300"
</div>
</div>
<div class='slot'>
<div class='slotName'>delete(id)</div>
<div class='slotValue'> Removes a job with a given id from the server, entirely
</div>
</div>
<div class='slot'>
<div class='slotName'>put(body, pri, delay, ttr)</div>
<div class='slotValue'>	Inserts a job into the queue.
	<br />pri - priority, an integer < 2**32. Jobs with smaller priority values will be
	scheduled before jobs with larger priorities. The most urgent priority is 0;
	the least urgent priority is 4294967295.
	<br />delay - an integer number of seconds to wait before putting the job in
	the ready queue. The job will be in the "delayed" state during this time.
	<br />ttr - time to run, an integer number of seconds to allow a worker to run this job.
</div>
</div>
<div class='slot'>
<div class='slotName'>release(id)</div>
<div class='slotValue'> Puts a reserved job back into the ready queue
</div>
</div>
<div class='slot'>
<div class='slotName'>reserve(timeout)</div>
<div class='slotValue'> Returns and reserves a job (waits until one becomes available if necessary)
</div>
</div>
<div class='slot'>
<div class='slotName'>touch(id)</div>
<div class='slotValue'> Allows a worker to request more time to work on a job.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>CGI</div>
<a name='CGI.CGI'></a>
<div class='class'>
<div class='className'>CGI</div>
<div class='classDescription'>CGI supports accessing CGI parameters passed in environment variables or standard input by a web servers like Apache. Example use:
<pre>
#!./ioServer

cgi = CGI clone

redirect = cgi getParameters at("redirurl")
if (redirect and redirect != "",
	redirect clipAfterStartOfSeq("\r")
	redirect clipAfterStartOfSeq("\n")
	cgi redirect(redirect)
	System exit(0)
 )

cgi header("Content-type", "text/html")

cgi write("&lt;html&gt;&lt;head&gt;&lt;title&gt;test&lt;/title&gt;&lt;body&gt;")
cgi write("GET Parameters:")
cgi getParameters foreach(k, v,
	cgi write(k .. " = " .. v .. ","))
)

cgi write("POST Parameters:")
cgi postParameters foreach(k, v,
	cgi write(k .. " = " .. v .. ","))
)

cgi write("COOKIES:")
cgi cookies foreach(k, v,
	cgi write(k .. " = " .. v .. ",")
)
</pre>
</div>
<div class='slot'>
<div class='slotName'>contentLength</div>
<div class='slotValue'>CONTENT_LENGTH from web server - Size of POST Data
</div>
</div>
<div class='slot'>
<div class='slotName'>contentType</div>
<div class='slotValue'>CONTENT_TYPE from web server
</div>
</div>
<div class='slot'>
<div class='slotName'>cookies</div>
<div class='slotValue'>Returns a Map of cookies provided by the client
</div>
</div>
<div class='slot'>
<div class='slotName'>decodeUrlParam(aString)</div>
<div class='slotValue'> Returns a URL decoded version of aString.
</div>
</div>
<div class='slot'>
<div class='slotName'>encodeUrlParam(aString)</div>
<div class='slotValue'> Returns a URL encoded version of aString.
</div>
</div>
<div class='slot'>
<div class='slotName'>getParameters</div>
<div class='slotValue'>Parses the QUERY_STRING environment variable and returns a Map containing key/value query value pairs.  For testing, a QUERY_STRING can be passed to standard in, one line will be read
</div>
</div>
<div class='slot'>
<div class='slotName'>header(name, value, sendMultiple)</div>
<div class='slotValue'>	Add a header to the output, may only be called before write() is called.  
	One of each header will be sent unless sendMultiple is true
</div>
</div>
<div class='slot'>
<div class='slotName'>httpHeader(name)</div>
<div class='slotValue'> Fetch a header supplied by the client, such as 'referer'
</div>
</div>
<div class='slot'>
<div class='slotName'>isInWebScript</div>
<div class='slotValue'>Checks to see if this is being called within a CGI request or from the command-line (testing).  Simply checks for System getEnvironmentVariable("GATEWAY_INTERFACE")
</div>
</div>
<div class='slot'>
<div class='slotName'>maxPostSize</div>
<div class='slotValue'>Maximum size in bytes, to process from user submitted data.  Data greater than this will result in a nil postData slot
</div>
</div>
<div class='slot'>
<div class='slotName'>maxPostSizeExceeded</div>
<div class='slotValue'>Returns true if the POST data exceeds a set maxPostSize
</div>
</div>
<div class='slot'>
<div class='slotName'>pathInfo</div>
<div class='slotValue'>PATH_INFO from web server
</div>
</div>
<div class='slot'>
<div class='slotName'>pathTranslated</div>
<div class='slotValue'>PATH_TRANSLATED from web server
</div>
</div>
<div class='slot'>
<div class='slotName'>postData</div>
<div class='slotValue'>The raw post data sent to the script.  Only set if getEnvironmentVariable("REQUEST_METHOD") asLowercase == "post".
</div>
</div>
<div class='slot'>
<div class='slotName'>postParameters</div>
<div class='slotValue'>Parses the POST data, multipart and urlencoded.  Returns a map of submitted variables.
For uploaded files, an Object is returned with these slots:
<pre>
fileName
content (raw content of file as Sequence)
contentType
contentEncoding
size (in characters/bytes)
asString (pretty string of name, type, size)
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>queryString</div>
<div class='slotValue'>QUERY_STRING from web server
</div>
</div>
<div class='slot'>
<div class='slotName'>redirect(url)</div>
<div class='slotValue'> Send a location: and redirect the user.  May only be called before write() is called.  It is left to the caller to stop any further processing.
</div>
</div>
<div class='slot'>
<div class='slotName'>remoteAddress</div>
<div class='slotValue'>REMOTE_ADDR from web server - User's IP
</div>
</div>
<div class='slot'>
<div class='slotName'>remoteHost</div>
<div class='slotValue'>REMOTE_HOST from web server - User's host (often blank)
</div>
</div>
<div class='slot'>
<div class='slotName'>requestMethod</div>
<div class='slotValue'>GET, POST, PUT, etc
</div>
</div>
<div class='slot'>
<div class='slotName'>requestParameter(name)</div>
<div class='slotValue'> Lazy developer's helper funtion. Retrieves a value from GET or POST, POST first
</div>
</div>
<div class='slot'>
<div class='slotName'>scriptName</div>
<div class='slotValue'>SCRIPT_NAME from web server
</div>
</div>
<div class='slot'>
<div class='slotName'>setCookie(name, value, expiresDate, domain, path, secureBool)</div>
<div class='slotValue'>	Sets a cookie, keep in mind this will not be available in cookies() until they next visit to the site.  
	Parameters other than name and value are optional.
</div>
</div>
<div class='slot'>
<div class='slotName'>status(statusCode)</div>
<div class='slotValue'>	Numeric status code to send to the client.  
	Normally, the server will figure this out on its own, but this allows handling 404s and such.
</div>
</div>
<div class='slot'>
<div class='slotName'>write(string, [string...])</div>
<div class='slotValue'> Send content for the body of the response
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>DistributedObjects</div>
<a name='DistributedObjects.DOConnection'></a>
<div class='class'>
<div class='className'>DOConnection</div>
<div class='classDescription'>The DOConnection object is useful for communicating with remote servers in a way that makes it look just like the sending of local messages. Proxies are automatically created on either side for passed objects, with the exception of strings and numbers, which are passed by value. Example:
<pre>
con := DOConnection clone setHost("127.0.0.1") setPort(8456) connect
result := con serverObject test(1)
writeln(result)
r := result at(0)
writeln(r)
r := result at(1)
writeln(r)
</pre>

Implementation Notes:
<p>

The format of the Distributed Objects message is a list of NullCharacter
terminated strings in one of these two formats:
<p>
Send message format:

<pre>
s NullCharacter targetId NullCharacter messageName NullCharacter argCount NullCharacter argType NullCharacter argValue NullCharacter (next arg type and value, etc)
</pre>

Reply message format:

<pre>
r NullCharacter argType NullCharacter argvalue NullCharacter
</pre>

If the argument is not a String, Number or nil then:
If it is local to the sender, the type is RemoteObject.
If it is a proxy to a remote object, the type is LocalObject.

This isn't optimized yet.
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>Close the connection, if it is open. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>connect</div>
<div class='slotValue'>Connect to the remote DOServer. Returns self or an Error, if one occurs.
</div>
</div>
<div class='slot'>
<div class='slotName'>host</div>
<div class='slotValue'>Returns the host ip.
</div>
</div>
<div class='slot'>
<div class='slotName'>port</div>
<div class='slotValue'>Returns the port.
</div>
</div>
<div class='slot'>
<div class='slotName'>serverObject</div>
<div class='slotValue'>	A handle to the remote DOServer's root object. Returns result from server or an Error, if one occurs.
</div>
</div>
<div class='slot'>
<div class='slotName'>setHost(ipString)</div>
<div class='slotValue'> Sets the host ip to connect to. Returns self or an Error, if one occurs.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPort(portNumber)</div>
<div class='slotValue'> Sets the port number to connect to. Returns self.
</div>
</div>
</div>
<a name='DistributedObjects.DOProxy'></a>
<div class='class'>
<div class='className'>DOProxy</div>
</div>
<a name='DistributedObjects.DOServer'></a>
<div class='class'>
<div class='className'>DOServer</div>
<div class='classDescription'>An experimental distributed objects server. Example;
<pre>
Test := Object clone
Test test := method(v, 
	write("got test '", v, "'\n")
	return List clone append(1)
)

doServer := DOServer clone
doServer setRootObject(Test clone)
doServer setPort(8456)
doServer start
</pre>
</div>
<div class='slot'>
<div class='slotName'>setRootObject(anObject)</div>
<div class='slotValue'> Sets the root object which incoming messages will be sent to.
</div>
</div>
</div>
<a name='DistributedObjects.MDOConnection'></a>
<div class='class'>
<div class='className'>MDOConnection</div>
<div class='classDescription'>A Minimal Distributed Objects connection. Example;
<pre>
dateServerCon := MDOConnection clone setHost("127.0.0.1") setPort(8123) connect
writeln("date from date server: ", Date fromNumber(dateServerCon currentDate))
dateServerCon close
</pre>

See the docs for MDOServer for the DateServer code.
<p>
A MDOConnection will pause calling coroutines until the response is received. 
Mutliple requests can be sent before a single request returns if they are sent 
from separate coroutines.
</div>
</div>
<a name='DistributedObjects.MDOServer'></a>
<div class='class'>
<div class='className'>MDOServer</div>
<div class='classDescription'>A Minimal Distributed Objects server. Example;
<pre>
DateServer := Object clone do(
	acceptedMessageNames := list("currentDate")
	currentDate := method(Date clone asNumber)
)

mdoServer := MDOServer clone 
mdoServer setHost("127.0.0.1")  setPort(8123) 
mdoServer setLocalObject(DateServer clone)
mdoServer start
</pre>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>GoogleSearch</div>
<a name='GoogleSearch.GooglePage'></a>
<div class='class'>
<div class='className'>GooglePage</div>
<div class='classDescription'>Object representing one page of search results.
</div>
<div class='slot'>
<div class='slotName'>find</div>
<div class='slotValue'>Runs the search.
</div>
</div>
<div class='slot'>
<div class='slotName'>links</div>
<div class='slotValue'>Returns the list of link results.
</div>
</div>
<div class='slot'>
<div class='slotName'>pageNumber</div>
<div class='slotValue'>Returns the current page number of results.
</div>
</div>
<div class='slot'>
<div class='slotName'>searchTerm</div>
<div class='slotValue'>Returns the search term.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSearchTerm(aSeq)</div>
<div class='slotValue'> Sets the search term. Returns self.
</div>
</div>
</div>
<a name='GoogleSearch.GoogleSearch'></a>
<div class='class'>
<div class='className'>GoogleSearch</div>
<div class='classDescription'>Object for performing web searches via Google.
Example:
<pre>
GoogleSearch clone setSearchTerm("iolanguage") find links foreach(println)
while(Coroutine yieldingCoros size > 1, yield)
</pre>
</div>
<div class='slot'>
<div class='slotName'>find</div>
<div class='slotValue'>Runs the search.
</div>
</div>
<div class='slot'>
<div class='slotName'>links</div>
<div class='slotValue'>Returns the list of link results.
</div>
</div>
<div class='slot'>
<div class='slotName'>maxPages</div>
<div class='slotValue'>Returns the max number of pages to fetch results from.
</div>
</div>
<div class='slot'>
<div class='slotName'>setMaxPages(aNumber)</div>
<div class='slotValue'> Sets the max number of pages to fetch results from. Returns self.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>HttpClient</div>
<a name='HttpClient.HCConnection'></a>
<div class='class'>
<div class='className'>HCConnection</div>
<div class='classDescription'>Sends an HCRequest using the HTTP protcol and stores the response in an HCResponse
</div>
<div class='slot'>
<div class='slotName'>request</div>
<div class='slotValue'>An HCRequest describing the HTTP request to be sent
</div>
</div>
<div class='slot'>
<div class='slotName'>response</div>
<div class='slotValue'>An HCResponse describing the response received from the remote host
</div>
</div>
<div class='slot'>
<div class='slotName'>sendRequest</div>
<div class='slotValue'>Send the request and set the response
</div>
</div>
</div>
<a name='HttpClient.HCRequest'></a>
<div class='class'>
<div class='className'>HCRequest</div>
<div class='classDescription'>State describing an HTTP request to be sent by an HCConnection
</div>
<div class='slot'>
<div class='slotName'>connection</div>
<div class='slotValue'>Clone HCConnect and set its state based on this HCRequest
</div>
</div>
<div class='slot'>
<div class='slotName'>hasHeader(name)</div>
<div class='slotValue'> Returns true if this request has a header with name
</div>
</div>
<div class='slot'>
<div class='slotName'>header(name)</div>
<div class='slotValue'> Returns the value for header with name
</div>
</div>
<div class='slot'>
<div class='slotName'>host</div>
<div class='slotValue'>The host to send this request to
</div>
</div>
<div class='slot'>
<div class='slotName'>httpMethod</div>
<div class='slotValue'>The HTTP method to be sent
</div>
</div>
<div class='slot'>
<div class='slotName'>port</div>
<div class='slotValue'>The port connect to when sending this request
</div>
</div>
<div class='slot'>
<div class='slotName'>resource</div>
<div class='slotValue'>The resource to request
</div>
</div>
<div class='slot'>
<div class='slotName'>setHeader(name, value)</div>
<div class='slotValue'> Sets header with name to value
</div>
</div>
<div class='slot'>
<div class='slotName'>with(aUrl)</div>
<div class='slotValue'> Clones HCResponse and sets its state based on aUrl (HCUrl)
</div>
</div>
</div>
<a name='HttpClient.HCResponse'></a>
<div class='class'>
<div class='className'>HCResponse</div>
<div class='classDescription'>Stores the result of sending an HCRequest using an HCConnection
</div>
<div class='slot'>
<div class='slotName'>headerAt(name)</div>
<div class='slotValue'> First header value associated with name
</div>
</div>
<div class='slot'>
<div class='slotName'>headersAt(name)</div>
<div class='slotValue'> Header values associated with name
</div>
</div>
<div class='slot'>
<div class='slotName'>statusCode</div>
<div class='slotValue'>Numeric status code.  ex: 200
</div>
</div>
<div class='slot'>
<div class='slotName'>statusDescription</div>
<div class='slotValue'>Descriptive status code ex: OK
</div>
</div>
</div>
<a name='HttpClient.HCResponseParser'></a>
<div class='class'>
<div class='className'>HCResponseParser</div>
<div class='classDescription'>Handles parsing response received during an HCConnection
</div>
</div>
<a name='HttpClient.HCUrl'></a>
<div class='class'>
<div class='className'>HCUrl</div>
<div class='slot'>
<div class='slotName'>get</div>
<div class='slotValue'>Creates an HCConnection based on this url, sends a request and returns the content of the response
</div>
</div>
<div class='slot'>
<div class='slotName'>getResponse</div>
<div class='slotValue'>Creates an HCConnection based on this url, sends a request and returns the response
</div>
</div>
<div class='slot'>
<div class='slotName'>port</div>
<div class='slotValue'>Returns url's port
</div>
</div>
<div class='slot'>
<div class='slotName'>url</div>
<div class='slotValue'>Returns url's host
</div>
</div>
<div class='slot'>
<div class='slotName'>with(urlSeq)</div>
<div class='slotValue'> Returns a clone of HCUrl with its state set by parsing urlSeq
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Loudmouth</div>
<a name='Loudmouth.JID'></a>
<div class='class'>
<div class='className'>JID</div>
<div class='classDescription'>Object for representing JIDs.
</div>
<div class='slot'>
<div class='slotName'>asString</div>
<div class='slotValue'>Converts JID to string with all available parts included.
</div>
</div>
<div class='slot'>
<div class='slotName'>host</div>
<div class='slotValue'>Extracts host's address from JID.
</div>
</div>
<div class='slot'>
<div class='slotName'>resource</div>
<div class='slotValue'>Returns defined resource.
</div>
</div>
<div class='slot'>
<div class='slotName'>username</div>
<div class='slotValue'>Extracts username from JID.
</div>
</div>
<div class='slot'>
<div class='slotName'>with(jid)</div>
<div class='slotValue'>  Extracts all parts of a provided <code>Sequence</code> and returns new <code>JID</code> clone.
  <pre><code>
  j := JID with("cow@moo.com/Alpes")
  j username == "cow"
  j host == "moo.com"
  j resource == "Alpes"
  j asString == "cow@moo.com/Alpes"</code></pre>
</div>
</div>
</div>
<a name='Loudmouth.Loudmouth'></a>
<div class='class'>
<div class='className'>Loudmouth</div>
<div class='classDescription'><a href="http://groups.google.com/group/loudmouth-dev/">Loudmouth</a> is an async XMPP library written in C.

Example usage:
<code><pre>
acc := Loudmouth with("user@server.com", "super password") do(
  handleConnect = method(
    "Connected!" println)

  handleMessage = method(msg
    "#{msg from} > #{msg plainBody}" println
    body :=  msg plainBody

    if(body indexOf("#") == 0,
      body = doString(body) asString)

    # This way you can manipulate
    # XML nodes with SGML addon
    XmppChatMessage create\
      setPlainBody(body)\
      setTo(msg from)\
      sendVia(self)

    # or simply send the message (must be a Sequence)
    # (this is obviously faster)
    #self send(msg from, body))
)

acc connect
# Any Io code after this line won't be executed
# (unless called as Loudmouth callback or run in separate thread)
Loudmouth startMainLoop

</pre></code>
</div>
<div class='slot'>
<div class='slotName'>asString</div>
<div class='slotValue'>Converts XML to Sequence.
</div>
</div>
<div class='slot'>
<div class='slotName'>body</div>
<div class='slotValue'>Returns value message's body node. If both XHTML and plain versions are available, XHTML version will be returned.
</div>
</div>
<div class='slot'>
<div class='slotName'>connect</div>
<div class='slotValue'>Connects to the server. Returns <code>self</code>.
</div>
</div>
<div class='slot'>
<div class='slotName'>disconnect</div>
<div class='slotValue'>Disconnects from server and returns <code>true</code> if it succeeds.
</div>
</div>
<div class='slot'>
<div class='slotName'>from</div>
<div class='slotValue'>Returns sender's JID.
</div>
</div>
<div class='slot'>
<div class='slotName'>handleAuthenticated</div>
<div class='slotValue'>Slot called upon successful authentication.
</div>
</div>
<div class='slot'>
<div class='slotName'>handleAuthenticationFailure</div>
<div class='slotValue'>Slot called if username/password combinaton is wrong.
</div>
</div>
<div class='slot'>
<div class='slotName'>handleConnect</div>
<div class='slotValue'>Slot called once connection is established.
</div>
</div>
<div class='slot'>
<div class='slotName'>handleConnectFailure</div>
<div class='slotValue'>Slot called when server is not reachable.
</div>
</div>
<div class='slot'>
<div class='slotName'>handleDisconnect</div>
<div class='slotValue'>Slot called upon closing the connection with the server.
</div>
</div>
<div class='slot'>
<div class='slotName'>handleMessage(xmppMessage)</div>
<div class='slotValue'> Slot called when a message arrives via XMPP stream. <code>xmppMessage</code> is a <code>LoudmouthMessage</code> object.
</div>
</div>
<div class='slot'>
<div class='slotName'>handleSslFailure</div>
<div class='slotValue'>Slot called if SSL-related problems arrive. Method should return <code>true</code> if it wishes to make a connection without SSL, <code>false</code> otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isConnected</div>
<div class='slotValue'></div>
</div>
<div class='slot'>
<div class='slotName'>isSslSupported</div>
<div class='slotValue'></div>
</div>
<div class='slot'>
<div class='slotName'>plainBody</div>
<div class='slotValue'>Returns value of message's body node with XHTML markup.
</div>
</div>
<div class='slot'>
<div class='slotName'>registerAccount(server, username, password)</div>
<div class='slotValue'> Registers a new account at XMPP server. Returns <code>true</code> or <code>false</code>.
</div>
</div>
<div class='slot'>
<div class='slotName'>send(toJid, message)</div>
<div class='slotValue'> Sends a message (<code>Sequence</code>) to provided JID (<code>Sequence</code>). Returns <code>true</code> or <code>false</code>.
</div>
</div>
<div class='slot'>
<div class='slotName'>sendRaw(body)</div>
<div class='slotValue'> Sends raw text over XMPP stream. Returns <code>true</code> if no errors occur.
</div>
</div>
<div class='slot'>
<div class='slotName'>sendVia(loudmouthConnection)</div>
<div class='slotValue'> Converts message to sequence and sends it via the provided Loudmouth connection (<code>Loudmouth</code> object). It updates <code>from</code> property and returns <code>true</code> if message is sent.
</div>
</div>
<div class='slot'>
<div class='slotName'>setFrom(jid)</div>
<div class='slotValue'> Sets sender's JID. Returns <code>self</code>.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPresence(presence[, statusMessage])</div>
<div class='slotValue'> Sets availability/presence and status message.
</div>
</div>
<div class='slot'>
<div class='slotName'>setStatusMessage(statusMessage)</div>
<div class='slotValue'> Sets status message.
</div>
</div>
<div class='slot'>
<div class='slotName'>setXmppType(type)</div>
<div class='slotValue'> Sets value of <code>type</code> attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>startMainLoop</div>
<div class='slotValue'>Starts GMainLoop. Should be called after a connection is established with the server.
</div>
</div>
<div class='slot'>
<div class='slotName'>status</div>
<div class='slotValue'>Returns status connection. Possible return values are:
<ul>
  <li><code>Loudmouth types CLOSED</code></li>
  <li><code>Loudmouth types OPENING</code></li>
  <li><code>Loudmouth types OPEN</code></li>
  <li><code>Loudmouth types AUTHENTICATING</code></li>
  <li><code>Loudmouth types AUTHENTICATED</code></li>
</ul>
</div>
</div>
<div class='slot'>
<div class='slotName'>stopMainLoop</div>
<div class='slotValue'></div>
</div>
<div class='slot'>
<div class='slotName'>types</div>
<div class='slotValue'>  <p>Object containing status codes and message types.</p>
  <pre><code>
  Loudmouth with("username@server.com", "password") do(
    handleConnect = method(
      self setPresence(Loudmouth types AVAILABLE), "Drinking lemonade...")
  )
  </code></pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>with(jid, password)</div>
<div class='slotValue'> Creates a new Loudmouth clone with server details provided in <code>jid</code>.
</div>
</div>
<div class='slot'>
<div class='slotName'>xmppType</div>
<div class='slotValue'>Returns value of <code>type</code> attribute of message node.
</div>
</div>
</div>
<a name='Loudmouth.LoudmouthMessage'></a>
<div class='class'>
<div class='className'>LoudmouthMessage</div>
<div class='classDescription'><p>LoudmouthMessage provides SGML interface and convience methods for manipulation of XMPP messages.</p>
</div>
<div class='slot'>
<div class='slotName'>setTo(jid)</div>
<div class='slotValue'> Sets message receiver to defined JID. JID can be both an <code>Sequence</code> or <code>JID</code> instance. Returns <code>self</code>.
</div>
</div>
<div class='slot'>
<div class='slotName'>to</div>
<div class='slotValue'>Returns JID of receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>with(source)</div>
<div class='slotValue'> Creates new LoudmouthMessage based on <code>source</code>, which should be valid XML (<code>Sequence</code>).
</div>
</div>
</div>
<a name='Loudmouth.XmppChatMessage'></a>
<div class='class'>
<div class='className'>XmppChatMessage</div>
<div class='slot'>
<div class='slotName'>create</div>
<div class='slotValue'>Creates a new <code>LoudmouthMessage</code> with chat <code>type</code> and random id value.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>NetworkAdapter</div>
<a name='NetworkAdapter.NetworkAdapter'></a>
<div class='class'>
<div class='className'>NetworkAdapter</div>
<div class='classDescription'>Interface to network adapter functionality.
</div>
<div class='slot'>
<div class='slotName'>macAddress</div>
<div class='slotValue'>	Returns the MAC address for the primary network adapter in a Hex string.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>SecureSocket</div>
<a name='SecureSocket.Certificate'></a>
<div class='class'>
<div class='className'>Certificate</div>
<div class='classDescription'>Read-only interface to SSL X509 certificates.
</div>
<div class='slot'>
<div class='slotName'>attributes</div>
<div class='slotValue'>Returns the attributes.
</div>
</div>
<div class='slot'>
<div class='slotName'>extensions</div>
<div class='slotValue'>Returns the extensions.
</div>
</div>
<div class='slot'>
<div class='slotName'>issuerName</div>
<div class='slotValue'>Returns the issuerName.
</div>
</div>
<div class='slot'>
<div class='slotName'>notAfter</div>
<div class='slotValue'>Returns the notAfter value.
</div>
</div>
<div class='slot'>
<div class='slotName'>notBefore</div>
<div class='slotValue'>Returns the notBefore value.
</div>
</div>
<div class='slot'>
<div class='slotName'>serialNumber</div>
<div class='slotValue'>Returns the serialNumber.
</div>
</div>
<div class='slot'>
<div class='slotName'>subjectName</div>
<div class='slotValue'>Returns the subjectName.
</div>
</div>
<div class='slot'>
<div class='slotName'>version</div>
<div class='slotValue'>Returns the version.
</div>
</div>
</div>
<a name='SecureSocket.SecureClient'></a>
<div class='class'>
<div class='className'>SecureClient</div>
<div class='classDescription'>Interface to secure network communication. 
A SecureClient is a wrapper on an OpenSSL SSL_CTX object
and supports both TLSv1 and DTLSv1.
</div>
<div class='slot'>
<div class='slotName'>connectionToServer</div>
<div class='slotValue'>Returns connectionToServer.
</div>
</div>
<div class='slot'>
<div class='slotName'>setCAFile(aPath)</div>
<div class='slotValue'> Sets the CA file. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setCRLFile(aPath)</div>
<div class='slotValue'> Sets the CRL file. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setCertFile(aPath)</div>
<div class='slotValue'> Sets the Certificate file. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setKeyFile(aPath)</div>
<div class='slotValue'> Sets the key file. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>useDTLS</div>
<div class='slotValue'>Returns useDTLS value.
</div>
</div>
<div class='slot'>
<div class='slotName'>useTLS</div>
<div class='slotValue'>Returns useTLS value.
</div>
</div>
</div>
<a name='SecureSocket.SecureServer'></a>
<div class='class'>
<div class='className'>SecureServer</div>
<div class='classDescription'>Interface to secure network communication. 
A SecureServer is a wrapper on an OpenSSL SSL_CTX object
and supports both TLSv1 and DTLSv1.
Example:

<pre>
//...
</pre>
</div>
<div class='slot'>
<div class='slotName'>dispatchUdp</div>
<div class='slotValue'>Returns dispatchUdp value.
</div>
</div>
<div class='slot'>
<div class='slotName'>dtlsWrap</div>
<div class='slotValue'>Returns dtlsWrap value.
</div>
</div>
<div class='slot'>
<div class='slotName'>port</div>
<div class='slotValue'>Returns the port on which the server will listen for connections.
</div>
</div>
<div class='slot'>
<div class='slotName'>setCAFile(path)</div>
<div class='slotValue'> Sets the CA file. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setCRLFile(path)</div>
<div class='slotValue'> Sets the CRL file. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setCertFile(path)</div>
<div class='slotValue'> Sets the certificate file. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setHost(hostName)</div>
<div class='slotValue'> Sets the hostName. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setKeyFile(path)</div>
<div class='slotValue'> Sets the key file. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPort(aNumber)</div>
<div class='slotValue'> Sets the port on which the server will listen  for connections. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setRequiresClientCertificate(aBool)</div>
<div class='slotValue'> Sets the requires client certificate attribute. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>stop</div>
<div class='slotValue'>Stops the server if it is running. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>supportsDTLS</div>
<div class='slotValue'>Returns true if server supports DTLS, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>tlsWrap</div>
<div class='slotValue'>Returns tlsWrap value.
</div>
</div>
<div class='slot'>
<div class='slotName'>udpRecvIP</div>
<div class='slotValue'>Returns udpRecvIP value.
</div>
</div>
<div class='slot'>
<div class='slotName'>useDTLS</div>
<div class='slotValue'>Returns useDTLS value.
</div>
</div>
<div class='slot'>
<div class='slotName'>useTLS</div>
<div class='slotValue'>Returns useTLS value.
</div>
</div>
</div>
<a name='SecureSocket.SecureSocket'></a>
<div class='class'>
<div class='className'>SecureSocket</div>
<div class='slot'>
<div class='slotName'>ValidationFail</div>
<div class='slotValue'>Returns ValidationFail attribute as a number.
</div>
</div>
<div class='slot'>
<div class='slotName'>ValidationOkay</div>
<div class='slotValue'>Returns ValidationOkay attribute as a number.
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncAccept</div>
<div class='slotValue'>Accept a connection asynchronously.
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncConnectBIO</div>
<div class='slotValue'>Performs asyncConnectBIO.
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncConnectSSL</div>
<div class='slotValue'>Performs asyncConnectSSL.
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncStreamRead</div>
<div class='slotValue'>Read available data and return it.
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncUdpRead</div>
<div class='slotValue'>?
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncUdpServerRead</div>
<div class='slotValue'>?
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncWrite(aSeq)</div>
<div class='slotValue'> Writes aSeq to the socket. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>descriptorId</div>
<div class='slotValue'>Returns descriptorId.
</div>
</div>
<div class='slot'>
<div class='slotName'>getSocketReadLowWaterMark</div>
<div class='slotValue'>Returns ReadLowWaterMark attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>getSocketWriteLowWaterMark</div>
<div class='slotValue'>Returns WriteLowWaterMark attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>isConnected</div>
<div class='slotValue'>Returns true if socket is connected, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isDatagram</div>
<div class='slotValue'>Returns isDatagram attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>isOpen</div>
<div class='slotValue'>Returns true if socket is open, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>rawCertificate</div>
<div class='slotValue'>Returns rawCertificate.
</div>
</div>
<div class='slot'>
<div class='slotName'>rawPeerCertificate</div>
<div class='slotValue'>Returns rawPeerCertificate.
</div>
</div>
<div class='slot'>
<div class='slotName'>rawValidate</div>
<div class='slotValue'>Performs rawValidate.
</div>
</div>
<div class='slot'>
<div class='slotName'>rbioReady</div>
<div class='slotValue'>Returns rbioReady attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSocketReadBufferSize(numberOfBytes)</div>
<div class='slotValue'> Sets read buffer size. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSocketReadLowWaterMark(numberOfBytes)</div>
<div class='slotValue'> Sets read low water mark. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSocketWriteBufferSize(numberOfBytes)</div>
<div class='slotValue'>  Sets write buffer size. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSocketWriteLowWaterMark(numberOfBytes)</div>
<div class='slotValue'>  Sets write low water mark. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>shutdown</div>
<div class='slotValue'>close the socket connection. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>supportsDTLS</div>
<div class='slotValue'>Returns true if server supports DTLS, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>wantsRead</div>
<div class='slotValue'>Returns wantsRead attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>wantsWrite</div>
<div class='slotValue'>Returns IoSecureSocket_wantsWrite attribute.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Socket</div>
<a name='Socket.DNS'></a>
<div class='class'>
<div class='className'>DNS</div>
<div class='classDescription'>Utility methods related to Domain Name Service lookups.
</div>
<div class='slot'>
<div class='slotName'>dnsQueryPacketForHostName(hostNameSeq)</div>
<div class='slotValue'>Assembles a DNS query packet for the given host name and returns it in a Sequence.
</div>
</div>
<div class='slot'>
<div class='slotName'>hostNameAndIPforDNSResponsePacket(dnsResponsePacketSeq)</div>
<div class='slotValue'>Dissasembles the given dnsResponsePacketSeq and returns a list object containing
the hostName and IP or an error string on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>localNameServersIPs</div>
<div class='slotValue'>Returns a list of local name server IPs as a list of Sequences. Works on OSX, Unix, Windows.
</div>
</div>
</div>
<a name='Socket.DNSQuery'></a>
<div class='class'>
<div class='className'>DNSQuery</div>
<div class='classDescription'>An object representing an individual DNS query.
</div>
<div class='slot'>
<div class='slotName'>addCoro(aCoro)</div>
<div class='slotValue'> Private method that adds a coro to coros.
</div>
</div>
<div class='slot'>
<div class='slotName'>coros</div>
<div class='slotValue'>		List of coroutines paused waiting for this query.
		These coros will be resumed when the query completes.
</div>
</div>
<div class='slot'>
<div class='slotName'>hostName</div>
<div class='slotValue'>The host name which the query will request an IP for.
</div>
</div>
<div class='slot'>
<div class='slotName'>resumeCoros</div>
<div class='slotValue'>Resumes all the paused coros. <font color=red>Should this use resumeLater instead?</font>
</div>
</div>
<div class='slot'>
<div class='slotName'>setHostName(aSeq)</div>
<div class='slotValue'> Sets the host name for the query.
</div>
</div>
<div class='slot'>
<div class='slotName'>waitOn</div>
<div class='slotValue'>Pauses the calling coroutine until the query is completed.
</div>
</div>
</div>
<a name='Socket.DNSServer'></a>
<div class='class'>
<div class='className'>DNSServer</div>
<div class='classDescription'>An object representing a DNSServer which DNS requests can be sent to.
</div>
<div class='slot'>
<div class='slotName'>host</div>
<div class='slotValue'>The host name (usually an IP) for the DNSServer.
</div>
</div>
<div class='slot'>
<div class='slotName'>ipForHostName(hostName, timeout)</div>
<div class='slotValue'>	Sends a request to the DNS server, waits for a response and returns it. Will try 3 times if there are timeouts.
	Returns the IP (as a Sequence) if successful, raises an exception otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>setHost(aSeq)</div>
<div class='slotValue'> Sets the host name for the DNSServer.
</div>
</div>
</div>
<a name='Socket.EvConnection'></a>
<div class='class'>
<div class='className'>EvConnection</div>
<div class='classDescription'>Networking Event.
</div>
</div>
<a name='Socket.EvRequest'></a>
<div class='class'>
<div class='className'>EvRequest</div>
<div class='classDescription'>Networking Event.
</div>
</div>
<a name='Socket.Event'></a>
<div class='class'>
<div class='className'>Event</div>
<div class='classDescription'>Networking Event.
</div>
<div class='slot'>
<div class='slotName'>category</div>
<div class='slotValue'>Networking
</div>
</div>
<div class='slot'>
<div class='slotName'>handleEvent(timeout)</div>
<div class='slotValue'></div>
</div>
<div class='slot'>
<div class='slotName'>waitOnOrExcept(timeout)</div>
<div class='slotValue'></div>
</div>
</div>
<a name='Socket.EventManager'></a>
<div class='class'>
<div class='className'>EventManager</div>
<div class='classDescription'>	Object for libevent (kqueue/epoll/poll/select) library. 
	Usefull for getting notifications for descriptor (a socket or file) events.
	Events include read (the descriptor has unread data or timeout) and write (the descriptor wrote some data or timeout).
	Also, timer and signal events are supported.
</div>
<div class='slot'>
<div class='slotName'>addEvent(event, descriptor, eventType, timeout)</div>
<div class='slotValue'></div>
</div>
<div class='slot'>
<div class='slotName'>run</div>
<div class='slotValue'>Runs the EventManger loop. Does not return. Private - should only be called by resumeIfNeeded.
</div>
</div>
</div>
<a name='Socket.Host'></a>
<div class='class'>
<div class='className'>Host</div>
<div class='slot'>
<div class='slotName'>address</div>
<div class='slotValue'>	Returns the IP address. A DNS lookup is done in the background if the 
	address is not already known. Returns an error on lookup failure.
</div>
</div>
<div class='slot'>
<div class='slotName'>name</div>
<div class='slotValue'>Returns name.
</div>
</div>
<div class='slot'>
<div class='slotName'>setName(aString)</div>
<div class='slotValue'> Set's the host name. Return self.
</div>
</div>
</div>
<a name='Socket.IPAddress'></a>
<div class='class'>
<div class='className'>IPAddress</div>
<div class='classDescription'>Object representation of an Internet Protocol Address.
</div>
<div class='slot'>
<div class='slotName'>setHostName(hostName)</div>
<div class='slotValue'>	Translates hostName to an IP using asynchronous DNS and 
	sets the host attribute. Returns self.
</div>
</div>
</div>
<a name='Socket.ReadEvent'></a>
<div class='class'>
<div class='className'>ReadEvent</div>
<div class='classDescription'>Object for read events.
</div>
</div>
<a name='Socket.Server'></a>
<div class='class'>
<div class='className'>Server</div>
<div class='classDescription'>The Server object provides a simple interface for running a server. 
You just need to set the port and define a handleSocket method. Here's an example of an echo server:

<pre>
Echo := Object clone
Echo handleSocketFromServer := method(aSocket, aServer,
  write("[Got echo connection from ", aSocket host, "]\n")
  while(aSocket isOpen,
   if(aSocket read, aSocket write(aSocket readBuffer asString))
   aSocket readBuffer empty
  )
  write("[Closed ", aSocket host, "]\n")
)

write("[Starting echo server on port 8456]\n")
server := Server clone setPort(8456)
server handleSocket := method(aSocket,
  Echo clone @handleSocketFromServer(aSocket, self)
)
server start
</pre>

<b>Notes</b><p>

Io's use of lightweight threading and select for dealing with sockets makes for 
servers that are much more efficient (both memory and cpu wise) than those written 
with kernel threads and socket polling.
</div>
<div class='slot'>
<div class='slotName'>handleSocket(aSocket)</div>
<div class='slotValue'>	This method is called when the server accepts a new socket. The new socket is passed as the argument.
	Override this method in your own server subclass. The default implementation raises an exception.
</div>
</div>
<div class='slot'>
<div class='slotName'>port</div>
<div class='slotValue'>Returns the port on which the server will listen for connections.
</div>
</div>
<div class='slot'>
<div class='slotName'>setHost(hostName)</div>
<div class='slotValue'> Sets the hostName. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPort(aNumber)</div>
<div class='slotValue'> Sets the port on which the server will listen  for connections. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>start</div>
<div class='slotValue'>	Starts the server. This method will not return until server is stopped, 
	so you may want to send the start message as an asynchronous message. 
	Returns self or an Error, if one occurs.
</div>
</div>
<div class='slot'>
<div class='slotName'>stop</div>
<div class='slotValue'>Stops the server if it is running. Returns self.
</div>
</div>
</div>
<a name='Socket.SignalEvent'></a>
<div class='class'>
<div class='className'>SignalEvent</div>
<div class='classDescription'>Object for signal events.
</div>
</div>
<a name='Socket.Socket'></a>
<div class='class'>
<div class='className'>Socket</div>
<div class='classDescription'>Interface to network communication.
Sockets will auto yield to other coroutines while waiting on a request.
All blocking operations use the timeout settings of the socket.
Reads are appended to the socket's read buffer which can 
be accessed using the readBuffer method.

Example:

<pre>	
socket := Socket clone setHost("www.yahoo.com") setPort(80) connect
if(socket error) then( write(socket error, "\n"); exit)

socket write("GET /\n\n")

while(socket read, Nop)
if(socket error) then(write(socket error, "\n"); exit)

write("read ", socket readBuffer length, " bytes\n")
</pre>
</div>
<div class='slot'>
<div class='slotName'>acceptTimeout</div>
<div class='slotValue'>Returns the length of time in seconds for accept timeouts on the socket.
</div>
</div>
<div class='slot'>
<div class='slotName'>appendToWriteBuffer(aSequence)</div>
<div class='slotValue'>	Appends aSequence to the write buffer if it is non-nil. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncAccept(ipAddressObject)</div>
<div class='slotValue'> Immediately returns a socket for a connection if one is available or nil otherwise. Returns an Error object on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncBind</div>
<div class='slotValue'>Binds the socket and returns self immediately or an Error object on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncConnect(ipAddressObject)</div>
<div class='slotValue'> Connects to the given IPAddress and returns self or an Error object on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncListen</div>
<div class='slotValue'>Listens to the socket and returns self immediately or an Error object on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncStreamOpen</div>
<div class='slotValue'>Submits an async request to open the socket in stream mode and returns self immediately or an Error object on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncStreamRead(aSeq, readSize)</div>
<div class='slotValue'>	Reads up to readSize number of bytes into aSeq if data is available. 
	Returns self immediately if successful. Returns an error object on Error. Returns nil if the socket is disconnected.
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncStreamWrite(aSeq, start, writeSize)</div>
<div class='slotValue'>	Writes the slice of aSeq from start to start + writeSize to the socket.
	Returns self immediately if successful, otherwise closes the socket. 
	Returns an error object on Error. 
	Returns nil if the socket is disconnected.
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncUdpOpen</div>
<div class='slotValue'>Submits an async request to open the socket in UDP mode and returns self immediately or an Error object on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncUdpRead(ipAddress, aSeq, readSize)</div>
<div class='slotValue'>	Reads up to readSize number of bytes from ipAddress into aSeq if data is available. 
	Returns self immediately if successful. Returns an error object on Error. Returns nil if the socket is disconnected.
</div>
</div>
<div class='slot'>
<div class='slotName'>asyncUdpWrite(ipAddress, aSeq, startIndex, readSize)</div>
<div class='slotValue'>	Writes readsize bytes from aSeq starting at startIndex to ipAddress. 
	Returns self immediately if successful. Returns an error object on Error. Returns nil if the socket is disconnected.
</div>
</div>
<div class='slot'>
<div class='slotName'>bytesPerRead</div>
<div class='slotValue'>Returns number of bytes to read per read call.
</div>
</div>
<div class='slot'>
<div class='slotName'>bytesPerWrite</div>
<div class='slotValue'>Returns number of bytes to write per write call.
</div>
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>Closes the socket and returns self. Returns nil on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>connect</div>
<div class='slotValue'>Connects to the socket's host. Returns self on success or an Error object on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>connectTimeout</div>
<div class='slotValue'>Returns the length of time in seconds for connect timeouts on the socket.
</div>
</div>
<div class='slot'>
<div class='slotName'>descriptorId</div>
<div class='slotValue'>Returns the socket's file descriptor id as a Number.
</div>
</div>
<div class='slot'>
<div class='slotName'>errorDescription</div>
<div class='slotValue'>Returns a description of the last error on the socket as a string.
</div>
</div>
<div class='slot'>
<div class='slotName'>errorNumber</div>
<div class='slotValue'>Returns the socket error number for the last error.
</div>
</div>
<div class='slot'>
<div class='slotName'>getSocketReadLowWaterMark</div>
<div class='slotValue'>	Returns the read low water mark for the socket on success or nil on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>getSocketWriteLowWaterMark</div>
<div class='slotValue'>	Returns the write low water mark for the socket on success or nil on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>host</div>
<div class='slotValue'>Returns the host for the socket.
</div>
</div>
<div class='slot'>
<div class='slotName'>ipAddress</div>
<div class='slotValue'>Returns the IpAddress object for the socket.
</div>
</div>
<div class='slot'>
<div class='slotName'>isOpen</div>
<div class='slotValue'>Returns true if the socket is open, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isStream</div>
<div class='slotValue'>Returns true if the socket is a stream, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isValid</div>
<div class='slotValue'>Returns true if the socket is in valid state, closes the socket and returns false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>port</div>
<div class='slotValue'>Returns the port number for the socket.
</div>
</div>
<div class='slot'>
<div class='slotName'>readBytes(numBytes)</div>
<div class='slotValue'>	Reads the socket until its readBuffer is numBytes long, then returns a Sequence
	containing the first numBytes of readBuffer's contents and clips that section from the readBuffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>readListMessage</div>
<div class='slotValue'>A shortcut for List fromEncodedList(socket readMessage).
</div>
</div>
<div class='slot'>
<div class='slotName'>readMessage</div>
<div class='slotValue'>	Empties the readBuffer and reads a 4 byte uint32 in network byte order. 
	This number is the number of bytes in the message payload which are 
	then read into the socket's readBuffer. The readBuffer is returned.
</div>
</div>
<div class='slot'>
<div class='slotName'>readTimeout</div>
<div class='slotValue'>Returns the length of time in seconds for read timeouts on the socket.
</div>
</div>
<div class='slot'>
<div class='slotName'>readUntilSeq(aSequence)</div>
<div class='slotValue'>	Reads the socket until its readBuffer contains aSequence, then returns a Sequence
	containing the readBuffer's contents up to (but not including) aSequence and clips that section from the readBuffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>serverOpen</div>
<div class='slotValue'>	Opens the socket as a stream, binds it to its ipAddress and calls asyncListen to prepare the socket to accept connections.
	Returns self on success or an Error object on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>serverWaitForConnection</div>
<div class='slotValue'>	Waits for a connection or timeout. When a connection is received, this method returns the connection socket. 
	An Error object is returned on timeour or error.
</div>
</div>
<div class='slot'>
<div class='slotName'>setAcceptTimeout(seconds)</div>
<div class='slotValue'> Sets the length of time in seconds for accept timeouts on the socket. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setBytesPerRead(numberOfBytes)</div>
<div class='slotValue'> Sets number of bytes to read per read call. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setBytesPerWrite(numberOfBytes)</div>
<div class='slotValue'> Sets number of bytes to write per write call. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setConnectTimeout(seconds)</div>
<div class='slotValue'> Sets the length of time in seconds for connect timeouts on the socket. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setHost(hostName)</div>
<div class='slotValue'>Translates hostName to an IP using asynchronous DNS and sets 
the host attribute. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setHost(hostNameOrIpString)</div>
<div class='slotValue'> Set the host for the socket. Returns self on success, an Error object otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>setIpAddress(ipAddressObject)</div>
<div class='slotValue'> Sets the ipAddress for the socket. Returns self. The setHost() method should generally be used to set the host instead of this method.
</div>
</div>
<div class='slot'>
<div class='slotName'>setNoDelay</div>
<div class='slotValue'>	Sets the socket to be no-delay. Returns self on success or nil on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPort(portNumber)</div>
<div class='slotValue'> Sets the port number for the socket, returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setReadTimeout(seconds)</div>
<div class='slotValue'> Sets the length of time in seconds for read timeouts on the socket. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSocketReadBufferSize(numberOfBytes)</div>
<div class='slotValue'> Sets the read buffer size for the socket. Returns self on success or nil on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSocketReadLowWaterMark(numberOfBytes)</div>
<div class='slotValue'>	Sets the read low water mark for the socket. Returns self on success or nil on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSocketWriteBufferSize(numberOfBytes)</div>
<div class='slotValue'> Sets the write buffer size for the socket. Returns self on success or nil on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSocketWriteLowWaterMark(numberOfBytes)</div>
<div class='slotValue'>	Sets the write low water mark for the socket. Returns self on success or nil on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>setWriteTimeout(seconds)</div>
<div class='slotValue'> Sets the length of time in seconds for write timeouts on the socket. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>streamOpen</div>
<div class='slotValue'>Opens the socket in stream mode. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>streamRead(numberOfBytes)</div>
<div class='slotValue'>	Reads numberOfBytes from the socket into the socket's readBuffer. 
	Returns self when all bytes are read or an Error object on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>streamReadNextChunk(optionalProgressBlock)</div>
<div class='slotValue'>	Waits for incoming data on the socket and when found, reads any available data and returns self. 
	Returns self on success or an Error object on error or timeout.
</div>
</div>
<div class='slot'>
<div class='slotName'>streamReadWhileOpen</div>
<div class='slotValue'>	Reads the stream into the socket's readBuffer until it closes.
	Returns self on success or an Error object on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>streamWrite(buffer, optionalProgressBlock)</div>
<div class='slotValue'>	Writes buffer to the socket. 
	If optionalProgressBlock is supplied, it is periodically called with the number of bytes written as an argument.
	Returns self on success or an Error object on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>udpOpen</div>
<div class='slotValue'>Opens the socket in UDP (connectionless) mode. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>udpRead(ipAddress, numBytes)</div>
<div class='slotValue'>	Waits for and reads numBytes of udp data from the specified ipAddress into the socket's readBuffer.
	Returns self on success or an Error object on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>udpReadNextChunk(ipAddress)</div>
<div class='slotValue'>	Waits to receive UDP data from the specified ipAddress. 
	As soon as any data is available, it reads all of it into the socket's readBuffer.
	Returns self on success or an Error object on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>udpWrite</div>
<div class='slotValue'>Same as asyncUdpWrite.
</div>
</div>
<div class='slot'>
<div class='slotName'>writeFromBuffer(optionalProgressBlock)</div>
<div class='slotValue'>	Writes the contents of the socket's writeBuffer to the socket. 
	If optionalProgressBlock is supplied, it is periodically called with the number of bytes written as an argument.
	Returns self on success or an Error object on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>writeListMessage(aList)</div>
<div class='slotValue'> A shortcut for writeMessage(aList asEncodedList).
</div>
</div>
<div class='slot'>
<div class='slotName'>writeMessage(aSeq)</div>
<div class='slotValue'>	Writes a 4 byte uint32 in network byte order containing the size of aSeq. 
	Then writes the bytes in aSeq and returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>writeTimeout</div>
<div class='slotValue'>Returns the length of time in seconds for write timeouts on the socket.
</div>
</div>
</div>
<a name='Socket.TimerEvent'></a>
<div class='class'>
<div class='className'>TimerEvent</div>
<div class='classDescription'>Object for timer events.
</div>
</div>
<a name='Socket.URL'></a>
<div class='class'>
<div class='className'>URL</div>
<div class='slot'>
<div class='slotName'>clear</div>
<div class='slotValue'>Private method to clear the URL's parsed attributes.
</div>
</div>
<div class='slot'>
<div class='slotName'>escapeString(aString)</div>
<div class='slotValue'>	Returns a new String that is aString with the appropriate characters replaced by their URL escape codes.
</div>
</div>
<div class='slot'>
<div class='slotName'>fetch</div>
<div class='slotValue'>Fetches the url and returns the result as a Sequence. Returns an Error, if one occurs.
</div>
</div>
<div class='slot'>
<div class='slotName'>fetchHttp(optionalProgressBlock)</div>
<div class='slotValue'> Private method that fetches an http url.
</div>
</div>
<div class='slot'>
<div class='slotName'>fetchRaw</div>
<div class='slotValue'>Fetch and return the entire response. Note: This may have problems for some request times.
</div>
</div>
<div class='slot'>
<div class='slotName'>fetchToFile(aFile)</div>
<div class='slotValue'>	Fetch the url and save the result to the specified File object. 
	Saving is done as the data is read, which helps minimize memory usage. 
	Returns self on success or nil on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>fetchWithProgress(progressBlock)</div>
<div class='slotValue'>	Same as fetch, but with each read, progressBlock is called with the readBuffer 
	and the content size as parameters.
</div>
</div>
<div class='slot'>
<div class='slotName'>headerBreaks</div>
<div class='slotValue'>Private method to connect to the host and write the header.
</div>
</div>
<div class='slot'>
<div class='slotName'>openOnDesktop</div>
<div class='slotValue'>Opens the URL in the local default browser. Supports OSX, Windows and (perhaps) other Unixes.
</div>
</div>
<div class='slot'>
<div class='slotName'>parse</div>
<div class='slotValue'>Private method to parse the url.
</div>
</div>
<div class='slot'>
<div class='slotName'>post(parameters, headers)</div>
<div class='slotValue'>	Sends an HTTP post message. If parameters is a Map, its key/value pairs are 
	send as the post parameters. If parameters is a Sequence or String, it is sent directly.
	Any headers in the headers map are sent with the request.
	Returns a sequence containing the response on success or an Error, if one occurs.
</div>
</div>
<div class='slot'>
<div class='slotName'>processHttpResponse(optionalProgressBlock)</div>
<div class='slotValue'> Private method that processes http response.
</div>
</div>
<div class='slot'>
<div class='slotName'>referer</div>
<div class='slotValue'>Returns the referer String or nil if not set.
</div>
</div>
<div class='slot'>
<div class='slotName'>requestHeader</div>
<div class='slotValue'>	Returns a Sequence containing the request header that will be sent.
</div>
</div>
<div class='slot'>
<div class='slotName'>setReferer(aString)</div>
<div class='slotValue'> Sets the referer. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setRequest(requestString)</div>
<div class='slotValue'> Private method to set the url request.
</div>
</div>
<div class='slot'>
<div class='slotName'>setResponseHeaderString(headerString)</div>
<div class='slotValue'> Private method that parses the responseHeaders.
</div>
</div>
<div class='slot'>
<div class='slotName'>setURL(urlString)</div>
<div class='slotValue'>	Sets the url string and parses into the protocol, host, port path, and query slots. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>stopFetch</div>
<div class='slotValue'>	Stops the fetch, if there is one. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>test</div>
<div class='slotValue'>Private test method.
</div>
</div>
<div class='slot'>
<div class='slotName'>unescapeString(aString)</div>
<div class='slotValue'>	Returns a new String that is aString with the URL escape codes replaced by the appropriate characters.
</div>
</div>
<div class='slot'>
<div class='slotName'>url</div>
<div class='slotValue'>Returns url string.
</div>
</div>
<div class='slot'>
<div class='slotName'>with(urlString)</div>
<div class='slotValue'> Returns a new URL instance for the url in the urlString.
</div>
</div>
</div>
<a name='Socket.WriteEvent'></a>
<div class='class'>
<div class='className'>WriteEvent</div>
<div class='classDescription'>Object for write events.
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Twitter</div>
<a name='Twitter.TwitterAccount'></a>
<div class='class'>
<div class='className'>TwitterAccount</div>
<div class='classDescription'>Object representing a twitter account.
</div>
<div class='slot'>
<div class='slotName'>account</div>
<div class='slotValue'>Returns account associated with this profile.
</div>
</div>
<div class='slot'>
<div class='slotName'>backgroundColor</div>
<div class='slotValue'>Returns the backgroundColor set in the twitter profile.
</div>
</div>
<div class='slot'>
<div class='slotName'>backgroundImageFile</div>
<div class='slotValue'>Returns the backgroundImageFile set in the twitter profile.
</div>
</div>
<div class='slot'>
<div class='slotName'>deleteStatus(tweetId)</div>
<div class='slotValue'> Deletes the specified tweet and returns the results of the request.
</div>
</div>
<div class='slot'>
<div class='slotName'>description</div>
<div class='slotValue'>Returns the description set in the twitter profile.
</div>
</div>
<div class='slot'>
<div class='slotName'>follow(aScreenName)</div>
<div class='slotValue'> Follow the user with the specified screen name. Returns results of the request.
</div>
</div>
<div class='slot'>
<div class='slotName'>followId(userId)</div>
<div class='slotValue'> Follow the user with the specified id. Returns results of the request.
</div>
</div>
<div class='slot'>
<div class='slotName'>followersCursor</div>
<div class='slotValue'>Returns a new TwitterFollowersCursor instance for this account.
</div>
</div>
<div class='slot'>
<div class='slotName'>friendsCursor</div>
<div class='slotValue'>Returns a new TwitterFriendsCursor instance for this account.
</div>
</div>
<div class='slot'>
<div class='slotName'>hasFollower(aScreenName)</div>
<div class='slotValue'> Returns true if the account has the specified follower, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>hasFriend(aScreenName)</div>
<div class='slotValue'> Returns true if the account has the specified friend, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>hasProtectedUpdates</div>
<div class='slotValue'>Returns true if the account has protected updates, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>imageFile</div>
<div class='slotValue'>Returns the imageFile set in the twitter profile.
</div>
</div>
<div class='slot'>
<div class='slotName'>isLimited</div>
<div class='slotValue'>Returns true if the account's rate limit is exceeded, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>isSuspended(aScreenName)</div>
<div class='slotValue'> Returns true if the specified screenName is a suspended account, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>linkColor</div>
<div class='slotValue'>Returns the linkColor set in the twitter profile.
</div>
</div>
<div class='slot'>
<div class='slotName'>location</div>
<div class='slotValue'>Returns the geographical location set in the twitter profile.
</div>
</div>
<div class='slot'>
<div class='slotName'>mentions</div>
<div class='slotValue'>Returns mentions for this account.
</div>
</div>
<div class='slot'>
<div class='slotName'>name</div>
<div class='slotValue'>Returns the name associated with the profile.
</div>
</div>
<div class='slot'>
<div class='slotName'>password</div>
<div class='slotValue'>Returns the account password.
</div>
</div>
<div class='slot'>
<div class='slotName'>profile</div>
<div class='slotValue'>Returns the account Profile object.
</div>
</div>
<div class='slot'>
<div class='slotName'>rateLimitExpiration</div>
<div class='slotValue'>Returns the account rateLimitExpiration.
</div>
</div>
<div class='slot'>
<div class='slotName'>rateLimitRemaining</div>
<div class='slotValue'>Returns the account rateLimitRemaining.
</div>
</div>
<div class='slot'>
<div class='slotName'>request</div>
<div class='slotValue'>Returns a new TwitterRequest object for this account.
</div>
</div>
<div class='slot'>
<div class='slotName'>resultsFor(aRequest)</div>
<div class='slotValue'> Returns results for the request.
</div>
</div>
<div class='slot'>
<div class='slotName'>retweet(tweetId)</div>
<div class='slotValue'> Retweets the tweet with tweetId
</div>
</div>
<div class='slot'>
<div class='slotName'>screenName</div>
<div class='slotValue'>Returns the account screenName.
</div>
</div>
<div class='slot'>
<div class='slotName'>setAccount(anAccount)</div>
<div class='slotValue'> Sets the account associated with this profile. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setName(aSeq)</div>
<div class='slotValue'> Sets the name associated with the profile. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPassword(aSeq)</div>
<div class='slotValue'> Sets the account password. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setProfile(aProfile)</div>
<div class='slotValue'> Sets the account profile. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setRateLimitExpiration(aNumber)</div>
<div class='slotValue'> Sets the account rateLimitExpiration. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setRateLimitRemaining(aNumber)</div>
<div class='slotValue'> Sets the account rateLimitRemaining. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setScreenName(aSeq)</div>
<div class='slotValue'> Sets the account screenName. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSource(aSource)</div>
<div class='slotValue'> Sets the account source. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>show</div>
<div class='slotValue'>Returns a Map containing attributes related to the Twitter user associated with this account
</div>
</div>
<div class='slot'>
<div class='slotName'>showUser(aScreenName)</div>
<div class='slotValue'> Returns a Map containing attributes related to the Twitter user associated with aScreenName
</div>
</div>
<div class='slot'>
<div class='slotName'>showUserWithId(anId)</div>
<div class='slotValue'> Returns a Map containing attributes related to the Twitter user associated with anId
</div>
</div>
<div class='slot'>
<div class='slotName'>sidebarBorderColor</div>
<div class='slotValue'>Returns the sidebarBorderColor set in the twitter profile.
</div>
</div>
<div class='slot'>
<div class='slotName'>sidebarFillColor</div>
<div class='slotValue'>Returns the sidebarFillColor set in the twitter profile.
</div>
</div>
<div class='slot'>
<div class='slotName'>source</div>
<div class='slotValue'>Returns the account source (e.g. "API").
</div>
</div>
<div class='slot'>
<div class='slotName'>textColor</div>
<div class='slotValue'>Returns the textColor set in the twitter profile.
</div>
</div>
<div class='slot'>
<div class='slotName'>tilesBackgroundImage</div>
<div class='slotValue'>Returns the tilesBackgroundImage set in the twitter profile.
</div>
</div>
<div class='slot'>
<div class='slotName'>twitterIdForScreenName(aScreenName)</div>
<div class='slotValue'> Returns twitter id for the specified screenName.
</div>
</div>
<div class='slot'>
<div class='slotName'>unfollow(aScreenName)</div>
<div class='slotValue'> Unfollow the user with the specified screen name. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>unfollowId(userId)</div>
<div class='slotValue'> Unfollow the user with the specified screen id. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>update</div>
<div class='slotValue'>Fetch the latest basic profile settings from twitter.
</div>
</div>
<div class='slot'>
<div class='slotName'>updateBackgroundImage</div>
<div class='slotValue'>Fetch the latest background image settings from twitter.
</div>
</div>
<div class='slot'>
<div class='slotName'>updateColors</div>
<div class='slotValue'>Fetch the latest profile color settings from twitter.
</div>
</div>
<div class='slot'>
<div class='slotName'>updateImage</div>
<div class='slotValue'>Fetch the latest image settings from twitter.
</div>
</div>
<div class='slot'>
<div class='slotName'>updateRateLimits</div>
<div class='slotValue'>Updates the rate limits. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>updateStatus(messageText, tweetId)</div>
<div class='slotValue'> Updates the status message and returns the results of the request.
</div>
</div>
<div class='slot'>
<div class='slotName'>url</div>
<div class='slotValue'>Returns the url to the twitter profile.
</div>
</div>
<div class='slot'>
<div class='slotName'>userExists(aScreenName)</div>
<div class='slotValue'> Returns true if the specified user exists, false otherwise.
</div>
</div>
</div>
<a name='Twitter.TwitterAccountProfile'></a>
<div class='class'>
<div class='className'>TwitterAccountProfile</div>
<div class='classDescription'>Object representing a twitter account profile.
</div>
</div>
<a name='Twitter.TwitterException'></a>
<div class='class'>
<div class='className'>TwitterException</div>
<div class='slot'>
<div class='slotName'>isAlreadyFollowing</div>
<div class='slotValue'>Returns isAlreadyFollowing attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>isBadRequest</div>
<div class='slotValue'>Returns isBadRequest attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>isBlocked</div>
<div class='slotValue'>Returns isBlocked attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>isBlockedOrSuspendedOrProtected</div>
<div class='slotValue'>Returns isBlockedOrSuspendedOrProtected attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>isDown</div>
<div class='slotValue'>Returns isDown attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>isFollowLimit</div>
<div class='slotValue'>Returns isFollowLimit attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>isFollowedSelf</div>
<div class='slotValue'>Returns isFollowedSelf attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>isForbidden</div>
<div class='slotValue'>Returns isForbidden attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>isInternalError</div>
<div class='slotValue'>Returns isInternalError attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>isNotAuthorized</div>
<div class='slotValue'>Returns isNotAuthorized attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>isNotFound</div>
<div class='slotValue'>Returns isNotFound attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>isOverloaded</div>
<div class='slotValue'>Returns isOverloaded attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>isRateLimited</div>
<div class='slotValue'>Returns isRateLimited attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>isSuspended</div>
<div class='slotValue'>Returns isSuspended attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>isUnknown</div>
<div class='slotValue'>Returns isUnknown attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>userIsMissing</div>
<div class='slotValue'>Returns userIsMissing attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>wasntFriend</div>
<div class='slotValue'>Returns wasntFriend attribute.
</div>
</div>
</div>
<a name='Twitter.TwitterFollowersCursor'></a>
<div class='class'>
<div class='className'>TwitterFollowersCursor</div>
<div class='classDescription'>Inherits from TwitterFriendsFollowersCursor. requestType is "asFollowerIds".
</div>
</div>
<a name='Twitter.TwitterFriendsCursor'></a>
<div class='class'>
<div class='className'>TwitterFriendsCursor</div>
<div class='classDescription'>Inherits from TwitterFriendsFollowersCursor. requestType is "asFriendIds".
</div>
</div>
<a name='Twitter.TwitterRequest'></a>
<div class='class'>
<div class='className'>TwitterRequest</div>
<div class='classDescription'>Represents a Twitter API request and contains its results.
</div>
<div class='slot'>
<div class='slotName'>delegate</div>
<div class='slotValue'>Delegate for request callbacks.
</div>
</div>
<div class='slot'>
<div class='slotName'>execute</div>
<div class='slotValue'>Sends the request. Returns the response object.
</div>
</div>
<div class='slot'>
<div class='slotName'>host</div>
<div class='slotValue'>"twitter.com"
</div>
</div>
<div class='slot'>
<div class='slotName'>httpMethod</div>
<div class='slotValue'>"get"
</div>
</div>
<div class='slot'>
<div class='slotName'>password</div>
<div class='slotValue'>Returns the password attribute.
</div>
</div>
<div class='slot'>
<div class='slotName'>path</div>
<div class='slotValue'>Request path.
</div>
</div>
<div class='slot'>
<div class='slotName'>response</div>
<div class='slotValue'>This slot holds a TwitterResponse object for this request.
</div>
</div>
<div class='slot'>
<div class='slotName'>username</div>
<div class='slotValue'>Returns the username attribute.
</div>
</div>
</div>
<a name='Twitter.TwitterResponse'></a>
<div class='class'>
<div class='className'>TwitterResponse</div>
<div class='slot'>
<div class='slotName'>body</div>
<div class='slotValue'>Returns request to which this is the response.
</div>
</div>
<div class='slot'>
<div class='slotName'>rateLimitExpiration</div>
<div class='slotValue'>Returns the rate limit expiration.
</div>
</div>
<div class='slot'>
<div class='slotName'>rateLimitRemaining</div>
<div class='slotValue'>Returns the rate limit remaining.
</div>
</div>
<div class='slot'>
<div class='slotName'>results</div>
<div class='slotValue'>Returns response results.
</div>
</div>
</div>
<a name='Twitter.TwitterSearch'></a>
<div class='class'>
<div class='className'>TwitterSearch</div>
<div class='slot'>
<div class='slotName'>cursor</div>
<div class='slotValue'>Returns the TwitterSearchCursor for the first page.
</div>
</div>
<div class='slot'>
<div class='slotName'>perPage</div>
<div class='slotValue'>Returns the results per page.
</div>
</div>
<div class='slot'>
<div class='slotName'>query</div>
<div class='slotValue'>Returns the search query.
</div>
</div>
<div class='slot'>
<div class='slotName'>results</div>
<div class='slotValue'>Returns the results for the current page.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPerPage(aSeq)</div>
<div class='slotValue'> Sets the results per page. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setQuery(aSeq)</div>
<div class='slotValue'> Sets the query. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>sinceUpdateId</div>
<div class='slotValue'>Returns the current page number of search results.
</div>
</div>
</div>
<a name='Twitter.TwitterSearchCursor'></a>
<div class='class'>
<div class='className'>TwitterSearchCursor</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Volcano</div>
<a name='Volcano.VolcanoServer'></a>
<div class='class'>
<div class='className'>VolcanoServer</div>
<div class='classDescription'>A simplified version of HttpServer
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Parsers</div>
<div class='package'>
<div class='packageName'>Fnmatch</div>
<a name='Fnmatch.Fnmatch'></a>
<div class='class'>
<div class='className'>Fnmatch</div>
<div class='classDescription'>The fnmatch add on adds support for the unix fnmatch function. 
(See fnmatch man page for details). 
Note: not all options are supported on all platforms.
</div>
<div class='slot'>
<div class='slotName'>caseFoldOff</div>
<div class='slotValue'>	See caseFoldOn.
</div>
</div>
<div class='slot'>
<div class='slotName'>caseFoldOn</div>
<div class='slotValue'>	Ignore case distinctions in both the pattern and the string.
</div>
</div>
<div class='slot'>
<div class='slotName'>hasMatch</div>
<div class='slotValue'>	Returns true if a match is found, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>leadingDirOff</div>
<div class='slotValue'>	See leadingDirOn.
</div>
</div>
<div class='slot'>
<div class='slotName'>leadingDirOn</div>
<div class='slotValue'>	Ignore rest after successful pattern matching.
</div>
</div>
<div class='slot'>
<div class='slotName'>matchFor(aString)</div>
<div class='slotValue'>	Returns self if aString matches the pattern, otherwise returns nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>noEscapeOff</div>
<div class='slotValue'>	See noEscapeOn.
</div>
</div>
<div class='slot'>
<div class='slotName'>noEscapeOn</div>
<div class='slotValue'>	If not set, a backslash character (\) in pattern followed by any other 
	character will match that second character in string. 
	In particular, "\\" will match a backslash in string. 
	If set, a backslash character will be treated as an ordinary character.
</div>
</div>
<div class='slot'>
<div class='slotName'>pathNameOff</div>
<div class='slotValue'>	See pathNameOn.
</div>
</div>
<div class='slot'>
<div class='slotName'>pathNameOn</div>
<div class='slotValue'>	If set, a slash (/) character in string will be explicitly matched 
	by a slash in pattern; it will not be matched by either the asterisk (*) 
	or question-mark (?) special characters, nor by a bracket ([]) expression. 
	If not set, the slash character is treated as an ordinary character.
</div>
</div>
<div class='slot'>
<div class='slotName'>pattern</div>
<div class='slotValue'>	Returns the pattern string.
</div>
</div>
<div class='slot'>
<div class='slotName'>periodOff</div>
<div class='slotValue'>	"See periodOn.
</div>
</div>
<div class='slot'>
<div class='slotName'>periodOn</div>
<div class='slotValue'>	If set, a leading period in string will match a period in pattern; where the location of ``leading'' is indicated by the value of FNM_PATHNAME:
<UL>
<LI>If FNM_PATHNAME is set, a period is ``leading'' if it is the first character in string or if it immediately follows a slash.

<LI>If FNM_PATHNAME is not set, a period is ``leading'' only if it is the first character of string.
</UL>
<p>
If not set, no special restrictions are placed on matching a period.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPattern(aString)</div>
<div class='slotValue'>	Sets the pattern string. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setString(aString)</div>
<div class='slotValue'>	Sets the string to do matching on.
</div>
</div>
<div class='slot'>
<div class='slotName'>string</div>
<div class='slotValue'>	The string to do matching on.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Libxml2</div>
<a name='Libxml2.XmlReader'></a>
<div class='class'>
<div class='className'>XmlReader</div>
</div>
<a name='Libxml2.XmlWriter'></a>
<div class='class'>
<div class='className'>XmlWriter</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Regex</div>
<a name='Regex.Regex'></a>
<div class='class'>
<div class='className'>Regex</div>
<div class='classDescription'><p>The Regex addon adds support for Perl regular expressions
using the <a href=http://www.pcre.org/>PCRE</a> library by Philip Hazel.</p>

<h4>Example 1</h4>
<pre>	
Io> re := "is.*a" asRegex
Io> "This is a test. This is also a test." \
    allMatchesOfRegex("is.*a") replaceAllWith("is not a")
==> "This is not a test. This is not a test.
</pre>

<h4>Example 2</h4>
<pre>	
Io> "11aabb" allMatchesOfRegex("aa*")
==> list("a", "a")

Io> re := "(wom)(bat)" asRegex
Io> "wombats are cuddly" matchesOfRegex(re) replaceAllWith("$2$1!")
==> batwom!s are cuddly
</pre>
</div>
<div class='slot'>
<div class='slotName'>asRegex</div>
<div class='slotValue'>	Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>asString</div>
<div class='slotValue'>	Returns a string containing a textual representation of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>captureCount</div>
<div class='slotValue'>	Returns the number of captures defined by the pattern.
</div>
</div>
<div class='slot'>
<div class='slotName'>caseless</div>
<div class='slotValue'>	Returns a case insensitive clone of the receiver, or self if the receiver itself is
	case insensitive:

	<pre>	
	Io> "WORD" matchesRegex("[a-z]+")
	==> false

	Io> "WORD" matchesRegex("[a-z]+" asRegex caseless)
	==> true
	</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>dotAll</div>
<div class='slotValue'>	<p>Returns a clone of the receiver with the dotall option turned on,
	or self if the receiver itself has the option turned on.</p>

	<p>In dotall mode, "." matches any character, including newline. By default
	it matches any character <em>except</em> newline.</p>

	<pre>	
	Io> "A\nB" matchesOfRegex(".+") next string
	==> A

	Io> "A\nB" matchesOfRegex(".+" asRegex dotAll) next string
	==> A\nB
	</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>extended</div>
<div class='slotValue'>	<p>Returns a clone of the receiver with the extended option turned on,
	or self if the receiver itself has the option turned on.</p>

	<p>In extended mode, a Regex ignores any whitespace character in the pattern	except
	when escaped or inside a character class. This allows you to write clearer patterns
	that may be broken up into several lines.</p>

	<p>Additionally, you can put comments in the pattern. A comment starts with a "#"
	character and continues to the end of the line, unless the "#" is escaped or is
	inside a character class.</p>
</div>
</div>
<div class='slot'>
<div class='slotName'>isCaseless</div>
<div class='slotValue'>	Returns true if the receiver is case insensitive, false if not.
</div>
</div>
<div class='slot'>
<div class='slotName'>isDotAll</div>
<div class='slotValue'>	Returns true if the receiver is in dotall mode, false if not.
</div>
</div>
<div class='slot'>
<div class='slotName'>isExtended</div>
<div class='slotValue'>	Returns true if the receiver is in extended mode, false if not.
</div>
</div>
<div class='slot'>
<div class='slotName'>isMultiline</div>
<div class='slotValue'>	Returns true if the receiver is in multiline mode, false if not.
</div>
</div>
<div class='slot'>
<div class='slotName'>matchesIn(aString)</div>
<div class='slotValue'>	Returns a RegexMatches object that enumerates the matches of the receiver
	in the given string.
</div>
</div>
<div class='slot'>
<div class='slotName'>multiline</div>
<div class='slotValue'>	<p>Returns a clone of the receiver with the multiline option turned on,
	or self if the receiver itself has the option turned on.</p>

	<p>In multiline mode, "^" matches at the beginning of the string and at
	the beginning of each line; and "$" matches at the end of the string,
	and at the end of each line.
	By default "^" only matches at the beginning of the string, and "$"
	only matches at the end of the string.</p>

	<pre>	
	Io> "A\nB\nC" allMatchesForRegex("^.")
	==> list("A")

	Io> "A\nB\nC" allMatchesForRegex("^." asRegex multiline)
	==> list("A", "B", "C")
	</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>nameTable</div>
<div class='slotValue'>	Returns a list with the name of each capture.
	The first element will always be nil, because it corresponds to the whole match.
	The second element will contain the name of the first capture, or nil if the first
	capture has no name.
	And so on.
</div>
</div>
<div class='slot'>
<div class='slotName'>namedCaptures</div>
<div class='slotValue'>	Returns a Map that contains the index of each named group.
</div>
</div>
<div class='slot'>
<div class='slotName'>names</div>
<div class='slotValue'>	Returns a list of the name of each named capture.
	If there are no named captures, the list will be empty.
</div>
</div>
<div class='slot'>
<div class='slotName'>notCaseless</div>
<div class='slotValue'>	The reverse of caseless.
</div>
</div>
<div class='slot'>
<div class='slotName'>notDotAll</div>
<div class='slotValue'>	The reverse of dotAll.
</div>
</div>
<div class='slot'>
<div class='slotName'>notExtended</div>
<div class='slotValue'>	The reverse of extended.
</div>
</div>
<div class='slot'>
<div class='slotName'>notMultiline</div>
<div class='slotValue'>	The reverse of multiline.
</div>
</div>
<div class='slot'>
<div class='slotName'>pattern</div>
<div class='slotValue'>	Returns the pattern string that the receiver was created from.
</div>
</div>
<div class='slot'>
<div class='slotName'>version</div>
<div class='slotValue'>	Returns a string with PCRE version information.
</div>
</div>
<div class='slot'>
<div class='slotName'>with(pattern)</div>
<div class='slotValue'>	Returns a new Regex created from the given pattern string.
</div>
</div>
</div>
<a name='Regex.RegexMatch'></a>
<div class='class'>
<div class='className'>RegexMatch</div>
<div class='classDescription'>Contains the result of a regular expression match operation.
It acts as a read-only list of captured strings.
The first item is the entire matched string.
Each item after that is a captured sub pattern (anything inbetween
parenthesis in the pattern).

<pre>
Io> match := "37signals" findRegex("([0-9]+)([a-z]+)(!!)?")
==> RegexMatch: "37signals" 

# Item 0 is the entire matched string:
Io> match at(0)
==> 37signals

# Item 1 is the first capture ("[0-9]+"):
Io> match at(1)
==> 37

# Item 2 is the second capture ("[a-z]+"):
Io> match at(2)
==> signals

# The third sub pattern wasn't part of the match, so item 3 is nil:
Io> match at(3)
==> nil

# You can access captures by name:
Io> match at("number")
==> 37
Io> match at("word")
==> signals
</pre>
</div>
<div class='slot'>
<div class='slotName'>asString</div>
<div class='slotValue'>	Returns a string containing a textual representation of the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>at(indexOrName)</div>
<div class='slotValue'>	Returns the capture with the given index or name. <code>at(0)</code> is the entire match.
</div>
</div>
<div class='slot'>
<div class='slotName'>captures</div>
<div class='slotValue'>	Returns a list of captured strings. The first element is the whole match.
</div>
</div>
<div class='slot'>
<div class='slotName'>end</div>
<div class='slotValue'>	Returns the index into the subject at which the match ends.
</div>
</div>
<div class='slot'>
<div class='slotName'>endOf(indexOrName)</div>
<div class='slotValue'>	Returns the index into the subject at which the capture with the given index or name ends.
</div>
</div>
<div class='slot'>
<div class='slotName'>expandTo(templateString)</div>
<div class='slotValue'>	Returns <em>templateString</em> with capture placeholders replaced with what they represent.
	<code>$0</code> is replaced with the whole match, <code>$1</code> is replaced with the first
	sub capture, etc. <code>${name}</code> is replaced with the capture of that name.
</div>
</div>
<div class='slot'>
<div class='slotName'>foreach([index], capture, message)</div>
<div class='slotValue'>	Loops through the captures, assigns each capture to <em>capture</em>, and evaluates <em>message</em>.
	Returns a list with the result of each evaluation.
</div>
</div>
<div class='slot'>
<div class='slotName'>indexOf(name)</div>
<div class='slotValue'>	Returns the index of the capture with the given name.
</div>
</div>
<div class='slot'>
<div class='slotName'>map([index], capture, message)</div>
<div class='slotValue'>	Like <code>foreach</code>, but the result of each evaluation of <em>message</em> is returned in a list.
</div>
</div>
<div class='slot'>
<div class='slotName'>nameOf(index)</div>
<div class='slotValue'>	Returns the name of the capture with the given index.
</div>
</div>
<div class='slot'>
<div class='slotName'>names</div>
<div class='slotValue'>	Returns a list of the name of each named capture.
	If there are no named captures, the list will be empty.
</div>
</div>
<div class='slot'>
<div class='slotName'>postfix</div>
<div class='slotValue'>	Returns a slice of the subject string that contains all text after this match.
	Equivalent to:
	<pre>
	match subject slice(match end)
	</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>prefix</div>
<div class='slotValue'>	Returns a slice of the subject string that contains all text before this match.
	Equivalent to:
	<pre>
	match subject slice(0, match start)
	</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>range</div>
<div class='slotValue'>	Returns the range of the match in the subject.
</div>
</div>
<div class='slot'>
<div class='slotName'>rangeOf(indexOrName)</div>
<div class='slotValue'>	Returns the range of the capture with the given index or name.
</div>
</div>
<div class='slot'>
<div class='slotName'>ranges</div>
<div class='slotValue'>	Returns a list containing the range of each capture.
</div>
</div>
<div class='slot'>
<div class='slotName'>regex</div>
<div class='slotValue'>	Returns the Regex that was used to find this match.
</div>
</div>
<div class='slot'>
<div class='slotName'>select([index], capture, message)</div>
<div class='slotValue'>	Like <code>foreach</code>, but the values for which the result of evaluating <em>message</em> are non-nil are returned
	in a list.
</div>
</div>
<div class='slot'>
<div class='slotName'>size</div>
<div class='slotValue'>	Returns the number of captures.
</div>
</div>
<div class='slot'>
<div class='slotName'>sizeInChars</div>
<div class='slotValue'>	Returns the length of the match, in characters.
</div>
</div>
<div class='slot'>
<div class='slotName'>slice(startIndex, [endIndex])</div>
<div class='slotValue'>	Returns a new list containing the subset of the receiver from the <em>startIndex</em> to the <em>endIndex</em>.
	The <em>endIndex</em> argument is optional. If not given, it is assumed to be the end of the capture list.
</div>
</div>
<div class='slot'>
<div class='slotName'>start</div>
<div class='slotValue'>	Returns the index into the subject at which the match starts.
</div>
</div>
<div class='slot'>
<div class='slotName'>startOf(indexOrName)</div>
<div class='slotValue'>	Returns the index into the subject at which the capture with the given index or name starts.
</div>
</div>
<div class='slot'>
<div class='slotName'>string</div>
<div class='slotValue'>	Returns the matched string.
</div>
</div>
<div class='slot'>
<div class='slotName'>subject</div>
<div class='slotValue'>	Returns the string that this match was found in.
</div>
</div>
</div>
<a name='Regex.RegexMatche'></a>
<div class='class'>
<div class='className'>RegexMatche</div>
</div>
<a name='Regex.RegexMatches'></a>
<div class='class'>
<div class='className'>RegexMatches</div>
<div class='classDescription'>A regular expression match iterator.
</div>
<div class='slot'>
<div class='slotName'>all</div>
<div class='slotValue'>	Returns a list containing all matches in the string.
</div>
</div>
<div class='slot'>
<div class='slotName'>allowEmptyMatches</div>
<div class='slotValue'>	Tells the receiver to allow zero length matches. Empty matches are allowed by default.
	Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>allowsEmptyMatches</div>
<div class='slotValue'>	Returns true if the receiver allows empty matches, false if not.
</div>
</div>
<div class='slot'>
<div class='slotName'>anchored</div>
<div class='slotValue'>	Like <code>next</code>, but will only match at the current search position.
</div>
</div>
<div class='slot'>
<div class='slotName'>disallowEmptyMatches</div>
<div class='slotValue'>	Tells the receiver not to allow zero length matches. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>endPosition</div>
<div class='slotValue'>	Returns the index in the string where the receiver stops searching.
</div>
</div>
<div class='slot'>
<div class='slotName'>foreach(value, message)</div>
<div class='slotValue'>	Loops through the matches, assigns each match to <em>value</em>, and evaluates <em>message</em>.
	Returns the result of the last evaluation.
</div>
</div>
<div class='slot'>
<div class='slotName'>foreachInterval(value, matchMessage, nonMatchMessage)</div>
<div class='slotValue'>	Like <code>foreach</code>, but takes an extra message that will be evaluated for the non-matching
	text before each match, and the non-matching text after the last match.
</div>
</div>
<div class='slot'>
<div class='slotName'>last</div>
<div class='slotValue'>	Returns the last match in the string.
</div>
</div>
<div class='slot'>
<div class='slotName'>map(value, message)</div>
<div class='slotValue'>	Like <code>foreach</code>, but the result of each evaluation of <em>message</em> is returned
	in a list.
</div>
</div>
<div class='slot'>
<div class='slotName'>next</div>
<div class='slotValue'>	Returns the next match, or nil if there is none.
</div>
</div>
<div class='slot'>
<div class='slotName'>position</div>
<div class='slotValue'>	Returns the search position as an index in the string.
</div>
</div>
<div class='slot'>
<div class='slotName'>regex</div>
<div class='slotValue'>	Returns the Regex that the receiver uses for finding matching.
</div>
</div>
<div class='slot'>
<div class='slotName'>replace(name, message)</div>
<div class='slotValue'>	Replaces each match in the string with the result of <em>message</em> and returns
	the resulting string.
</div>
</div>
<div class='slot'>
<div class='slotName'>replaceAllWith(templateString)</div>
<div class='slotValue'>	Same as:
	<pre>
	replace(match, match expandTo(templateString))
	</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>reset</div>
<div class='slotValue'>	Resets the search position to the beginning of the string. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setEndPosition(anIndex)</div>
<div class='slotValue'>	Sets the index in the string where the receiver should stop searching. It will be as
	if the string ends at that index. If <em>index</em> is nil, the end position will be set
	to the end of string.
	Returns self.

	<pre>
	Io> "funkadelic" matchesOfRegex("\\w+") setEndPosition(4) next string
	==> funk

	Io> "funkadelic" matchesOfRegex("\\w+") setEndPosition(nil) next string
	==> funkadelic
	</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>setPosition(aRegexOrString)</div>
<div class='slotValue'>	Sets the search position to the given index in the string. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setRegex(aRegexOrString)</div>
<div class='slotValue'>	Sets the regex to find matches in. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setString(aString)</div>
<div class='slotValue'>	Sets the string to find matches in. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>splitString</div>
<div class='slotValue'>	Splits the string being matched against into pieces using the regex as the delimiter
	and returns the piece as a list of strings.
</div>
</div>
<div class='slot'>
<div class='slotName'>string</div>
<div class='slotValue'>	Returns the string that the receiver finds matches in.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>SGML</div>
<a name='SGML.SGMLElement'></a>
<div class='class'>
<div class='className'>SGMLElement</div>
<div class='slot'>
<div class='slotName'>asString</div>
<div class='slotValue'>Returns a String representation of the tag and all of its subitems.
</div>
</div>
<div class='slot'>
<div class='slotName'>attributes</div>
<div class='slotValue'>Returns a Map containing the tag's attributes.
</div>
</div>
<div class='slot'>
<div class='slotName'>name</div>
<div class='slotValue'>Returns the tag name
</div>
</div>
<div class='slot'>
<div class='slotName'>setName(aString)</div>
<div class='slotValue'> Sets the tag name. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>subitems</div>
<div class='slotValue'>Returns a List containing the tag's subitems.
</div>
</div>
</div>
<a name='SGML.SGMLParser'></a>
<div class='class'>
<div class='className'>SGMLParser</div>
<div class='classDescription'>This object can be used to parse SGML / HTML / XML.
</div>
<div class='slot'>
<div class='slotName'>parse(aSequence)</div>
<div class='slotValue'>	Parses aSequence and calls the following methods on self;
<pre>	
startElement(name)
endElement(name)
newAttribute(key, value)
newText(text)
</pre>	
for each of the items it finds. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>tagForString(aSequence)</div>
<div class='slotValue'>Parses aSequence and returns an SGMLTag object.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Yajl</div>
<a name='Yajl.YajlGenParser'></a>
<div class='class'>
<div class='className'>YajlGenParser</div>
<div class='classDescription'>This object can be used to parse YajlGen / HTML / XML.
</div>
</div>
<a name='Yajl.YajlParser'></a>
<div class='class'>
<div class='className'>YajlParser</div>
<div class='classDescription'>This object can be used to parse Yajl / HTML / XML.
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Physics</div>
<div class='package'>
<div class='packageName'>ODE</div>
<a name='ODE.ODEBall'></a>
<div class='class'>
<div class='className'>ODEBall</div>
<div class='classDescription'>ODEBall binding
</div>
</div>
<a name='ODE.ODEBody'></a>
<div class='class'>
<div class='className'>ODEBody</div>
<div class='classDescription'>ODEBody binding
</div>
</div>
<a name='ODE.ODEBox'></a>
<div class='class'>
<div class='className'>ODEBox</div>
<div class='classDescription'>ODEBox binding
</div>
</div>
<a name='ODE.ODEContact'></a>
<div class='class'>
<div class='className'>ODEContact</div>
<div class='classDescription'>ODEContact binding
</div>
</div>
<a name='ODE.ODEContactJoint'></a>
<div class='class'>
<div class='className'>ODEContactJoint</div>
<div class='classDescription'>ODEContactJoint binding
</div>
</div>
<a name='ODE.ODEFixed'></a>
<div class='class'>
<div class='className'>ODEFixed</div>
<div class='classDescription'>ODEFixed binding
</div>
</div>
<a name='ODE.ODEHinge'></a>
<div class='class'>
<div class='className'>ODEHinge</div>
<div class='classDescription'>ODEHinge binding
</div>
</div>
<a name='ODE.ODEHinge2'></a>
<div class='class'>
<div class='className'>ODEHinge2</div>
<div class='classDescription'>ODEJoint binding
</div>
</div>
<a name='ODE.ODEJoint'></a>
<div class='class'>
<div class='className'>ODEJoint</div>
<div class='classDescription'>ODEJoint binding
</div>
</div>
<a name='ODE.ODEJointGroup'></a>
<div class='class'>
<div class='className'>ODEJointGroup</div>
<div class='classDescription'>ODEJointGroup binding
</div>
</div>
<a name='ODE.ODEMass'></a>
<div class='class'>
<div class='className'>ODEMass</div>
<div class='classDescription'>ODEMass binding
</div>
</div>
<a name='ODE.ODEPlane'></a>
<div class='class'>
<div class='className'>ODEPlane</div>
<div class='classDescription'>ODEPlane binding
</div>
</div>
<a name='ODE.ODESimpleSpace'></a>
<div class='class'>
<div class='className'>ODESimpleSpace</div>
<div class='classDescription'>ODESimpleSpace binding
</div>
</div>
<a name='ODE.ODEWorld'></a>
<div class='class'>
<div class='className'>ODEWorld</div>
<div class='classDescription'>ODEWorld binding
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Server</div>
<div class='package'>
<div class='packageName'>Curses</div>
<a name='Curses.Curses'></a>
<div class='class'>
<div class='className'>Curses</div>
<div class='classDescription'>Curses allows writing and reading at arbitrary positions on the terminal. You have to call init to set the terminal to curses mode and end to end curses mode. The terminal is not updated until refresh is called. It is a bad idea to use the standard io's read and write methods when the terminal is in curses mode. The Curses primitive was written by Edwin Zacharias.
<BR><BR>
Here's an example that prints Hello at column 5 and row 7;
<p>
<pre>
Curses init
Curses move(5, 7) print(\"Hello\")
Curses refresh
Curses end
</pre>
</div>
<div class='slot'>
<div class='slotName'>begin</div>
<div class='slotValue'>	Sets the terminal to curses mode. 
	This should be called before any other curses methods. 
	Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>cBreak(aString)</div>
<div class='slotValue'>	Disables line buffering and erase/kill character-processing. 
	cBreak should be on for most purposes. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>clear</div>
<div class='slotValue'>	Clears the terminal. Nicer than erase. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>clearToEndOfLine</div>
<div class='slotValue'>	Clears the text from the cursor to the end of the line. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>delete(n)</div>
<div class='slotValue'>	Deletes n characters at the current position. Text to the right is shifted left. 
	n is optional and defaults to 1. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>echo</div>
<div class='slotValue'>	Echoes user input to terminal. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>end</div>
<div class='slotValue'>	Ends curses mode. This should be called before standard io's read 
	and write methods are used. Returs self.
</div>
</div>
<div class='slot'>
<div class='slotName'>get(n)</div>
<div class='slotValue'>	Returns n characters from the terminal. n is optional and defaults to 1.
</div>
</div>
<div class='slot'>
<div class='slotName'>getCh</div>
<div class='slotValue'>	Reads a single-byte character from the terminal associated with the 
	current or specified window. Returns a Number containing the byte.
</div>
</div>
<div class='slot'>
<div class='slotName'>hasColors</div>
<div class='slotValue'>	Returns true if the terminal supports color, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>height</div>
<div class='slotValue'>	Returns a Number containing the height of the current screen.
</div>
</div>
<div class='slot'>
<div class='slotName'>input(n)</div>
<div class='slotValue'>	Returns user input up to a return, or a maximun of n characters.
</div>
</div>
<div class='slot'>
<div class='slotName'>insert(aString)</div>
<div class='slotValue'>	Inserts the string at the current position on the terminal, 
	pushing existing text to the right. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>move(x, y)</div>
<div class='slotValue'>	Moves the cursor to column y and row x on the terminal. 
	(0, 0) is at the top-left of the terminal. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>noCBreak</div>
<div class='slotValue'>	Allows line buffering and erase/kill character-processing. 
	cBreak should be on for most purposes. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>noEcho</div>
<div class='slotValue'>	Does not echo user input to terminal. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>nodelay(aBoolean)</div>
<div class='slotValue'>	Enables or disables block during read. 
	If aNumber is zero, nodelay is set to be false, otherwise it is set to be true.
</div>
</div>
<div class='slot'>
<div class='slotName'>print(aString)</div>
<div class='slotValue'>	Prints the string to the current position on the terminal, 
	overwriting existing text on the terminal. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>refresh</div>
<div class='slotValue'>	Copies the current buffer to the screen. This must be called to make 
	changes to the screen. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>scroll(num)</div>
<div class='slotValue'>    Scrolls up num lines.
    num is optional and defaults to 1. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>scrollok(aBoolean)</div>
<div class='slotValue'>    Enables / Disables automatic scrolling. Return self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setBackgroundBlack</div>
<div class='slotValue'>	Sets the background color to black.
</div>
</div>
<div class='slot'>
<div class='slotName'>setBackgroundBlue</div>
<div class='slotValue'>	Sets the background color to blue.
</div>
</div>
<div class='slot'>
<div class='slotName'>setBackgroundCyan</div>
<div class='slotValue'>	Sets the background color to cyan.
</div>
</div>
<div class='slot'>
<div class='slotName'>setBackgroundGreen</div>
<div class='slotValue'>	Sets the background color to green.
</div>
</div>
<div class='slot'>
<div class='slotName'>setBackgroundMagenta</div>
<div class='slotValue'>	Sets the background color to magenta.
</div>
</div>
<div class='slot'>
<div class='slotName'>setBackgroundRed</div>
<div class='slotValue'>	Sets the background color to red.
</div>
</div>
<div class='slot'>
<div class='slotName'>setBackgroundWhite</div>
<div class='slotValue'>	Sets the background color to white.
</div>
</div>
<div class='slot'>
<div class='slotName'>setBackgroundYellow</div>
<div class='slotValue'>	Sets the background color to yellow.
</div>
</div>
<div class='slot'>
<div class='slotName'>setForegroundBlack</div>
<div class='slotValue'>	Sets the foreground color to black.
</div>
</div>
<div class='slot'>
<div class='slotName'>setForegroundBlue</div>
<div class='slotValue'>	Sets the foreground color to blue.
</div>
</div>
<div class='slot'>
<div class='slotName'>setForegroundCyan</div>
<div class='slotValue'>	Sets the foreground color to cyan.
</div>
</div>
<div class='slot'>
<div class='slotName'>setForegroundGreen</div>
<div class='slotValue'>	Sets the foreground color to green.
</div>
</div>
<div class='slot'>
<div class='slotName'>setForegroundMagenta</div>
<div class='slotValue'>	Sets the foreground color to magenta.
</div>
</div>
<div class='slot'>
<div class='slotName'>setForegroundRed</div>
<div class='slotValue'>	Sets the foreground color to red.
</div>
</div>
<div class='slot'>
<div class='slotName'>setForegroundWhite</div>
<div class='slotValue'>	Sets the foreground color to white.
</div>
</div>
<div class='slot'>
<div class='slotName'>setForegroundYellow</div>
<div class='slotValue'>	Sets the foreground color to yellow.
</div>
</div>
<div class='slot'>
<div class='slotName'>setScrollingRegion(top, bottom)</div>
<div class='slotValue'>    Sets the scrolling region; top and bottom are the line numbers of the top
    and button margin. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>width</div>
<div class='slotValue'>	Returns a Number containing the width of the current screen.
</div>
</div>
<div class='slot'>
<div class='slotName'>writeCharacter(aCharacter)</div>
<div class='slotValue'>	Prints the aCharacter to the current position on the terminal, 
	overwriting existing text on the terminal. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>x</div>
<div class='slotValue'>	Returns the cursor x position.
</div>
</div>
<div class='slot'>
<div class='slotName'>y</div>
<div class='slotValue'>	Returns the cursor y position.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>EditLine</div>
<a name='EditLine.EditLine'></a>
<div class='class'>
<div class='className'>EditLine</div>
<div class='classDescription'>Binding to libedit (BSD version of readline).
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>NullAddon</div>
<a name='NullAddon.NullAddon'></a>
<div class='class'>
<div class='className'>NullAddon</div>
<div class='classDescription'>A do-nothing addon for Io, primarily intended to serve as
a skeleton for writing your own addons, without having to
rewrite all the boilerplate yourself. It implements only
one method, hello, which does the obvious job of greeting the world.
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>ReadLine</div>
<a name='ReadLine.ReadLine'></a>
<div class='class'>
<div class='className'>ReadLine</div>
<div class='classDescription'>Binding to GNU readline.
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Syslog</div>
<a name='Syslog.Syslog'></a>
<div class='class'>
<div class='className'>Syslog</div>
<div class='classDescription'>Provides access to a Unix system's system logger.
<p>
<pre>
logger = Syslog clone do(
	identity("SyslogTest")
	facility(facilityMap at("LOG_USER"))
	options(List append(optionsMap at("LOG_PID"), optionsMap at("LOG_CONS")))
	priority(priorityMap at("LOG_INFO"))
	open(facility, options)
	mask(List append(maskMap at("LOG_PRIMASK")))
	log(priority, "*** Merely a test ***")
	close
)
</pre>	

<p>
Note: This is partially tested. Please let me know of any problems you happen to stumble across, or if it could be better. --Jeremy Tregunna
<p>
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>	Closes a log that has previously been opened for writing.
</div>
</div>
<div class='slot'>
<div class='slotName'>facility(optionalFacility)</div>
<div class='slotValue'>	Specifies the logging facility, which can be one of any of the values 
	found in the facilityMap map. If optionalFacility is omitted, returns 
	the currently set facility.
</div>
</div>
<div class='slot'>
<div class='slotName'>facilityMap</div>
<div class='slotValue'>	Contains the following keys, which represent numbers that can be used when opening a log:
	<p>
	<ul>
	 <li>LOG_KERN</li>
	 <li>LOG_USER</li>
	 <li>LOG_MAIL</li>
	 <li>LOG_DAEMON</li>
	 <li>LOG_AUTH</li>
	 <li>LOG_SYSLOG</li>
	 <li>LOG_LPR</li>
	 <li>LOG_NEWS</li>
	 <li>LOG_UUCP</li>
	 <li>LOG_CRON</li>
	 <li>LOG_AUTHPRIV</li>
	 <li>LOG_FTP</li>
	 <li>LOG_RESERVED0</li>
	 <li>LOG_RESERVED1</li>
	 <li>LOG_RESERVED2</li>
	 <li>LOG_RESERVED3</li>
	 <li>LOG_LOCAL0</li>
	 <li>LOG_LOCAL1</li>
	 <li>LOG_LOCAL2</li>
	 <li>LOG_LOCAL3</li>
	 <li>LOG_LOCAL4</li>
	 <li>LOG_LOCAL5</li>
	 <li>LOG_LOCAL6</li>
	 <li>LOG_LOCAL7</li>
	</ul>
</div>
</div>
<div class='slot'>
<div class='slotName'>identity(optionalIdentity)</div>
<div class='slotValue'>	If optionalIdentity is specified, provides an identity for all of the messages you will be sending to the syslog daemon. Returns the identity.
</div>
</div>
<div class='slot'>
<div class='slotName'>isOpen</div>
<div class='slotValue'>	Returns self if the log is opened for writing. Otherwise, returns Nil.
</div>
</div>
<div class='slot'>
<div class='slotName'>log</div>
<div class='slotValue'>	Writes the supplied data to the log. Requires 2 arguments:
	<p>
	<ul>
	<li>Logging Priority</li>
	<li>Message to log</li>
	</ul>
</div>
</div>
<div class='slot'>
<div class='slotName'>mask(optionalMask)</div>
<div class='slotValue'>	If optionalMask is specified, optionalMask is a list which contains 
	any one or more values stored in the maskMap hash that will be OR'd 
	together, to provide the proper mask. Returns the logging mask (as a List).
</div>
</div>
<div class='slot'>
<div class='slotName'>maskMap</div>
<div class='slotValue'>	Contains keys/value pairs which represent numbers that specify the 
	logging mask. These values may be any one (or more) of the following:
	<p>
	<ul>
	<li>LOG_PRIMASK</li>
	<li>LOG_FACMASK</li>
	</ul>
</div>
</div>
<div class='slot'>
<div class='slotName'>open(aPriority, someOptions, optionalIdentity)</div>
<div class='slotValue'>	Opens the syslog for writing. optionalIdentity need not be entered 
	and will default to the name of the distribution of Io you are running 
	or if you have embedded Io into your application and set 
	Lobby distribution = "foo", it will be set to "foo".
</div>
</div>
<div class='slot'>
<div class='slotName'>options(optionalOptions)</div>
<div class='slotValue'>	If optionalOptions is specified, it should represent a list of the logging 
	options you can find in the optionsMap slot. All the values in the supplied 
	aList will be OR'd together when you call the open or reopen slots. 
	Returns the list of options if optionalFacility is omitted.
</div>
</div>
<div class='slot'>
<div class='slotName'>optionsMap</div>
<div class='slotValue'>	A map containing key/value pairs holding all available options. These include:
	<p>
	<ul>
	<li>LOG_PID</li>
	<li>LOG_CONS</li>
	<li>LOG_ODELAY</li>
	<li>LOG_NDELAY</li>
	<li>LOG_NOWAIT</li>
	<li>LOG_PERROR</li>
	</ul>
</div>
</div>
<div class='slot'>
<div class='slotName'>priority(optionalPriority)</div>
<div class='slotValue'>	If optionalPriority is specified, sets the value, and returns it. 
	If no value is specified, will return the previously stored value if 
	one has been set previously.
</div>
</div>
<div class='slot'>
<div class='slotName'>priorityMap</div>
<div class='slotValue'>	Contains key/value pairs for logging priorities for use when calling the log() method. These include:
	<p>
	<ul>
	<li>LOG_EMERG</li>
	<li>LOG_ALERT</li>
	<li>LOG_CRIT</li>
	<li>LOG_ERR</li>
	<li>LOG_WARNING</li>
	<li>LOG_NOTICE</li>
	<li>LOG_INFO</li>
	<li>LOG_DEBUG</li>
	</ul>
</div>
</div>
<div class='slot'>
<div class='slotName'>reopen(aFacility, someOptions, optionalIdentity)</div>
<div class='slotValue'>	Reopens an already open log session. This is useful if you wish to 
	change the facility you are logging to, the options you are logging 
	with, or the identity of the session. Takes the same options as the open slot.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>SystemCall</div>
<a name='SystemCall.SystemCall'></a>
<div class='class'>
<div class='className'>SystemCall</div>
<div class='classDescription'>A binding for "callsystem - system() on steorids"

<UL>
<LI> asynchonous running of a child process
<LI> setup of the environment
<LI> substitution of environment variables
<LI> connect all 3 standard streams to pipes, null devices, or files
<LI> pathname handling
</UL>

Example use;
<pre>	
sc = SystemCall clone
</pre>
</div>
<div class='slot'>
<div class='slotName'>asyncRun(command, argList, envMap)</div>
<div class='slotValue'> Run the system call.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>User</div>
<a name='User.User'></a>
<div class='class'>
<div class='className'>User</div>
<div class='classDescription'>	This object provides access to the local operating system's information 
	about the current user.
</div>
<div class='slot'>
<div class='slotName'>homeDirectory</div>
<div class='slotValue'>	Returns the current user's home directory as a Directory object.
</div>
</div>
<div class='slot'>
<div class='slotName'>name</div>
<div class='slotValue'>	Returns the current user's name.
</div>
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>UserInterface</div>
<div class='package'>
<div class='packageName'>Clutter</div>
<a name='Clutter.Clutter'></a>
<div class='class'>
<div class='className'>Clutter</div>
<div class='classDescription'>Clutter is a GObject based library for creating fast, visually rich, graphical user interfaces.

Clutter works by manipulating a scene-graph of 2D surfaces, or 'actors', inside a 3D space.

ClutterActor is the base class for such surfaces. All ClutterActors can be positioned, scaled and rotated in 3D space. In addition, other properties can be set, such as 2D clipping, children and opacity. Tranforms applied to a parent actor also apply to any children. Actors are also able to receive events.

Subclasses of ClutterActor include ClutterStage, ClutterTexture, ClutterLabel, ClutterRectangle, ClutterEntry and ClutterGroup. ClutterActors are added to a parent, transformed and then made visible.

ClutterStage is the top level ClutterActor - it's the representation of a window, or framebuffer. It is created automatically when Clutter is initialised. ClutterStage is a ClutterGroup, a class implementing the ClutterCointainer interface.

ClutterTimelines provide the basis for Clutter's animation utilities. Multiple timelines can be synchronised using ClutterScore, and ClutterBehaviour and ClutterEffect allow for the creation of animation effects such as transitions.

Clutter further contains a number of utilities, including; ClutterScript - for loading 'UI definition' files formatted in JSON, ClutterShader - a class for applying GPU shaders to actors, ClutterModel - a utility class for MVC list type implementations, and fixed point math utilities.

For detailed docs, see <a href=http://clutter-project.org/docs/clutter/stable/>clutter-project</a>
</div>
<div class='slot'>
<div class='slotName'>fontHinting</div>
<div class='slotValue'>Returns <code>true</code> if <code>CLUTTER_FONT_HINTING</code>
</div>
</div>
<div class='slot'>
<div class='slotName'>grabKeyboard(actor)</div>
<div class='slotValue'></div>
</div>
<div class='slot'>
<div class='slotName'>grabPointer(actor[, deviceId])</div>
<div class='slotValue'></div>
</div>
<div class='slot'>
<div class='slotName'>setFontHinting(useFontHinting)</div>
<div class='slotValue'>If <code>useFontHinting</code> is <code>false</code>, <code>CLUTTER_FONT_MIPMAPPING</code> flag will be used.
</div>
</div>
<div class='slot'>
<div class='slotName'>setSharedInt(firstInt, ...)</div>
<div class='slotValue'></div>
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>Video</div>
<div class='package'>
<div class='packageName'>AVCodec</div>
<a name='AVCodec.AVCodec'></a>
<div class='class'>
<div class='className'>AVCodec</div>
<div class='classDescription'>An object for encoding and decoding audio and video streams.

<p>
When an input stream containing audio data is opened, the following slots will be set:
<pre>
audioChannels
audioSampleRate
audioBitRate
audioDuration
audioFrameCount
</pre>

When an input stream containing video data is opened, the following slots will be set:

<pre>
framePeriod
videoDuration
videoFrameCount
</pre>
</div>
<div class='slot'>
<div class='slotName'>audioInputBuffer</div>
<div class='slotValue'>	Returns the input buffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>audioOutputBuffer</div>
<div class='slotValue'>	Returns the output buffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>close</div>
<div class='slotValue'>	Closes the input file if it's open. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>codecName</div>
<div class='slotValue'>Returns name of audio or video codec.
</div>
</div>
<div class='slot'>
<div class='slotName'>decode</div>
<div class='slotValue'>	Decodes the next chunk of input data. 
	Output (if any) is placed in the outputBuffers. 
	Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>decodeCodecNames</div>
<div class='slotValue'>	Returns a list of strings with the names of the decode codecs.
</div>
</div>
<div class='slot'>
<div class='slotName'>didProcess</div>
<div class='slotValue'>	Called after the receiver processes some more of the input buffer.
</div>
</div>
<div class='slot'>
<div class='slotName'>encodeCodecNames</div>
<div class='slotValue'>	Returns a list of strings with the names of the encode codecs.
</div>
</div>
<div class='slot'>
<div class='slotName'>inputCoro</div>
<div class='slotValue'>Returns coroutine currently writing to the receiver.
</div>
</div>
<div class='slot'>
<div class='slotName'>internalCoro</div>
<div class='slotValue'>Returns coroutine used for the AVCodec to process data.
</div>
</div>
<div class='slot'>
<div class='slotName'>isAtEnd</div>
<div class='slotValue'>	Returns true if the stream is at its end, false otherwise.
</div>
</div>
<div class='slot'>
<div class='slotName'>open</div>
<div class='slotValue'>	Opens the input file. Return self on success or raises an exception on error.
</div>
</div>
<div class='slot'>
<div class='slotName'>path</div>
<div class='slotValue'>Returns path to file the receiver is reading from or writing to.
</div>
</div>
<div class='slot'>
<div class='slotName'>setCodecName(aSeq)</div>
<div class='slotValue'> Sets the codec name. Returns self. See: encodeCodecNames and decodeCodecNames
</div>
</div>
<div class='slot'>
<div class='slotName'>setInputCoro(aCoro)</div>
<div class='slotValue'> Private method for setting inputCoro. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setInternalCoro(aCoro)</div>
<div class='slotValue'> Private method for setting internalCoro. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setPath(aSeq)</div>
<div class='slotValue'> Sets the path to file the receiver is reading or writing to. Returns self.
</div>
</div>
<div class='slot'>
<div class='slotName'>setStreamDestination(anObject)</div>
<div class='slotValue'>Sets the streamDestination to anObject. The didProcess method will call:
<pre>
if(streamDestination, streamDestination write(outputBuffer))
outputBuffer empty
</pre>
</div>
</div>
<div class='slot'>
<div class='slotName'>streamDestination</div>
<div class='slotValue'> Returns the streamDestination.
</div>
</div>
<div class='slot'>
<div class='slotName'>videoCodecName</div>
<div class='slotValue'>Returns the name of the video codec.
</div>
</div>
<div class='slot'>
<div class='slotName'>willProcess</div>
<div class='slotValue'>	Called before the receiver will process more of the input buffer. 
	If inputBuffer is empty, it pauses the receiver's coro.
</div>
</div>
<div class='slot'>
<div class='slotName'>write(aSequence)</div>
<div class='slotValue'>	Appends aSequence to the input buffer and resumes the receiver's coroutine in order to process it.
	The calling coroutine (inputCoroutine) will be scheduled to resume when didProcess is called.
</div>
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Theora</div>
<a name='Theora.TheoraComment'></a>
<div class='class'>
<div class='className'>TheoraComment</div>
<div class='classDescription'>A wrapper around the libtheora th_comment object.
</div>
<div class='slot'>
<div class='slotName'>count</div>
<div class='slotValue'>	Returns the number of comments.
</div>
</div>
</div>
<a name='Theora.TheoraDecodeContext'></a>
<div class='class'>
<div class='className'>TheoraDecodeContext</div>
<div class='classDescription'>A wrapper around the libtheora th_dec_ctx object.
</div>
</div>
<a name='Theora.TheoraInfo'></a>
<div class='class'>
<div class='className'>TheoraInfo</div>
<div class='classDescription'>A wrapper around the libtheora th_info object.
</div>
<div class='slot'>
<div class='slotName'>frameHeight</div>
<div class='slotValue'>	The encoded frame height.
</div>
</div>
<div class='slot'>
<div class='slotName'>frameRate</div>
<div class='slotValue'>	  The framerate of the video.
</div>
</div>
<div class='slot'>
<div class='slotName'>frameWidth</div>
<div class='slotValue'>	The encoded frame width.
</div>
</div>
</div>
<a name='Theora.TheoraSetupInfo'></a>
<div class='class'>
<div class='className'>TheoraSetupInfo</div>
<div class='classDescription'>A wrapper around the libtheora th_setup_info object.
</div>
</div>
</div>
<div class='package'>
<div class='packageName'>Vorbis</div>
<a name='Vorbis.VorbisBlock'></a>
<div class='class'>
<div class='className'>VorbisBlock</div>
<div class='classDescription'>A wrapper around the libvorbis vorbis_comment object.
</div>
<div class='slot'>
<div class='slotName'>setup</div>
<div class='slotValue'>	Initialize for decoding using the information obtained
	from reading the Vorbis headers.
</div>
</div>
<div class='slot'>
<div class='slotName'>synthesis(packet)</div>
<div class='slotValue'>	Decode the vorbis data from the packet, storing it in the
	block.
</div>
</div>
</div>
<a name='Vorbis.VorbisComment'></a>
<div class='class'>
<div class='className'>VorbisComment</div>
<div class='classDescription'>A wrapper around the libvorbis vorbis_comment object.
</div>
<div class='slot'>
<div class='slotName'>count</div>
<div class='slotValue'>	Returns number of comments.
</div>
</div>
</div>
<a name='Vorbis.VorbisDspState'></a>
<div class='class'>
<div class='className'>VorbisDspState</div>
<div class='classDescription'>A wrapper around the libvorbis vorbis_comment object.
</div>
<div class='slot'>
<div class='slotName'>blockin(block)</div>
<div class='slotValue'>	Decodes that data from the block, storing it in the dsp state.
</div>
</div>
<div class='slot'>
<div class='slotName'>headerin(info, comment, packet)</div>
<div class='slotValue'>	Try to decode a vorbis header from the packet.
</div>
</div>
<div class='slot'>
<div class='slotName'>pcmout</div>
<div class='slotValue'>	Returns array of audio data
</div>
</div>
<div class='slot'>
<div class='slotName'>setup(info)</div>
<div class='slotValue'>	Initialize for decoding using the information obtained
	from reading the Vorbis headers.
</div>
</div>
</div>
<a name='Vorbis.VorbisInfo'></a>
<div class='class'>
<div class='className'>VorbisInfo</div>
<div class='classDescription'>A wrapper around the libvorbis vorbis_info object.
</div>
<div class='slot'>
<div class='slotName'>channels</div>
<div class='slotValue'>	Returns the number of channels in the vorbis data.
</div>
</div>
<div class='slot'>
<div class='slotName'>rate</div>
<div class='slotValue'>	Returns the sample rate of the vorbis data.
</div>
</div>
<div class='slot'>
<div class='slotName'>version</div>
<div class='slotValue'>	Returns the vorbis version required for this data.
</div>
</div>
</div>
</div>
</div>
<div class='category'>
<div class='categoryName'>binding</div>
<div class='package'>
<div class='packageName'>CFFI</div>
<a name='CFFI.CFFI'></a>
<div class='class'>
<div class='className'>CFFI</div>
</div>
</div>
</div>
</div>
</div>
</body>
</html>